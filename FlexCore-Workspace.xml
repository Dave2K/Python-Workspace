<?xml version="1.0" encoding="utf-8"?>
<DataArchitectureDesign Author="Davide">
  <Creation Date="30-03-2025" Hour="19:12:25"/>
  <FileSystem>
    <Folder Name="FlexCore-Workspace">
      <Folder Name="Applications"/>
      <Folder Name="Documents">
        <File Name="ARCHITECTURE.md" MIME="text/markdown" Encoding="utf_8">
          # FlexCore Architecture Documentation
          
          ## Overview
          Modular .NET framework per applicazioni enterprise con:
          - ✅ Cache multistrato (Memory/Redis)  
          - ✅ Database-agnostic (SQL/NoSQL)  
          - ✅ Logging estendibile  
          - ✅ Sicurezza JWT/OAuth  
          - ✅ Supporto ORM ibrido (EF Core/Dapper/ADO)  
          
          ---
          
          ## Core Modules
          
          ### 1. Caching
          | Componente              | Descrizione                                  | File                     |
          |-------------------------|----------------------------------------------|--------------------------|
          | `CacheProviderFactory`  | Factory per provider di cache                | [CacheProviderFactory.cs] |
          | `BaseCacheManager`      | Classe base per operazioni CRUD sulla cache  | [BaseCacheManager.cs]     |
          | `RedisCacheProvider`    | Implementazione Redis                        | [RedisCacheProvider.cs]   |
          | **Flusso**              | `Get → [Memory → Redis] → Fallback DB`       |                          |
          
          ### 2. Database
          | Componente              | Descrizione                                  | File                     |
          |-------------------------|----------------------------------------------|--------------------------|
          | `IUnitOfWork`           | Gestione transazioni ACID                   | [IUnitOfWork.cs]         |
          | `DatabaseProviderFactory`| Factory per connessioni DB                  | [DatabaseProviderFactory.cs] |
          | `ApplicationDbContext`  | Contesto EF Core con transazioni             | [ApplicationDbContext.cs] |
          
          ### 3. Logging
          | Componente              | Descrizione                                  | File                     |
          |-------------------------|----------------------------------------------|--------------------------|
          | `ILoggingProvider`      | Interfaccia per logger (Console/File/Cloud)  | [ILoggingProvider.cs]    |
          | `SerilogLogger`         | Implementazione Serilog                      | [SerilogLogger.cs]       |
          | **Pipeline**            | `Log → [Filtri] → [Formattazione] → Sink`    |                          |
          
          ### 4. Security
          | Componente              | Descrizione                                  | File                     |
          |-------------------------|----------------------------------------------|--------------------------|
          | `JwtTokenService`       | Generazione/validazione token JWT            | [JwtTokenService.cs]     |
          | `GoogleTokenValidator`  | Integrazione OAuth con Google                | [GoogleTokenValidator.cs] |
          | `PolicyService`         | Autorizzazione basata su ruoli               | [PolicyService.cs]       |
          
          ### 5. ORM
          | Componente              | Descrizione                                  | File                     |
          |-------------------------|----------------------------------------------|--------------------------|
          | `OrmProviderFactory`    | Seleziona dinamicamente EF/Dapper/ADO        | [OrmProviderFactory.cs]  |
          | `EFCoreOrmProvider`     | Implementazione EF Core                      | [EFCoreOrmProvider.cs]   |
          | **Pattern**             | Unit of Work + Repository                    |                          |
          
          ### 6. Configuration
          | Componente              | Descrizione                                  | File                     |
          |-------------------------|----------------------------------------------|--------------------------|
          | `ConfigurationAdapter`  | Binding delle impostazioni da appsettings.json | [ConfigurationAdapter.cs] |
          | `AppSettings`           | Modello per configurazioni globali           | [AppSettings.cs]         |
          
          ### 7. Infrastructure
          | Componente              | Descrizione                                  | File                     |
          |-------------------------|----------------------------------------------|--------------------------|
          | `EventBus`              | Publish/Subscribe eventi di dominio          | [EventBus.cs]            |
          | `CommandBase`           | Implementazione base del pattern CQRS        | [CommandBase.cs]         |
          
          ---
          
          ## Diagramma Architetturale
          ```ascii
                             +-------------------+
                             |   API/Client      |
                             +-------------------+
                                      ↓
                             +-------------------+
                             |   Security Layer  |
                             | (JWT/OAuth/Policies) 
                             +-------------------+
                                      ↓
                             +-------------------+
                             |   Caching Layer   |
                             | (Memory → Redis)  |
                             +-------------------+
                                      ↓
                             +-------------------+
                             |   Business Logic  |
                             +-------------------+
                                      ↓
                             +-------------------+
                             |   Data Layer      |
                             | (ORM → Database)  |
                             +-------------------+
                                      ↓
                             +-------------------+
                             |   Logging/Monitoring 
                             | (Serilog → Cloud) |
                             +-------------------+
        </File>
        <File Name="Da Integrare.md" MIME="text/markdown" Encoding="utf_8">
          ### **Librerie Consigliate per Estendere FlexCore**
          
          ```markdown
          ### **1. Comunicazione e Integrazione**  
          - **API Client**: `Refit`, `RestSharp`, `Flurl`  
          - **gRPC**: `Grpc.AspNetCore`, `gRPC-Web`  
          - **SignalR**: Notifiche in tempo reale  
          
          ### **2. Lavori in Background**  
          - **Job Scheduler**: `Hangfire`, `Quartz.NET`  
          - **Message Brokers**: `RabbitMQ.Client`, Apache Kafka, Azure Service Bus  
          
          ### **3. Gestione File e Dati**  
          - **File Storage**: `AWSSDK.S3`, `Azure.Storage.Blobs`, filesystem locale  
          - **Excel/CSV**: `ClosedXML`, `EPPlus`  
          - **PDF Generation**: `QuestPDF`, `iTextSharp`  
          
          ### **4. Monitoraggio e Sicurezza**  
          - **Health Checks**: `AspNetCore.HealthChecks`  
          - **Distributed Tracing**: `OpenTelemetry`  
          - **Authentication Providers**: `Microsoft.AspNetCore.Authentication`  
          
          ### **5. Architettura e Testing**  
          - **CQRS/MediatR**: `MediatR`  
          - **Validation**: `FluentValidation`  
          - **Testing**: `Moq`, `AutoFixture`, `Snapshooter`  
          
          ### **6. Deployment e Scalabilità**  
          - **Containerizzazione**: Docker, Kubernetes  
          - **Caching Distribuito**: Memcached, `Redis`  
          
          ### **7. UI e Frontend**  
          - **Blazor Components**: Componenti riutilizzabili  
          - **GraphQL**: `HotChocolate`, `GraphQL.NET`  
          
          ### **8. Dominio Specifico**  
          - **AI/ML Integration**: `ML.NET`, Azure AI  
        </File>
        <File Name="doc connessioni DB.md" MIME="text/markdown" Encoding="utf_8">
          ```markdown
          # 🔌 Varianti di Connessione per Tutti i Provider
          
          ## 1. SQL Server
          **Configurazione JSON:**
          ```json
          "ConnectionStrings": {
            "SQLServer": "Server=myServerAddress;Database=myDataBase;User Id=myUsername;Password=myPassword;"
          }
          
          // Connessione Trusted
          "SQLServer_Trusted": "Server=localhost;Database=FlexCore;Trusted_Connection=True;"
          ```
          
          **Programmatico:**
          ```csharp
          services.AddDbContext&lt;AppDbContext&gt;(options =&gt; 
              options.UseSqlServer(
                  Configuration.GetConnectionString("SQLServer"),
                  sqlOptions =&gt; sqlOptions.EnableRetryOnFailure()
              )
          );
          ```
          
          ---
          
          ## 2. SQLite
          **Configurazione JSON:**
          ```json
          "ConnectionStrings": {
            "SQLite": "Data Source=./Data/FlexCore.db;Cache=Shared;"
          }
          
          // Modalità memoria
          "SQLite_InMemory": "Data Source=:memory:;"
          ```
          
          **Programmatico:**
          ```csharp
          services.AddDbContext&lt;AppDbContext&gt;(options =&gt; 
              options.UseSqlite(
                  Configuration.GetConnectionString("SQLite"),
                  sqliteOptions =&gt; sqliteOptions.CommandTimeout(30)
              )
          );
          ```
          
          ---
          
          ## 3. MariaDB/MySQL
          **Configurazione JSON:**
          ```json
          "ConnectionStrings": {
            "MariaDB": "Server=localhost;Port=3306;Database=flexcore;User=root;Password=myPassword;"
          }
          ```
          
          **Programmatico:**
          ```csharp
          services.AddDbContext&lt;AppDbContext&gt;(options =&gt; 
              options.UseMySql(
                  Configuration.GetConnectionString("MariaDB"),
                  new MySqlServerVersion(new Version(10, 5, 12)),
                  mysqlOptions =&gt; mysqlOptions.EnableRetryOnFailure()
              )
          );
          ```
          
          ---
          
          ## 4. Redis
          **Configurazione JSON:**
          ```json
          "ConnectionStrings": {
            "Redis": "flexcore-redis:6379,password=myRedisPassword,ssl=True,abortConnect=False"
          }
          ```
          
          **Programmatico:**
          ```csharp
          services.AddStackExchangeRedisCache(options =&gt; {
              options.Configuration = Configuration.GetConnectionString("Redis");
              options.InstanceName = "FlexCoreCache";
          });
          ```
          
          ---
          
          ## 5. Configurazione Multi-Provider (Dynamic)
          ```csharp
          var provider = Configuration["DatabaseSettings:DefaultProvider"];
          
          switch(provider) {
              case "SQLServer":
                  services.AddSqlServer&lt;AppDbContext&gt;(
                      Configuration.GetConnectionString("SQLServer"));
                  break;
                  
              case "SQLite":
                  services.AddSqlite&lt;AppDbContext&gt;(
                      Configuration.GetConnectionString("SQLite"));
                  break;
                  
              case "MariaDB":
                  services.AddMySql&lt;AppDbContext&gt;(
                      Configuration.GetConnectionString("MariaDB"));
                  break;
          }
          ```
          
          ---
          
          ## 📌 Note Essenziali:
          1. **Sicurezza:**  
             ```csharp
             // Usare sempre Configuration Manager/Key Vault in produzione
             var connString = config.GetConnectionString("SQLServer") 
                 + $";Password={config["DbPassword"]}"; // Da secrets
             ```
          
          2. **Timeout:**  
             ```json
             "ConnectionStrings": {
               "SQLServer": "Server=...;Connect Timeout=30;"
             }
             ```
          
          3. **Pooling:**  
             ```json
             "SQLServer": "Server=...;Max Pool Size=100;Min Pool Size=10;"
             ```
          
          4. **SSL:**  
             ```json
             "MariaDB": "Server=...;SslMode=Required;"
             ```
          ```
        </File>
        <File Name="memo.txt" MIME="text/plain" Encoding="ascii">
          di tanti in tanto appare un folder in sources con nome FlexCoreWorkspace
          
          
          namespace FlexCore.Security.Identity.Models
          {
              public class JwtSettings
              {
                  public required string SecretKey { get; set; }
                  public required string Issuer { get; set; }
                  public required string Audience { get; set; }
                  public int ExpiryMinutes { get; set; } = 60;
              }
          }
          
          il 60 deve essere in config
          
          ---------------------------------------------------------
          
          
          
        </File>
        <File Name="Sviluppi futuri.md" MIME="text/markdown" Encoding="utf_8">
          ### 🗂️ **Struttura del Workspace per Test e Controlli**
          
          ```text
          /FlexCore-Workspace
          ├── Applications/
          │   ├── ControlApps/               # App di controllo e test avanzati
          │   │   ├── FlexCore.IntegrationTests/
          │   │   ├── FlexCore.PerformanceTool/
          │   │   ├── FlexCore.StressTester/
          │   │   ├── FlexCore.SecurityAudit/
          │   │   └── FlexCore.ConfigValidator/
          │   └── DemoApps/                  # Demo pratiche
          ├── Tests/
          │   ├── UnitTests/                 # Test unitari
          │   └── E2ETests/                  # Test end-to-end
          ```
          
          ---
          
          ### 🧪 **Applicazioni di Controllo e Loro Funzioni**
          
          #### 1. **FlexCore.IntegrationTests**  
          - **Scopo**: Verificare interazioni tra moduli (es. Cache → Database → Logging).  
          - **Struttura**:  
            ```bash
            IntegrationTests/
            ├── CacheDatabaseSyncTests.cs    # Test transazioni ibride
            ├── ErrorHandlingTests.cs        # Tracciamento errori cross-modulo
            └── appsettings.test.json        # Configurazione dedicata
            ```  
          - **Esempio Codice**:  
            ```csharp
            [Fact]
            public void UpdateProduct_ShouldInvalidateCache() 
            {
                var product = _dbContext.Products.First();
                _cache.Set(product.Id, product);
                
                product.Price = 100;
                _dbContext.SaveChanges();
                
                Assert.Null(_cache.Get&lt;Product&gt;(product.Id)); // Cache dovrebbe essere invalidata
            }
            ```
          
          ---
          
          #### 2. **FlexCore.PerformanceTool**  
          - **Metriche**:  
            - ⏱️ Tempo di risposta API  
            - 📉 Utilizzo memoria durante picchi  
            - 🔄 Throughput operazioni DB  
          - **Tecnologie**: `BenchmarkDotNet`, `MiniProfiler`  
          - **Report**:  
            ```bash
            PerformanceTool/Reports/
            ├── redis_latency_2023.csv       # Dati grezzi
            └── summary.html                 # Dashboard interattiva
            ```
          
          ---
          
          #### 3. **FlexCore.StressTester**  
          - **Scenari**:  
            - Simulazione 10k utenti concorrenti  
            - Test di carico su API critiche  
          - **Codice Esempio**:  
            ```csharp
            [Fact]
            public void LoadTest_CheckoutApi() 
            {
                var results = LoadSimulator.Simulate(users: 5000, duration: TimeSpan.FromMinutes(5));
                Assert.True(results.ErrorRate &lt; 0.01); // Tasso errore &lt; 1%
            }
            ```
          
          ---
          
          #### 4. **FlexCore.SecurityAudit**  
          - **Test Eseguiti**:  
            - ✅ Validazione JWT  
            - 🛡️ Test SQL Injection  
            - 🔒 Controllo permessi RBAC  
          - **Strumenti**: `OWASP ZAP`, `Nessus`  
          
          ---
          
          #### 5. **FlexCore.ConfigValidator**  
          - **Validazioni**:  
            ```csharp
            public class RedisConfigValidator : AbstractValidator&lt;RedisSettings&gt; 
            {
                public RedisConfigValidator() 
                {
                    RuleFor(x =&gt; x.ConnectionString)
                        .Must(uri =&gt; Uri.TryCreate(uri, UriKind.Absolute, out _))
                        .WithMessage("Formato connection string non valido");
                }
            }
            ```
          
          ---
          
          ### ✅ **Vantaggi della Struttura**  
          - **Isolamento**: Ambienti Docker dedicati per i test (`testcontainers`).  
          - **Automazione**: Integrazione con GitHub Actions:  
            ```yaml
            # .github/workflows/tests.yml
            - name: Run Integration Tests
              run: dotnet test --filter Category=Integration
            ```  
          - **Documentazione**: I demo fungono da guida per nuovi sviluppatori.
        </File>
        <Folder Name="test">
          <File Name="ARCHITECTURE.md" MIME="text/markdown" Encoding="utf_8">
            # FlexCore Architecture Documentation
            
            ## Overview
            Modular .NET framework per applicazioni enterprise con:
            - ✅ Cache multistrato (Memory/Redis)  
            - ✅ Database-agnostic (SQL/NoSQL)  
            - ✅ Logging estendibile  
            - ✅ Sicurezza JWT/OAuth  
            - ✅ Supporto ORM ibrido (EF Core/Dapper/ADO)  
            
            ---
            
            ## Core Modules
            
            ### 1. Caching
            | Componente              | Descrizione                                  | File                     |
            |-------------------------|----------------------------------------------|--------------------------|
            | `CacheProviderFactory`  | Factory per provider di cache                | [CacheProviderFactory.cs] |
            | `BaseCacheManager`      | Classe base per operazioni CRUD sulla cache  | [BaseCacheManager.cs]     |
            | `RedisCacheProvider`    | Implementazione Redis                        | [RedisCacheProvider.cs]   |
            | **Flusso**              | `Get → [Memory → Redis] → Fallback DB`       |                          |
            
            ### 2. Database
            | Componente              | Descrizione                                  | File                     |
            |-------------------------|----------------------------------------------|--------------------------|
            | `IUnitOfWork`           | Gestione transazioni ACID                   | [IUnitOfWork.cs]         |
            | `DatabaseProviderFactory`| Factory per connessioni DB                  | [DatabaseProviderFactory.cs] |
            | `ApplicationDbContext`  | Contesto EF Core con transazioni             | [ApplicationDbContext.cs] |
            
            ### 3. Logging
            | Componente              | Descrizione                                  | File                     |
            |-------------------------|----------------------------------------------|--------------------------|
            | `ILoggingProvider`      | Interfaccia per logger (Console/File/Cloud)  | [ILoggingProvider.cs]    |
            | `SerilogLogger`         | Implementazione Serilog                      | [SerilogLogger.cs]       |
            | **Pipeline**            | `Log → [Filtri] → [Formattazione] → Sink`    |                          |
            
            ### 4. Security
            | Componente              | Descrizione                                  | File                     |
            |-------------------------|----------------------------------------------|--------------------------|
            | `JwtTokenService`       | Generazione/validazione token JWT            | [JwtTokenService.cs]     |
            | `GoogleTokenValidator`  | Integrazione OAuth con Google                | [GoogleTokenValidator.cs] |
            | `PolicyService`         | Autorizzazione basata su ruoli               | [PolicyService.cs]       |
            
            ### 5. ORM
            | Componente              | Descrizione                                  | File                     |
            |-------------------------|----------------------------------------------|--------------------------|
            | `OrmProviderFactory`    | Seleziona dinamicamente EF/Dapper/ADO        | [OrmProviderFactory.cs]  |
            | `EFCoreOrmProvider`     | Implementazione EF Core                      | [EFCoreOrmProvider.cs]   |
            | **Pattern**             | Unit of Work + Repository                    |                          |
            
            ### 6. Configuration
            | Componente              | Descrizione                                  | File                     |
            |-------------------------|----------------------------------------------|--------------------------|
            | `ConfigurationAdapter`  | Binding delle impostazioni da appsettings.json | [ConfigurationAdapter.cs] |
            | `AppSettings`           | Modello per configurazioni globali           | [AppSettings.cs]         |
            
            ### 7. Infrastructure
            | Componente              | Descrizione                                  | File                     |
            |-------------------------|----------------------------------------------|--------------------------|
            | `EventBus`              | Publish/Subscribe eventi di dominio          | [EventBus.cs]            |
            | `CommandBase`           | Implementazione base del pattern CQRS        | [CommandBase.cs]         |
            
            ---
            
            ## Diagramma Architetturale
            ```ascii
                               +-------------------+
                               |   API/Client      |
                               +-------------------+
                                        ↓
                               +-------------------+
                               |   Security Layer  |
                               | (JWT/OAuth/Policies) 
                               +-------------------+
                                        ↓
                               +-------------------+
                               |   Caching Layer   |
                               | (Memory → Redis)  |
                               +-------------------+
                                        ↓
                               +-------------------+
                               |   Business Logic  |
                               +-------------------+
                                        ↓
                               +-------------------+
                               |   Data Layer      |
                               | (ORM → Database)  |
                               +-------------------+
                                        ↓
                               +-------------------+
                               |   Logging/Monitoring 
                               | (Serilog → Cloud) |
                               +-------------------+
          </File>
          <File Name="Da Integrare.md" MIME="text/markdown" Encoding="utf_8">
            ### **Librerie Consigliate per Estendere FlexCore**
            
            ```markdown
            ### **1. Comunicazione e Integrazione**  
            - **API Client**: `Refit`, `RestSharp`, `Flurl`  
            - **gRPC**: `Grpc.AspNetCore`, `gRPC-Web`  
            - **SignalR**: Notifiche in tempo reale  
            
            ### **2. Lavori in Background**  
            - **Job Scheduler**: `Hangfire`, `Quartz.NET`  
            - **Message Brokers**: `RabbitMQ.Client`, Apache Kafka, Azure Service Bus  
            
            ### **3. Gestione File e Dati**  
            - **File Storage**: `AWSSDK.S3`, `Azure.Storage.Blobs`, filesystem locale  
            - **Excel/CSV**: `ClosedXML`, `EPPlus`  
            - **PDF Generation**: `QuestPDF`, `iTextSharp`  
            
            ### **4. Monitoraggio e Sicurezza**  
            - **Health Checks**: `AspNetCore.HealthChecks`  
            - **Distributed Tracing**: `OpenTelemetry`  
            - **Authentication Providers**: `Microsoft.AspNetCore.Authentication`  
            
            ### **5. Architettura e Testing**  
            - **CQRS/MediatR**: `MediatR`  
            - **Validation**: `FluentValidation`  
            - **Testing**: `Moq`, `AutoFixture`, `Snapshooter`  
            
            ### **6. Deployment e Scalabilità**  
            - **Containerizzazione**: Docker, Kubernetes  
            - **Caching Distribuito**: Memcached, `Redis`  
            
            ### **7. UI e Frontend**  
            - **Blazor Components**: Componenti riutilizzabili  
            - **GraphQL**: `HotChocolate`, `GraphQL.NET`  
            
            ### **8. Dominio Specifico**  
            - **AI/ML Integration**: `ML.NET`, Azure AI  
          </File>
          <File Name="doc connessioni DB.md" MIME="text/markdown" Encoding="utf_8">
            ```markdown
            # 🔌 Varianti di Connessione per Tutti i Provider
            
            ## 1. SQL Server
            **Configurazione JSON:**
            ```json
            "ConnectionStrings": {
              "SQLServer": "Server=myServerAddress;Database=myDataBase;User Id=myUsername;Password=myPassword;"
            }
            
            // Connessione Trusted
            "SQLServer_Trusted": "Server=localhost;Database=FlexCore;Trusted_Connection=True;"
            ```
            
            **Programmatico:**
            ```csharp
            services.AddDbContext&lt;AppDbContext&gt;(options =&gt; 
                options.UseSqlServer(
                    Configuration.GetConnectionString("SQLServer"),
                    sqlOptions =&gt; sqlOptions.EnableRetryOnFailure()
                )
            );
            ```
            
            ---
            
            ## 2. SQLite
            **Configurazione JSON:**
            ```json
            "ConnectionStrings": {
              "SQLite": "Data Source=./Data/FlexCore.db;Cache=Shared;"
            }
            
            // Modalità memoria
            "SQLite_InMemory": "Data Source=:memory:;"
            ```
            
            **Programmatico:**
            ```csharp
            services.AddDbContext&lt;AppDbContext&gt;(options =&gt; 
                options.UseSqlite(
                    Configuration.GetConnectionString("SQLite"),
                    sqliteOptions =&gt; sqliteOptions.CommandTimeout(30)
                )
            );
            ```
            
            ---
            
            ## 3. MariaDB/MySQL
            **Configurazione JSON:**
            ```json
            "ConnectionStrings": {
              "MariaDB": "Server=localhost;Port=3306;Database=flexcore;User=root;Password=myPassword;"
            }
            ```
            
            **Programmatico:**
            ```csharp
            services.AddDbContext&lt;AppDbContext&gt;(options =&gt; 
                options.UseMySql(
                    Configuration.GetConnectionString("MariaDB"),
                    new MySqlServerVersion(new Version(10, 5, 12)),
                    mysqlOptions =&gt; mysqlOptions.EnableRetryOnFailure()
                )
            );
            ```
            
            ---
            
            ## 4. Redis
            **Configurazione JSON:**
            ```json
            "ConnectionStrings": {
              "Redis": "flexcore-redis:6379,password=myRedisPassword,ssl=True,abortConnect=False"
            }
            ```
            
            **Programmatico:**
            ```csharp
            services.AddStackExchangeRedisCache(options =&gt; {
                options.Configuration = Configuration.GetConnectionString("Redis");
                options.InstanceName = "FlexCoreCache";
            });
            ```
            
            ---
            
            ## 5. Configurazione Multi-Provider (Dynamic)
            ```csharp
            var provider = Configuration["DatabaseSettings:DefaultProvider"];
            
            switch(provider) {
                case "SQLServer":
                    services.AddSqlServer&lt;AppDbContext&gt;(
                        Configuration.GetConnectionString("SQLServer"));
                    break;
                    
                case "SQLite":
                    services.AddSqlite&lt;AppDbContext&gt;(
                        Configuration.GetConnectionString("SQLite"));
                    break;
                    
                case "MariaDB":
                    services.AddMySql&lt;AppDbContext&gt;(
                        Configuration.GetConnectionString("MariaDB"));
                    break;
            }
            ```
            
            ---
            
            ## 📌 Note Essenziali:
            1. **Sicurezza:**  
               ```csharp
               // Usare sempre Configuration Manager/Key Vault in produzione
               var connString = config.GetConnectionString("SQLServer") 
                   + $";Password={config["DbPassword"]}"; // Da secrets
               ```
            
            2. **Timeout:**  
               ```json
               "ConnectionStrings": {
                 "SQLServer": "Server=...;Connect Timeout=30;"
               }
               ```
            
            3. **Pooling:**  
               ```json
               "SQLServer": "Server=...;Max Pool Size=100;Min Pool Size=10;"
               ```
            
            4. **SSL:**  
               ```json
               "MariaDB": "Server=...;SslMode=Required;"
               ```
            ```
          </File>
          <File Name="memo.txt" MIME="text/plain" Encoding="ascii">
            di tanti in tanto appare un folder in sources con nome FlexCoreWorkspace
            
            
            namespace FlexCore.Security.Identity.Models
            {
                public class JwtSettings
                {
                    public required string SecretKey { get; set; }
                    public required string Issuer { get; set; }
                    public required string Audience { get; set; }
                    public int ExpiryMinutes { get; set; } = 60;
                }
            }
            
            il 60 deve essere in config
            
            ---------------------------------------------------------
            
            
            
          </File>
          <File Name="Sviluppi futuri.md" MIME="text/markdown" Encoding="utf_8">
            ### 🗂️ **Struttura del Workspace per Test e Controlli**
            
            ```text
            /FlexCore-Workspace
            ├── Applications/
            │   ├── ControlApps/               # App di controllo e test avanzati
            │   │   ├── FlexCore.IntegrationTests/
            │   │   ├── FlexCore.PerformanceTool/
            │   │   ├── FlexCore.StressTester/
            │   │   ├── FlexCore.SecurityAudit/
            │   │   └── FlexCore.ConfigValidator/
            │   └── DemoApps/                  # Demo pratiche
            ├── Tests/
            │   ├── UnitTests/                 # Test unitari
            │   └── E2ETests/                  # Test end-to-end
            ```
            
            ---
            
            ### 🧪 **Applicazioni di Controllo e Loro Funzioni**
            
            #### 1. **FlexCore.IntegrationTests**  
            - **Scopo**: Verificare interazioni tra moduli (es. Cache → Database → Logging).  
            - **Struttura**:  
              ```bash
              IntegrationTests/
              ├── CacheDatabaseSyncTests.cs    # Test transazioni ibride
              ├── ErrorHandlingTests.cs        # Tracciamento errori cross-modulo
              └── appsettings.test.json        # Configurazione dedicata
              ```  
            - **Esempio Codice**:  
              ```csharp
              [Fact]
              public void UpdateProduct_ShouldInvalidateCache() 
              {
                  var product = _dbContext.Products.First();
                  _cache.Set(product.Id, product);
                  
                  product.Price = 100;
                  _dbContext.SaveChanges();
                  
                  Assert.Null(_cache.Get&lt;Product&gt;(product.Id)); // Cache dovrebbe essere invalidata
              }
              ```
            
            ---
            
            #### 2. **FlexCore.PerformanceTool**  
            - **Metriche**:  
              - ⏱️ Tempo di risposta API  
              - 📉 Utilizzo memoria durante picchi  
              - 🔄 Throughput operazioni DB  
            - **Tecnologie**: `BenchmarkDotNet`, `MiniProfiler`  
            - **Report**:  
              ```bash
              PerformanceTool/Reports/
              ├── redis_latency_2023.csv       # Dati grezzi
              └── summary.html                 # Dashboard interattiva
              ```
            
            ---
            
            #### 3. **FlexCore.StressTester**  
            - **Scenari**:  
              - Simulazione 10k utenti concorrenti  
              - Test di carico su API critiche  
            - **Codice Esempio**:  
              ```csharp
              [Fact]
              public void LoadTest_CheckoutApi() 
              {
                  var results = LoadSimulator.Simulate(users: 5000, duration: TimeSpan.FromMinutes(5));
                  Assert.True(results.ErrorRate &lt; 0.01); // Tasso errore &lt; 1%
              }
              ```
            
            ---
            
            #### 4. **FlexCore.SecurityAudit**  
            - **Test Eseguiti**:  
              - ✅ Validazione JWT  
              - 🛡️ Test SQL Injection  
              - 🔒 Controllo permessi RBAC  
            - **Strumenti**: `OWASP ZAP`, `Nessus`  
            
            ---
            
            #### 5. **FlexCore.ConfigValidator**  
            - **Validazioni**:  
              ```csharp
              public class RedisConfigValidator : AbstractValidator&lt;RedisSettings&gt; 
              {
                  public RedisConfigValidator() 
                  {
                      RuleFor(x =&gt; x.ConnectionString)
                          .Must(uri =&gt; Uri.TryCreate(uri, UriKind.Absolute, out _))
                          .WithMessage("Formato connection string non valido");
                  }
              }
              ```
            
            ---
            
            ### ✅ **Vantaggi della Struttura**  
            - **Isolamento**: Ambienti Docker dedicati per i test (`testcontainers`).  
            - **Automazione**: Integrazione con GitHub Actions:  
              ```yaml
              # .github/workflows/tests.yml
              - name: Run Integration Tests
                run: dotnet test --filter Category=Integration
              ```  
            - **Documentazione**: I demo fungono da guida per nuovi sviluppatori.
          </File>
        </Folder>
      </Folder>
      <Folder Name="Projects">
        <Folder Name="Libraries">
          <Folder Name="Caching">
            <Folder Name="FlexCore.Caching.Common">
              <Folder Name="Exceptions">
                <File Name="CacheException.cs" MIME="text/plain" Encoding="utf_8" BOM="True">
                  ﻿namespace FlexCore.Caching.Common.Exceptions;
                  
                  using System;
                  
                  /// &lt;summary&gt;
                  /// Eccezione personalizzata per gli errori di cache.
                  /// &lt;/summary&gt;
                  public class CacheException : Exception
                  {
                      /// &lt;summary&gt;
                      /// Inizializza una nuova istanza della classe &lt;see cref="CacheException"/&gt;.
                      /// &lt;/summary&gt;
                      /// &lt;param name="message"&gt;Messaggio di errore.&lt;/param&gt;
                      public CacheException(string message) : base(message) { }
                  
                      /// &lt;summary&gt;
                      /// Inizializza una nuova istanza della classe &lt;see cref="CacheException"/&gt;.
                      /// &lt;/summary&gt;
                      /// &lt;param name="message"&gt;Messaggio di errore.&lt;/param&gt;
                      /// &lt;param name="innerException"&gt;Eccezione interna.&lt;/param&gt;
                      public CacheException(string message, Exception innerException) : base(message, innerException) { }
                  }
                </File>
                <File Name="MemoryCacheException.cs" MIME="text/plain" Encoding="utf_8" BOM="True">
                  ﻿namespace FlexCore.Caching.Common.Exceptions;
                  
                  using System;
                  
                  /// &lt;summary&gt;
                  /// Eccezione personalizzata per gli errori di cache in memoria.
                  /// &lt;/summary&gt;
                  public class MemoryCacheException : CacheException
                  {
                      /// &lt;summary&gt;
                      /// Inizializza una nuova istanza della classe &lt;see cref="MemoryCacheException"/&gt;.
                      /// &lt;/summary&gt;
                      /// &lt;param name="message"&gt;Messaggio di errore.&lt;/param&gt;
                      public MemoryCacheException(string message) : base(message) { }
                  
                      /// &lt;summary&gt;
                      /// Inizializza una nuova istanza della classe &lt;see cref="MemoryCacheException"/&gt;.
                      /// &lt;/summary&gt;
                      /// &lt;param name="message"&gt;Messaggio di errore.&lt;/param&gt;
                      /// &lt;param name="innerException"&gt;Eccezione interna.&lt;/param&gt;
                      public MemoryCacheException(string message, Exception innerException) : base(message, innerException) { }
                  }
                </File>
                <File Name="RedisCacheException.cs" MIME="text/plain" Encoding="utf_8" BOM="True">
                  ﻿namespace FlexCore.Caching.Common.Exceptions;
                  
                  using System;
                  
                  /// &lt;summary&gt;
                  /// Eccezione personalizzata per gli errori di cache Redis.
                  /// &lt;/summary&gt;
                  public class RedisCacheException : CacheException
                  {
                      /// &lt;summary&gt;
                      /// Inizializza una nuova istanza della classe &lt;see cref="RedisCacheException"/&gt;.
                      /// &lt;/summary&gt;
                      /// &lt;param name="message"&gt;Messaggio di errore.&lt;/param&gt;
                      public RedisCacheException(string message) : base(message) { }
                  
                      /// &lt;summary&gt;
                      /// Inizializza una nuova istanza della classe &lt;see cref="RedisCacheException"/&gt;.
                      /// &lt;/summary&gt;
                      /// &lt;param name="message"&gt;Messaggio di errore.&lt;/param&gt;
                      /// &lt;param name="innerException"&gt;Eccezione interna.&lt;/param&gt;
                      public RedisCacheException(string message, Exception innerException) : base(message, innerException) { }
                  }
                </File>
              </Folder>
              <File Name="FlexCore.Caching.Common.csproj" MIME="application/xml" Encoding="utf_8" BOM="True">
                ﻿&lt;Project Sdk="Microsoft.NET.Sdk"&gt;
                
                  &lt;PropertyGroup&gt;
                    &lt;TargetFramework&gt;net9.0&lt;/TargetFramework&gt;
                    &lt;ImplicitUsings&gt;enable&lt;/ImplicitUsings&gt;
                    &lt;Nullable&gt;enable&lt;/Nullable&gt;
                  &lt;/PropertyGroup&gt;
                
                &lt;/Project&gt;
              </File>
              <Folder Name="Handlers">
                <File Name="CacheExceptionHandler.cs" MIME="text/plain" Encoding="utf_8" BOM="True">
                  ﻿namespace FlexCore.Caching.Common.Handlers;
                  
                  using FlexCore.Caching.Common.Exceptions;
                  using System;
                  
                  /// &lt;summary&gt;
                  /// Classe statica per la gestione delle eccezioni relative alla cache.
                  /// &lt;/summary&gt;
                  public static class CacheExceptionHandler
                  {
                      /// &lt;summary&gt;
                      /// Gestisce le eccezioni durante le operazioni di cache.
                      /// &lt;/summary&gt;
                      public static void HandleException(Exception ex, string operation)
                      {
                          throw ex switch
                          {
                              RedisCacheException =&gt; new CacheException($"Errore Redis durante {operation}", ex),
                              MemoryCacheException =&gt; new CacheException($"Errore di memoria cache durante {operation}", ex),
                              _ =&gt; new CacheException($"Errore durante l'operazione di cache: {operation}", ex)
                          };
                      }
                  }
                </File>
              </Folder>
              <Folder Name="Validators">
                <File Name="CacheKeyValidator.cs" MIME="text/plain" Encoding="utf_8" BOM="True">
                  ﻿namespace FlexCore.Caching.Common.Validators;
                  
                  using System;
                  
                  /// &lt;summary&gt;
                  /// Classe statica per la validazione delle chiavi di cache.
                  /// &lt;/summary&gt;
                  public static class CacheKeyValidator
                  {
                      /// &lt;summary&gt;
                      /// Verifica che la chiave della cache non sia nulla, vuota o composta solo da spazi bianchi.
                      /// &lt;/summary&gt;
                      /// &lt;param name="key"&gt;Chiave da validare.&lt;/param&gt;
                      public static void ValidateKey(string key)
                      {
                          if (string.IsNullOrWhiteSpace(key))
                              throw new ArgumentException("La chiave non può essere nulla o composta solo da spazi vuoti.", nameof(key));
                      }
                  }
                </File>
              </Folder>
            </Folder>
            <Folder Name="FlexCore.Caching.Core">
              <File Name="BaseCacheManager.cs" MIME="text/plain" Encoding="utf_8" BOM="True">
                ﻿namespace FlexCore.Caching.Core;
                
                using FlexCore.Caching.Common.Handlers;
                using FlexCore.Caching.Common.Validators;
                using FlexCore.Caching.Interfaces;
                using System;
                
                /// &lt;summary&gt;
                /// Classe base astratta per la gestione della cache.
                /// &lt;/summary&gt;
                public abstract class BaseCacheManager : ICacheService
                {
                    /// &lt;summary&gt;
                    /// Ottiene un valore dalla cache.
                    /// &lt;/summary&gt;
                    /// &lt;typeparam name="T"&gt;Tipo del valore da ottenere.&lt;/typeparam&gt;
                    /// &lt;param name="key"&gt;Chiave del valore.&lt;/param&gt;
                    /// &lt;returns&gt;Il valore associato alla chiave.&lt;/returns&gt;
                    public abstract T Get&lt;T&gt;(string key);
                
                    /// &lt;summary&gt;
                    /// Imposta un valore nella cache.
                    /// &lt;/summary&gt;
                    /// &lt;typeparam name="T"&gt;Tipo del valore da impostare.&lt;/typeparam&gt;
                    /// &lt;param name="key"&gt;Chiave del valore.&lt;/param&gt;
                    /// &lt;param name="value"&gt;Valore da impostare.&lt;/param&gt;
                    /// &lt;param name="expiration"&gt;Durata della cache.&lt;/param&gt;
                    public abstract void Set&lt;T&gt;(string key, T value, TimeSpan expiration);
                
                    /// &lt;summary&gt;
                    /// Rimuove un valore dalla cache.
                    /// &lt;/summary&gt;
                    /// &lt;param name="key"&gt;Chiave del valore da rimuovere.&lt;/param&gt;
                    public abstract void Remove(string key);
                
                    /// &lt;summary&gt;
                    /// Verifica se una chiave esiste nella cache.
                    /// &lt;/summary&gt;
                    /// &lt;param name="key"&gt;Chiave da verificare.&lt;/param&gt;
                    /// &lt;returns&gt;True se la chiave esiste, altrimenti false.&lt;/returns&gt;
                    public abstract bool Exists(string key);
                
                    /// &lt;summary&gt;
                    /// Valida la chiave della cache.
                    /// &lt;/summary&gt;
                    /// &lt;param name="key"&gt;Chiave da validare.&lt;/param&gt;
                    protected static void ValidateKey(string key) =&gt; CacheKeyValidator.ValidateKey(key);
                
                    /// &lt;summary&gt;
                    /// Gestisce le eccezioni durante le operazioni di cache.
                    /// &lt;/summary&gt;
                    /// &lt;param name="ex"&gt;Eccezione.&lt;/param&gt;
                    /// &lt;param name="operation"&gt;Operazione che ha generato l'eccezione.&lt;/param&gt;
                    protected static void HandleException(Exception ex, string operation) =&gt; CacheExceptionHandler.HandleException(ex, operation);
                }
              </File>
              <File Name="FlexCore.Caching.Core.csproj" MIME="application/xml" Encoding="utf_8" BOM="True">
                ﻿&lt;Project Sdk="Microsoft.NET.Sdk"&gt;
                	&lt;PropertyGroup&gt;
                		&lt;OutputType&gt;Library&lt;/OutputType&gt;
                		&lt;Version&gt;0.1.0&lt;/Version&gt;
                		&lt;TargetFramework&gt;net9.0&lt;/TargetFramework&gt;
                		&lt;RootNamespace&gt;FlexCore.Caching.Core&lt;/RootNamespace&gt;
                		&lt;ImplicitUsings&gt;enable&lt;/ImplicitUsings&gt;
                		&lt;Nullable&gt;enable&lt;/Nullable&gt;
                	&lt;/PropertyGroup&gt;
                	&lt;ItemGroup&gt;
                	  &lt;ProjectReference Include="..\FlexCore.Caching.Common\FlexCore.Caching.Common.csproj" /&gt;
                	  &lt;ProjectReference Include="..\FlexCore.Caching.Interfaces\FlexCore.Caching.Interfaces.csproj" /&gt;
                	&lt;/ItemGroup&gt;
                &lt;/Project&gt;
              </File>
            </Folder>
            <Folder Name="FlexCore.Caching.Factory">
              <File Name="CacheProviderFactory.cs" MIME="text/plain" Encoding="utf_8" BOM="True">
                ﻿namespace FlexCore.Caching.Factory;
                
                using FlexCore.Caching.Interfaces;
                using System;
                using System.Collections.Generic;
                
                /// &lt;summary&gt;
                /// Factory per la creazione e registrazione dinamica dei provider di cache.
                /// &lt;/summary&gt;
                public class CacheProviderFactory : ICacheFactory
                {
                    private readonly Dictionary&lt;string, Func&lt;ICacheProvider&gt;&gt; _providers = new();
                
                    /// &lt;summary&gt;
                    /// Registra un provider di cache con un nome specifico.
                    /// &lt;/summary&gt;
                    /// &lt;param name="name"&gt;Nome del provider (es. "MemoryCache", "Redis").&lt;/param&gt;
                    /// &lt;param name="providerFactory"&gt;Funzione che crea un'istanza del provider.&lt;/param&gt;
                    public void RegisterProvider(string name, Func&lt;ICacheProvider&gt; providerFactory)
                    {
                        if (string.IsNullOrWhiteSpace(name))
                            throw new ArgumentException("Il nome del provider non può essere vuoto.", nameof(name));
                
                        if (providerFactory == null)
                            throw new ArgumentNullException(nameof(providerFactory), "La factory del provider non può essere nulla.");
                
                        _providers[name] = providerFactory;
                    }
                
                    /// &lt;summary&gt;
                    /// Crea un'istanza di un provider di cache in base al nome.
                    /// &lt;/summary&gt;
                    /// &lt;param name="providerName"&gt;Nome del provider da creare.&lt;/param&gt;
                    /// &lt;returns&gt;Un'istanza del provider di cache.&lt;/returns&gt;
                    public ICacheProvider CreateProvider(string providerName)
                    {
                        if (_providers.TryGetValue(providerName, out var providerFactory))
                        {
                            return providerFactory();
                        }
                        throw new NotSupportedException($"Provider '{providerName}' non supportato.");
                    }
                }
              </File>
              <File Name="CacheServiceExtensions.cs" MIME="text/plain" Encoding="utf_8" BOM="True">
                ﻿namespace FlexCore.Caching.Factory;
                
                using Microsoft.Extensions.DependencyInjection;
                using FlexCore.Caching.Interfaces;
                
                /// &lt;summary&gt;
                /// Estensioni per la configurazione del provider di cache.
                /// &lt;/summary&gt;
                public static class CacheServiceExtensions
                {
                    /// &lt;summary&gt;
                    /// Registra un provider di cache in base al nome specificato.
                    /// &lt;/summary&gt;
                    /// &lt;param name="services"&gt;La collection di servizi DI.&lt;/param&gt;
                    /// &lt;param name="providerName"&gt;Il nome del provider di cache.&lt;/param&gt;
                    /// &lt;returns&gt;IServiceCollection con il provider registrato.&lt;/returns&gt;
                    public static IServiceCollection AddCacheProvider(this IServiceCollection services, string providerName)
                    {
                        services.AddSingleton&lt;ICacheFactory&gt;(sp =&gt; new CacheProviderFactory());
                        services.AddSingleton&lt;ICacheProvider&gt;(sp =&gt; sp.GetRequiredService&lt;ICacheFactory&gt;().CreateProvider(providerName));
                        return services;
                    }
                }
              </File>
              <File Name="FlexCore.Caching.Factory.csproj" MIME="application/xml" Encoding="utf_8" BOM="True">
                ﻿&lt;Project Sdk="Microsoft.NET.Sdk"&gt;
                	&lt;PropertyGroup&gt;
                		&lt;OutputType&gt;Library&lt;/OutputType&gt;
                		&lt;Version&gt;0.1.0&lt;/Version&gt;
                		&lt;TargetFramework&gt;net9.0&lt;/TargetFramework&gt;
                		&lt;RootNamespace&gt;FlexCore.Caching.Factory&lt;/RootNamespace&gt;
                		&lt;ImplicitUsings&gt;enable&lt;/ImplicitUsings&gt;
                		&lt;Nullable&gt;enable&lt;/Nullable&gt;
                	&lt;/PropertyGroup&gt;
                	&lt;ItemGroup&gt;
                	  &lt;PackageReference Include="Microsoft.Extensions.DependencyInjection" Version="9.0.3" /&gt;
                	&lt;/ItemGroup&gt;
                	&lt;ItemGroup&gt;
                	  &lt;ProjectReference Include="..\FlexCore.Caching.Interfaces\FlexCore.Caching.Interfaces.csproj" /&gt;
                	&lt;/ItemGroup&gt;
                &lt;/Project&gt;
              </File>
            </Folder>
            <Folder Name="FlexCore.Caching.Interfaces">
              <File Name="FlexCore.Caching.Interfaces.csproj" MIME="application/xml" Encoding="utf_8" BOM="True">
                ﻿&lt;Project Sdk="Microsoft.NET.Sdk"&gt;
                	&lt;PropertyGroup&gt;
                		&lt;OutputType&gt;Library&lt;/OutputType&gt;
                		&lt;Version&gt;0.1.0&lt;/Version&gt;
                		&lt;TargetFramework&gt;net9.0&lt;/TargetFramework&gt;
                		&lt;RootNamespace&gt;FlexCore.Caching.Interfaces&lt;/RootNamespace&gt;
                		&lt;ImplicitUsings&gt;enable&lt;/ImplicitUsings&gt;
                		&lt;Nullable&gt;enable&lt;/Nullable&gt;
                	&lt;/PropertyGroup&gt;
                &lt;/Project&gt;
              </File>
              <File Name="ICacheFactory.cs" MIME="text/plain" Encoding="utf_8" BOM="True">
                ﻿namespace FlexCore.Caching.Interfaces;
                
                /// &lt;summary&gt;
                /// Interfaccia per la factory che crea istanze di provider di cache.
                /// &lt;/summary&gt;
                public interface ICacheFactory
                {
                    /// &lt;summary&gt;
                    /// Crea un'istanza di un provider di cache in base al nome.
                    /// &lt;/summary&gt;
                    /// &lt;param name="providerName"&gt;Nome del provider da creare.&lt;/param&gt;
                    /// &lt;returns&gt;Un'istanza del provider di cache.&lt;/returns&gt;
                    ICacheProvider CreateProvider(string providerName);
                }
              </File>
              <File Name="ICacheProvider.cs" MIME="text/plain" Encoding="utf_8" BOM="True">
                ﻿namespace FlexCore.Caching.Interfaces;
                
                /// &lt;summary&gt;
                /// Interfaccia per i provider di cache.
                /// &lt;/summary&gt;
                public interface ICacheProvider : ICacheService
                {
                }
              </File>
              <File Name="ICacheService.cs" MIME="text/plain" Encoding="utf_8" BOM="True">
                ﻿namespace FlexCore.Caching.Interfaces;
                
                using System;
                
                /// &lt;summary&gt;
                /// Interfaccia per i servizi di cache.
                /// &lt;/summary&gt;
                public interface ICacheService
                {
                    /// &lt;summary&gt;
                    /// Ottiene un valore dalla cache.
                    /// &lt;/summary&gt;
                    /// &lt;typeparam name="T"&gt;Tipo del valore da ottenere.&lt;/typeparam&gt;
                    /// &lt;param name="key"&gt;Chiave del valore.&lt;/param&gt;
                    /// &lt;returns&gt;Il valore associato alla chiave.&lt;/returns&gt;
                    T Get&lt;T&gt;(string key);
                
                    /// &lt;summary&gt;
                    /// Imposta un valore nella cache.
                    /// &lt;/summary&gt;
                    /// &lt;typeparam name="T"&gt;Tipo del valore da impostare.&lt;/typeparam&gt;
                    /// &lt;param name="key"&gt;Chiave del valore.&lt;/param&gt;
                    /// &lt;param name="value"&gt;Valore da impostare.&lt;/param&gt;
                    /// &lt;param name="expiration"&gt;Durata della cache.&lt;/param&gt;
                    void Set&lt;T&gt;(string key, T value, TimeSpan expiration);
                
                    /// &lt;summary&gt;
                    /// Rimuove un valore dalla cache.
                    /// &lt;/summary&gt;
                    /// &lt;param name="key"&gt;Chiave del valore da rimuovere.&lt;/param&gt;
                    void Remove(string key);
                
                    /// &lt;summary&gt;
                    /// Verifica se una chiave esiste nella cache.
                    /// &lt;/summary&gt;
                    /// &lt;param name="key"&gt;Chiave da verificare.&lt;/param&gt;
                    /// &lt;returns&gt;True se la chiave esiste, altrimenti false.&lt;/returns&gt;
                    bool Exists(string key);
                }
              </File>
            </Folder>
            <Folder Name="FlexCore.Caching.Memory">
              <File Name="FlexCore.Caching.Memory.csproj" MIME="application/xml" Encoding="utf_8" BOM="True">
                ﻿&lt;Project Sdk="Microsoft.NET.Sdk"&gt;
                	&lt;PropertyGroup&gt;
                		&lt;OutputType&gt;Library&lt;/OutputType&gt;
                		&lt;Version&gt;0.1.0&lt;/Version&gt;
                		&lt;TargetFramework&gt;net9.0&lt;/TargetFramework&gt;
                		&lt;RootNamespace&gt;FlexCore.Caching.Memory&lt;/RootNamespace&gt;
                		&lt;ImplicitUsings&gt;enable&lt;/ImplicitUsings&gt;
                		&lt;Nullable&gt;enable&lt;/Nullable&gt;
                	&lt;/PropertyGroup&gt;
                	&lt;ItemGroup&gt;
                	  &lt;PackageReference Include="Microsoft.Extensions.Caching.Memory" Version="9.0.3" /&gt;
                	&lt;/ItemGroup&gt;
                	&lt;ItemGroup&gt;
                	  &lt;ProjectReference Include="..\FlexCore.Caching.Core\FlexCore.Caching.Core.csproj" /&gt;
                	  &lt;ProjectReference Include="..\FlexCore.Caching.Interfaces\FlexCore.Caching.Interfaces.csproj" /&gt;
                	&lt;/ItemGroup&gt;
                &lt;/Project&gt;
              </File>
              <File Name="MemoryCacheProvider.cs" MIME="text/plain" Encoding="utf_8" BOM="True">
                ﻿namespace FlexCore.Caching.Memory;
                
                using FlexCore.Caching.Core;
                using FlexCore.Caching.Interfaces;
                using Microsoft.Extensions.Caching.Memory;
                using System;
                
                /// &lt;summary&gt;
                /// Provider di cache in memoria.
                /// &lt;/summary&gt;
                public class MemoryCacheProvider : BaseCacheManager, ICacheProvider
                {
                    private readonly IMemoryCache _cache;
                
                    /// &lt;summary&gt;
                    /// Inizializza una nuova istanza della classe &lt;see cref="MemoryCacheProvider"/&gt;.
                    /// &lt;/summary&gt;
                    /// &lt;param name="cache"&gt;Istanza di &lt;see cref="IMemoryCache"/&gt;.&lt;/param&gt;
                    public MemoryCacheProvider(IMemoryCache cache)
                    {
                        _cache = cache ?? throw new ArgumentNullException(nameof(cache));
                    }
                
                    /// &lt;summary&gt;
                    /// Ottiene un valore dalla cache.
                    /// &lt;/summary&gt;
                    /// &lt;typeparam name="T"&gt;Tipo del valore da ottenere.&lt;/typeparam&gt;
                    /// &lt;param name="key"&gt;Chiave del valore.&lt;/param&gt;
                    /// &lt;returns&gt;Il valore associato alla chiave.&lt;/returns&gt;
                    public override T Get&lt;T&gt;(string key)
                    {
                        ValidateKey(key);
                        return _cache.Get&lt;T&gt;(key) ?? default!;
                    }
                
                    /// &lt;summary&gt;
                    /// Imposta un valore nella cache.
                    /// &lt;/summary&gt;
                    /// &lt;typeparam name="T"&gt;Tipo del valore da impostare.&lt;/typeparam&gt;
                    /// &lt;param name="key"&gt;Chiave del valore.&lt;/param&gt;
                    /// &lt;param name="value"&gt;Valore da impostare.&lt;/param&gt;
                    /// &lt;param name="expiration"&gt;Durata della cache.&lt;/param&gt;
                    public override void Set&lt;T&gt;(string key, T value, TimeSpan expiration)
                    {
                        ValidateKey(key);
                        _cache.Set(key, value, expiration);
                        if (!_cache.TryGetValue(key, out _))
                            throw new Exception($"Set() failed for key: {key}");
                    }
                
                    /// &lt;summary&gt;
                    /// Rimuove un valore dalla cache.
                    /// &lt;/summary&gt;
                    /// &lt;param name="key"&gt;Chiave del valore da rimuovere.&lt;/param&gt;
                    public override void Remove(string key)
                    {
                        ValidateKey(key);
                        _cache.Remove(key);
                    }
                
                    /// &lt;summary&gt;
                    /// Verifica se una chiave esiste nella cache.
                    /// &lt;/summary&gt;
                    /// &lt;param name="key"&gt;Chiave da verificare.&lt;/param&gt;
                    /// &lt;returns&gt;True se la chiave esiste, altrimenti false.&lt;/returns&gt;
                    public override bool Exists(string key)
                    {
                        ValidateKey(key);
                        return _cache.TryGetValue(key, out _);
                    }
                
                    /// &lt;summary&gt;
                    /// Svuota completamente la cache.
                    /// &lt;/summary&gt;
                    public void ClearAll()
                    {
                        if (_cache is MemoryCache memoryCache)
                        {
                            memoryCache.Compact(1.0); // Svuota completamente la cache
                        }
                    }
                }
              </File>
            </Folder>
            <Folder Name="FlexCore.Caching.Redis">
              <File Name="FlexCore.Caching.Redis.csproj" MIME="application/xml" Encoding="utf_8" BOM="True">
                ﻿&lt;Project Sdk="Microsoft.NET.Sdk"&gt;
                	&lt;PropertyGroup&gt;
                		&lt;OutputType&gt;Library&lt;/OutputType&gt;
                		&lt;Version&gt;0.1.0&lt;/Version&gt;
                		&lt;TargetFramework&gt;net9.0&lt;/TargetFramework&gt;
                		&lt;RootNamespace&gt;FlexCore.Caching.Redis&lt;/RootNamespace&gt;
                		&lt;ImplicitUsings&gt;enable&lt;/ImplicitUsings&gt;
                		&lt;Nullable&gt;enable&lt;/Nullable&gt;
                	&lt;/PropertyGroup&gt;
                	&lt;ItemGroup&gt;
                	  &lt;PackageReference Include="StackExchange.Redis" Version="2.8.31" /&gt;
                	&lt;/ItemGroup&gt;
                	&lt;ItemGroup&gt;
                	  &lt;ProjectReference Include="..\FlexCore.Caching.Core\FlexCore.Caching.Core.csproj" /&gt;
                	  &lt;ProjectReference Include="..\FlexCore.Caching.Interfaces\FlexCore.Caching.Interfaces.csproj" /&gt;
                	&lt;/ItemGroup&gt;
                &lt;/Project&gt;
              </File>
              <File Name="RedisCacheProvider.cs" MIME="text/plain" Encoding="utf_8" BOM="True">
                ﻿namespace FlexCore.Caching.Redis;
                
                using FlexCore.Caching.Core;
                using FlexCore.Caching.Interfaces;
                using StackExchange.Redis;
                using System;
                using System.Text.Json;
                
                /// &lt;summary&gt;
                /// Provider di cache Redis.
                /// &lt;/summary&gt;
                public class RedisCacheProvider : BaseCacheManager, ICacheProvider
                {
                    private readonly IDatabase _database;
                
                    /// &lt;summary&gt;
                    /// Inizializza una nuova istanza della classe &lt;see cref="RedisCacheProvider"/&gt;.
                    /// &lt;/summary&gt;
                    /// &lt;param name="connection"&gt;Istanza di &lt;see cref="IConnectionMultiplexer"/&gt;.&lt;/param&gt;
                    public RedisCacheProvider(IConnectionMultiplexer connection)
                    {
                        _database = connection.GetDatabase();
                    }
                
                    /// &lt;summary&gt;
                    /// Ottiene un valore dalla cache.
                    /// &lt;/summary&gt;
                    /// &lt;typeparam name="T"&gt;Tipo del valore da ottenere.&lt;/typeparam&gt;
                    /// &lt;param name="key"&gt;Chiave del valore.&lt;/param&gt;
                    /// &lt;returns&gt;Il valore associato alla chiave.&lt;/returns&gt;
                    public override T Get&lt;T&gt;(string key)
                    {
                        ValidateKey(key);
                        var value = _database.StringGet(key);
                
                        if (value.IsNullOrEmpty)
                            return default!; // Restituisce il valore predefinito di T
                
                        return JsonSerializer.Deserialize&lt;T&gt;(value!) ?? default!;
                    }
                
                    /// &lt;summary&gt;
                    /// Imposta un valore nella cache.
                    /// &lt;/summary&gt;
                    /// &lt;typeparam name="T"&gt;Tipo del valore da impostare.&lt;/typeparam&gt;
                    /// &lt;param name="key"&gt;Chiave del valore.&lt;/param&gt;
                    /// &lt;param name="value"&gt;Valore da impostare.&lt;/param&gt;
                    /// &lt;param name="expiration"&gt;Durata della cache.&lt;/param&gt;
                    public override void Set&lt;T&gt;(string key, T value, TimeSpan expiration)
                    {
                        ValidateKey(key);
                        var json = JsonSerializer.Serialize(value);
                        _database.StringSet(key, json, expiration);
                    }
                
                    /// &lt;summary&gt;
                    /// Rimuove un valore dalla cache.
                    /// &lt;/summary&gt;
                    /// &lt;param name="key"&gt;Chiave del valore da rimuovere.&lt;/param&gt;
                    public override void Remove(string key)
                    {
                        ValidateKey(key);
                        _database.KeyDelete(key);
                    }
                
                    /// &lt;summary&gt;
                    /// Verifica se una chiave esiste nella cache.
                    /// &lt;/summary&gt;
                    /// &lt;param name="key"&gt;Chiave da verificare.&lt;/param&gt;
                    /// &lt;returns&gt;True se la chiave esiste, altrimenti false.&lt;/returns&gt;
                    public override bool Exists(string key)
                    {
                        ValidateKey(key);
                        return _database.KeyExists(key);
                    }
                }
              </File>
            </Folder>
          </Folder>
          <Folder Name="Core">
            <Folder Name="FlexCore.Core.Configuration">
              <Folder Name="Adapter">
                <File Name="ConfigurationAdapter.cs" MIME="text/plain" Encoding="ascii">
                  namespace FlexCore.Core.Configuration.Adapter;
                  
                  using Microsoft.Extensions.Configuration;
                  using FlexCore.Core.Configuration.Models;
                  using System;
                  using FlexCore.Core.Configuration;
                  
                  /// &lt;summary&gt;
                  /// Adattatore di configurazione che fornisce accesso alle configurazioni tramite modelli fortemente tipizzati.
                  /// &lt;/summary&gt;
                  public class ConfigurationAdapter : IAppConfiguration
                  {
                      private readonly IConfiguration _configuration;
                  
                      /// &lt;summary&gt;
                      /// Inizializza una nuova istanza della classe &lt;see cref="ConfigurationAdapter"/&gt;.
                      /// &lt;/summary&gt;
                      /// &lt;param name="configuration"&gt;Istanza di &lt;see cref="IConfiguration"/&gt;.&lt;/param&gt;
                      public ConfigurationAdapter(IConfiguration configuration)
                      {
                          _configuration = configuration ?? throw new ArgumentNullException(nameof(configuration));
                      }
                  
                      /// &lt;summary&gt;
                      /// Ottiene un valore di configurazione in base alla chiave specificata.
                      /// &lt;/summary&gt;
                      /// &lt;param name="key"&gt;Chiave della configurazione.&lt;/param&gt;
                      /// &lt;returns&gt;Il valore della configurazione come stringa, oppure null se non presente.&lt;/returns&gt;
                      public string? GetValue(string key)
                      {
                          return _configuration[key];
                      }
                  
                      /// &lt;summary&gt;
                      /// Ottiene un valore di configurazione fortemente tipizzato.
                      /// &lt;/summary&gt;
                      /// &lt;typeparam name="T"&gt;Tipo del valore da restituire.&lt;/typeparam&gt;
                      /// &lt;param name="key"&gt;Chiave della configurazione.&lt;/param&gt;
                      /// &lt;returns&gt;Il valore convertito al tipo specificato, oppure il default se non presente.&lt;/returns&gt;
                      public T? GetValue&lt;T&gt;(string key)
                      {
                          return _configuration.GetValue&lt;T&gt;(key);
                      }
                  
                      /// &lt;summary&gt;
                      /// Ottiene le impostazioni dell'applicazione.
                      /// &lt;/summary&gt;
                      /// &lt;returns&gt;Le impostazioni dell'applicazione.&lt;/returns&gt;
                      public AppSettings GetAppSettings()
                      {
                          return _configuration.Get&lt;AppSettings&gt;() ?? throw new InvalidOperationException("Impossibile caricare le impostazioni dell'applicazione.");
                      }
                  
                      /// &lt;summary&gt;
                      /// Ottiene le impostazioni delle stringhe di connessione.
                      /// &lt;/summary&gt;
                      /// &lt;returns&gt;Le impostazioni delle stringhe di connessione.&lt;/returns&gt;
                      public ConnectionStringsSettings GetConnectionStrings()
                      {
                          return _configuration.GetSection("ConnectionStrings").Get&lt;ConnectionStringsSettings&gt;()
                              ?? throw new InvalidOperationException("Impossibile caricare le impostazioni delle stringhe di connessione.");
                      }
                  
                      /// &lt;summary&gt;
                      /// Ottiene le impostazioni del database.
                      /// &lt;/summary&gt;
                      /// &lt;returns&gt;Le impostazioni del database.&lt;/returns&gt;
                      public DatabaseSettings GetDatabaseSettings()
                      {
                          return _configuration.GetSection("DatabaseSettings").Get&lt;DatabaseSettings&gt;()
                              ?? throw new InvalidOperationException("Impossibile caricare le impostazioni del database.");
                      }
                  
                      /// &lt;summary&gt;
                      /// Ottiene le impostazioni ORM.
                      /// &lt;/summary&gt;
                      /// &lt;returns&gt;Le impostazioni ORM.&lt;/returns&gt;
                      public ORMSettings GetORMSettings()
                      {
                          return _configuration.GetSection("ORMSettings").Get&lt;ORMSettings&gt;()
                              ?? throw new InvalidOperationException("Impossibile caricare le impostazioni ORM.");
                      }
                  
                      /// &lt;summary&gt;
                      /// Ottiene le impostazioni della cache.
                      /// &lt;/summary&gt;
                      /// &lt;returns&gt;Le impostazioni della cache.&lt;/returns&gt;
                      public CacheSettings GetCacheSettings()
                      {
                          return _configuration.GetSection("CacheSettings").Get&lt;CacheSettings&gt;()
                              ?? throw new InvalidOperationException("Impossibile caricare le impostazioni della cache.");
                      }
                  
                      /// &lt;summary&gt;
                      /// Ottiene le impostazioni di logging.
                      /// &lt;/summary&gt;
                      /// &lt;returns&gt;Le impostazioni di logging.&lt;/returns&gt;
                      public LoggingSettings GetLoggingSettings()
                      {
                          return _configuration.GetSection("Logging").Get&lt;LoggingSettings&gt;()
                              ?? throw new InvalidOperationException("Impossibile caricare le impostazioni di logging.");
                      }
                  }
                </File>
              </Folder>
              <Folder Name="Extensions">
                <File Name="ServiceCollectionExtensions.cs" MIME="text/plain" Encoding="utf_8" BOM="True">
                  ﻿namespace FlexCore.Core.Configuration.Extensions;
                  
                  using Microsoft.Extensions.Configuration;
                  using Microsoft.Extensions.DependencyInjection;
                  using Microsoft.Extensions.Logging;
                  using FlexCore.Core.Configuration.Models;
                  
                  /// &lt;summary&gt;
                  /// Estensioni per la configurazione dei servizi.
                  /// &lt;/summary&gt;
                  public static class ServiceCollectionExtensions
                  {
                      /// &lt;summary&gt;
                      /// Aggiunge le impostazioni dell'applicazione ai servizi DI.
                      /// &lt;/summary&gt;
                      /// &lt;param name="services"&gt;La collection di servizi DI.&lt;/param&gt;
                      /// &lt;param name="configuration"&gt;La configurazione dell'applicazione.&lt;/param&gt;
                      /// &lt;param name="logger"&gt;Il logger.&lt;/param&gt;
                      /// &lt;returns&gt;IServiceCollection con le impostazioni registrate.&lt;/returns&gt;
                      public static IServiceCollection AddAppSettings(this IServiceCollection services, IConfiguration configuration, ILogger logger)
                      {
                          services.Configure&lt;AppSettings&gt;(options =&gt;
                          {
                              configuration.Bind(options);
                              ValidateAppSettings(options, logger);
                          });
                  
                          services.Configure&lt;ConnectionStringsSettings&gt;(options =&gt;
                          {
                              configuration.GetSection("ConnectionStrings").Bind(options);
                              ValidateConnectionStrings(options, logger);
                          });
                  
                          services.Configure&lt;DatabaseSettings&gt;(options =&gt;
                          {
                              configuration.GetSection("DatabaseSettings").Bind(options);
                              ValidateDatabaseSettings(options, logger);
                          });
                  
                          services.Configure&lt;ORMSettings&gt;(options =&gt;
                          {
                              configuration.GetSection("ORMSettings").Bind(options);
                              ValidateORMSettings(options, logger);
                          });
                  
                          services.Configure&lt;CacheSettings&gt;(options =&gt;
                          {
                              configuration.GetSection("CacheSettings").Bind(options);
                              ValidateCacheSettings(options, logger);
                          });
                  
                          services.Configure&lt;LoggingSettings&gt;(options =&gt;
                          {
                              configuration.GetSection("Logging").Bind(options);
                              ValidateLoggingSettings(options, logger);
                          });
                  
                          return services;
                      }
                  
                      private static void ValidateAppSettings(AppSettings settings, ILogger logger)
                      {
                          if (string.IsNullOrEmpty(settings.ConnectionStrings.DefaultDatabase))
                              logger.LogWarning("DefaultDatabase non configurato in AppSettings.");
                      }
                  
                      private static void ValidateConnectionStrings(ConnectionStringsSettings settings, ILogger logger)
                      {
                          if (string.IsNullOrEmpty(settings.DefaultDatabase))
                              logger.LogWarning("DefaultDatabase non configurato in ConnectionStrings.");
                      }
                  
                      private static void ValidateDatabaseSettings(DatabaseSettings settings, ILogger logger)
                      {
                          if (string.IsNullOrEmpty(settings.DefaultProvider))
                              logger.LogWarning("DefaultProvider non configurato in DatabaseSettings.");
                      }
                  
                      private static void ValidateORMSettings(ORMSettings settings, ILogger logger)
                      {
                          if (string.IsNullOrEmpty(settings.DefaultProvider))
                              logger.LogWarning("DefaultProvider non configurato in ORMSettings.");
                      }
                  
                      private static void ValidateCacheSettings(CacheSettings settings, ILogger logger)
                      {
                          if (string.IsNullOrEmpty(settings.DefaultProvider))
                              logger.LogWarning("DefaultProvider non configurato in CacheSettings.");
                      }
                  
                      private static void ValidateLoggingSettings(LoggingSettings settings, ILogger logger)
                      {
                          if (!settings.Enabled)
                              logger.LogWarning("Logging non abilitato in LoggingSettings.");
                      }
                  }
                </File>
              </Folder>
              <File Name="FlexCore.Core.Configuration.csproj" MIME="application/xml" Encoding="utf_8" BOM="True">
                ﻿&lt;Project Sdk="Microsoft.NET.Sdk"&gt;
                  &lt;PropertyGroup&gt;
                	  &lt;OutputType&gt;Library&lt;/OutputType&gt;
                	  &lt;Version&gt;0.1.0&lt;/Version&gt;
                	  &lt;TargetFramework&gt;net9.0&lt;/TargetFramework&gt;
                    &lt;RootNamespace&gt;FlexCore.Core.Configuration&lt;/RootNamespace&gt;
                    &lt;ImplicitUsings&gt;enable&lt;/ImplicitUsings&gt;
                    &lt;Nullable&gt;enable&lt;/Nullable&gt;
                  &lt;/PropertyGroup&gt;
                  &lt;ItemGroup&gt;
                    &lt;PackageReference Include="Microsoft.Extensions.Configuration" Version="9.0.3" /&gt;
                    &lt;PackageReference Include="Microsoft.Extensions.Configuration.Binder" Version="9.0.3" /&gt;
                    &lt;PackageReference Include="Microsoft.Extensions.DependencyInjection" Version="9.0.3" /&gt;
                    &lt;PackageReference Include="Microsoft.Extensions.Logging" Version="9.0.3" /&gt;
                  &lt;/ItemGroup&gt;
                &lt;/Project&gt;
              </File>
              <File Name="IAppConfiguration.cs" MIME="text/plain" Encoding="ascii">
                using FlexCore.Core.Configuration.Models;
                
                namespace FlexCore.Core.Configuration;
                
                /// &lt;summary&gt;
                /// Interfaccia per l'accesso alle configurazioni dell'applicazione.
                /// &lt;/summary&gt;
                public interface IAppConfiguration
                {
                    /// &lt;summary&gt;
                    /// Ottiene un valore di configurazione in base alla chiave specificata.
                    /// &lt;/summary&gt;
                    /// &lt;param name="key"&gt;Chiave della configurazione.&lt;/param&gt;
                    /// &lt;returns&gt;Il valore della configurazione come stringa, oppure null se non presente.&lt;/returns&gt;
                    string? GetValue(string key);
                
                    /// &lt;summary&gt;
                    /// Ottiene un valore di configurazione fortemente tipizzato.
                    /// &lt;/summary&gt;
                    /// &lt;typeparam name="T"&gt;Tipo del valore da restituire.&lt;/typeparam&gt;
                    /// &lt;param name="key"&gt;Chiave della configurazione.&lt;/param&gt;
                    /// &lt;returns&gt;Il valore convertito al tipo specificato, oppure il default se non presente.&lt;/returns&gt;
                    T? GetValue&lt;T&gt;(string key);
                
                    /// &lt;summary&gt;
                    /// Ottiene le impostazioni dell'applicazione.
                    /// &lt;/summary&gt;
                    /// &lt;returns&gt;Le impostazioni dell'applicazione.&lt;/returns&gt;
                    AppSettings GetAppSettings();
                
                    /// &lt;summary&gt;
                    /// Ottiene le impostazioni delle stringhe di connessione.
                    /// &lt;/summary&gt;
                    /// &lt;returns&gt;Le impostazioni delle stringhe di connessione.&lt;/returns&gt;
                    ConnectionStringsSettings GetConnectionStrings();
                
                    /// &lt;summary&gt;
                    /// Ottiene le impostazioni del database.
                    /// &lt;/summary&gt;
                    /// &lt;returns&gt;Le impostazioni del database.&lt;/returns&gt;
                    DatabaseSettings GetDatabaseSettings();
                
                    /// &lt;summary&gt;
                    /// Ottiene le impostazioni ORM.
                    /// &lt;/summary&gt;
                    /// &lt;returns&gt;Le impostazioni ORM.&lt;/returns&gt;
                    ORMSettings GetORMSettings();
                
                    /// &lt;summary&gt;
                    /// Ottiene le impostazioni della cache.
                    /// &lt;/summary&gt;
                    /// &lt;returns&gt;Le impostazioni della cache.&lt;/returns&gt;
                    CacheSettings GetCacheSettings();
                
                    /// &lt;summary&gt;
                    /// Ottiene le impostazioni di logging.
                    /// &lt;/summary&gt;
                    /// &lt;returns&gt;Le impostazioni di logging.&lt;/returns&gt;
                    LoggingSettings GetLoggingSettings();
                }
              </File>
              <Folder Name="Models">
                <File Name="AppSettings.cs" MIME="text/plain" Encoding="utf_8" BOM="True">
                  ﻿namespace FlexCore.Core.Configuration.Models;
                  
                  /// &lt;summary&gt;
                  /// Impostazioni di configurazione dell'applicazione.
                  /// &lt;/summary&gt;
                  public class AppSettings
                  {
                      /// &lt;summary&gt;
                      /// Impostazioni di connessione al database.
                      /// &lt;/summary&gt;
                      public required ConnectionStringsSettings ConnectionStrings { get; set; }
                  
                      /// &lt;summary&gt;
                      /// Impostazioni del database.
                      /// &lt;/summary&gt;
                      public required DatabaseSettings DatabaseSettings { get; set; }
                  
                      /// &lt;summary&gt;
                      /// Impostazioni ORM.
                      /// &lt;/summary&gt;
                      public required ORMSettings ORMSettings { get; set; }
                  
                      /// &lt;summary&gt;
                      /// Impostazioni della cache.
                      /// &lt;/summary&gt;
                      public required CacheSettings CacheSettings { get; set; }
                  
                      /// &lt;summary&gt;
                      /// Impostazioni di logging.
                      /// &lt;/summary&gt;
                      public required LoggingSettings Logging { get; set; }
                  }
                </File>
                <File Name="CacheSettings.cs" MIME="text/plain" Encoding="utf_8" BOM="True">
                  ﻿namespace FlexCore.Core.Configuration.Models;
                  
                  using System;
                  using System.Collections.Generic;
                  
                  /// &lt;summary&gt;
                  /// Impostazioni della cache.
                  /// &lt;/summary&gt;
                  public class CacheSettings
                  {
                      /// &lt;summary&gt;
                      /// Provider predefinito.
                      /// &lt;/summary&gt;
                      public required string DefaultProvider { get; set; }
                  
                      /// &lt;summary&gt;
                      /// Lista dei provider supportati.
                      /// &lt;/summary&gt;
                      public List&lt;string&gt; Providers { get; set; } = new List&lt;string&gt;();
                  
                      /// &lt;summary&gt;
                      /// Impostazioni specifiche per la cache in memoria.
                      /// &lt;/summary&gt;
                      public required MemoryCacheSettings MemoryCache { get; set; }
                  
                      /// &lt;summary&gt;
                      /// Impostazioni specifiche per la cache Redis.
                      /// &lt;/summary&gt;
                      public required RedisSettings Redis { get; set; }
                  }
                  
                  /// &lt;summary&gt;
                  /// Impostazioni specifiche per la cache in memoria.
                  /// &lt;/summary&gt;
                  public class MemoryCacheSettings
                  {
                      /// &lt;summary&gt;
                      /// Limite di dimensione della cache in memoria.
                      /// &lt;/summary&gt;
                      public required int SizeLimit { get; set; }
                  
                      /// &lt;summary&gt;
                      /// Percentuale di compattazione della cache.
                      /// &lt;/summary&gt;
                      public required double CompactionPercentage { get; set; }
                  
                      /// &lt;summary&gt;
                      /// Frequenza di scansione per le scadenze.
                      /// &lt;/summary&gt;
                      public TimeSpan ExpirationScanFrequency { get; set; }
                  }
                  
                  /// &lt;summary&gt;
                  /// Impostazioni specifiche per la cache Redis.
                  /// &lt;/summary&gt;
                  public class RedisSettings
                  {
                      /// &lt;summary&gt;
                      /// Stringa di connessione Redis.
                      /// &lt;/summary&gt;
                      public required string ConnectionString { get; set; }
                  
                      /// &lt;summary&gt;
                      /// Nome dell'istanza Redis.
                      /// &lt;/summary&gt;
                      public required string InstanceName { get; set; }
                  
                      /// &lt;summary&gt;
                      /// Database predefinito.
                      /// &lt;/summary&gt;
                      public required int DefaultDatabase { get; set; }
                  
                      /// &lt;summary&gt;
                      /// Se interrompere la connessione in caso di errore.
                      /// &lt;/summary&gt;
                      public required bool AbortOnConnectFail { get; set; }
                  
                      /// &lt;summary&gt;
                      /// Timeout di connessione in millisecondi.
                      /// &lt;/summary&gt;
                      public required int ConnectTimeout { get; set; }
                  
                      /// &lt;summary&gt;
                      /// Timeout di sincronizzazione in millisecondi.
                      /// &lt;/summary&gt;
                      public required int SyncTimeout { get; set; }
                  }
                </File>
                <File Name="ConnectionStringsSettings.cs" MIME="text/plain" Encoding="utf_8" BOM="True">
                  ﻿namespace FlexCore.Core.Configuration.Models;
                  
                  /// &lt;summary&gt;
                  /// Impostazioni delle stringhe di connessione.
                  /// &lt;/summary&gt;
                  public class ConnectionStringsSettings
                  {
                      /// &lt;summary&gt;
                      /// Stringa di connessione predefinita.
                      /// &lt;/summary&gt;
                      public required string DefaultDatabase { get; set; }
                  
                      /// &lt;summary&gt;
                      /// Stringa di connessione per SQLite.
                      /// &lt;/summary&gt;
                      public required string SQLiteDatabase { get; set; }
                  
                      /// &lt;summary&gt;
                      /// Stringa di connessione per Redis.
                      /// &lt;/summary&gt;
                      public required string Redis { get; set; }
                  }
                </File>
                <File Name="DatabaseSettings.cs" MIME="text/plain" Encoding="utf_8" BOM="True">
                  ﻿namespace FlexCore.Core.Configuration.Models;
                  
                  using System;
                  using System.Collections.Generic;
                  
                  /// &lt;summary&gt;
                  /// Impostazioni del database.
                  /// &lt;/summary&gt;
                  public class DatabaseSettings
                  {
                      /// &lt;summary&gt;
                      /// Provider predefinito.
                      /// &lt;/summary&gt;
                      public required string DefaultProvider { get; set; }
                  
                      /// &lt;summary&gt;
                      /// Lista dei provider supportati.
                      /// &lt;/summary&gt;
                      public List&lt;string&gt; Providers { get; set; } = new List&lt;string&gt;();
                  
                      /// &lt;summary&gt;
                      /// Impostazioni specifiche per SQL Server.
                      /// &lt;/summary&gt;
                      public required SQLServerSettings SQLServer { get; set; }
                  
                      /// &lt;summary&gt;
                      /// Impostazioni specifiche per SQLite.
                      /// &lt;/summary&gt;
                      public required SQLiteSettings SQLite { get; set; }
                  }
                  
                  /// &lt;summary&gt;
                  /// Impostazioni specifiche per SQL Server.
                  /// &lt;/summary&gt;
                  public class SQLServerSettings
                  {
                      /// &lt;summary&gt;
                      /// Abilita i tentativi di riconnessione in caso di errore.
                      /// &lt;/summary&gt;
                      public required bool EnableRetryOnFailure { get; set; }
                  
                      /// &lt;summary&gt;
                      /// Numero massimo di tentativi.
                      /// &lt;/summary&gt;
                      public required int MaxRetryCount { get; set; }
                  
                      /// &lt;summary&gt;
                      /// Tempo massimo di attesa tra i tentativi.
                      /// &lt;/summary&gt;
                      public required TimeSpan MaxRetryDelay { get; set; }
                  }
                  
                  /// &lt;summary&gt;
                  /// Impostazioni specifiche per SQLite.
                  /// &lt;/summary&gt;
                  public class SQLiteSettings
                  {
                      /// &lt;summary&gt;
                      /// Dimensione della cache SQLite.
                      /// &lt;/summary&gt;
                      public required int CacheSize { get; set; }
                  
                      /// &lt;summary&gt;
                      /// Modalità di sincronizzazione (Off, Normal, Full).
                      /// &lt;/summary&gt;
                      public required string Synchronous { get; set; }
                  }
                </File>
                <File Name="LoggingSettings.cs" MIME="text/plain" Encoding="utf_8" BOM="True">
                  ﻿namespace FlexCore.Core.Configuration.Models;
                  
                  using System.Collections.Generic;
                  
                  /// &lt;summary&gt;
                  /// Impostazioni di logging.
                  /// &lt;/summary&gt;
                  public class LoggingSettings
                  {
                      /// &lt;summary&gt;
                      /// Abilita il logging.
                      /// &lt;/summary&gt;
                      public required bool Enabled { get; set; }
                  
                      /// &lt;summary&gt;
                      /// Livello di logging (Trace, Debug, Information, Warning, Error, Critical).
                      /// &lt;/summary&gt;
                      public required string Level { get; set; }
                  
                      /// &lt;summary&gt;
                      /// Lista dei provider di logging supportati.
                      /// &lt;/summary&gt;
                      public List&lt;string&gt; Providers { get; set; } = new List&lt;string&gt;();
                  
                      /// &lt;summary&gt;
                      /// Impostazioni specifiche per il logging su console.
                      /// &lt;/summary&gt;
                      public required ConsoleLoggingSettings Console { get; set; }
                  
                      /// &lt;summary&gt;
                      /// Impostazioni specifiche per il logging con Log4Net.
                      /// &lt;/summary&gt;
                      public required Log4NetSettings Log4Net { get; set; }
                  
                      /// &lt;summary&gt;
                      /// Impostazioni specifiche per il logging con Serilog.
                      /// &lt;/summary&gt;
                      public required SerilogSettings Serilog { get; set; }
                  }
                  
                  /// &lt;summary&gt;
                  /// Impostazioni specifiche per il logging su console.
                  /// &lt;/summary&gt;
                  public class ConsoleLoggingSettings
                  {
                      /// &lt;summary&gt;
                      /// Includi informazioni sugli scope nei log.
                      /// &lt;/summary&gt;
                      public required bool IncludeScopes { get; set; }
                  
                      /// &lt;summary&gt;
                      /// Impostazioni del livello di logging.
                      /// &lt;/summary&gt;
                      public required LogLevelSettings LogLevel { get; set; }
                  }
                  
                  /// &lt;summary&gt;
                  /// Impostazioni del livello di logging.
                  /// &lt;/summary&gt;
                  public class LogLevelSettings
                  {
                      /// &lt;summary&gt;
                      /// Livello di logging predefinito.
                      /// &lt;/summary&gt;
                      public required string Default { get; set; }
                  
                      /// &lt;summary&gt;
                      /// Livello di logging per i messaggi di sistema.
                      /// &lt;/summary&gt;
                      public required string System { get; set; }
                  
                      /// &lt;summary&gt;
                      /// Livello di logging per i messaggi di Microsoft.
                      /// &lt;/summary&gt;
                      public required string Microsoft { get; set; }
                  }
                  
                  /// &lt;summary&gt;
                  /// Impostazioni specifiche per il logging con Log4Net.
                  /// &lt;/summary&gt;
                  public class Log4NetSettings
                  {
                      /// &lt;summary&gt;
                      /// File di configurazione Log4Net.
                      /// &lt;/summary&gt;
                      public required string ConfigFile { get; set; }
                  
                      /// &lt;summary&gt;
                      /// Impostazioni del livello di logging.
                      /// &lt;/summary&gt;
                      public required LogLevelSettings LogLevel { get; set; }
                  }
                  
                  /// &lt;summary&gt;
                  /// Impostazioni specifiche per il logging con Serilog.
                  /// &lt;/summary&gt;
                  public class SerilogSettings
                  {
                      /// &lt;summary&gt;
                      /// Sink di Serilog (Console e File).
                      /// &lt;/summary&gt;
                      public List&lt;string&gt; Using { get; set; } = new List&lt;string&gt;();
                  
                      /// &lt;summary&gt;
                      /// Impostazioni del livello minimo di logging.
                      /// &lt;/summary&gt;
                      public required MinimumLevelSettings MinimumLevel { get; set; }
                  
                      /// &lt;summary&gt;
                      /// Impostazioni per la scrittura dei log.
                      /// &lt;/summary&gt;
                      public List&lt;WriteToSettings&gt; WriteTo { get; set; } = new List&lt;WriteToSettings&gt;();
                  }
                  
                  /// &lt;summary&gt;
                  /// Impostazioni del livello minimo di logging.
                  /// &lt;/summary&gt;
                  public class MinimumLevelSettings
                  {
                      /// &lt;summary&gt;
                      /// Livello di logging predefinito.
                      /// &lt;/summary&gt;
                      public required string Default { get; set; }
                  
                      /// &lt;summary&gt;
                      /// Override del livello di logging per specifici namespace.
                      /// &lt;/summary&gt;
                      public Dictionary&lt;string, string&gt; Override { get; set; } = new Dictionary&lt;string, string&gt;();
                  }
                  
                  /// &lt;summary&gt;
                  /// Impostazioni per la scrittura dei log.
                  /// &lt;/summary&gt;
                  public class WriteToSettings
                  {
                      /// &lt;summary&gt;
                      /// Nome del sink (es. "Console", "File").
                      /// &lt;/summary&gt;
                      public required string Name { get; set; }
                  
                      /// &lt;summary&gt;
                      /// Argomenti per il sink.
                      /// &lt;/summary&gt;
                      public Dictionary&lt;string, object&gt; Args { get; set; } = new Dictionary&lt;string, object&gt;();
                  }
                </File>
                <File Name="ORMSettings.cs" MIME="text/plain" Encoding="utf_8" BOM="True">
                  ﻿namespace FlexCore.Core.Configuration.Models
                  {
                      /// &lt;summary&gt;
                      /// Rappresenta le impostazioni di configurazione per i diversi provider ORM.
                      /// &lt;/summary&gt;
                      public class ORMSettings
                      {
                          /// &lt;summary&gt;
                          /// Ottiene o imposta il provider ORM predefinito (ad esempio, EFCore, Dapper, ADO).
                          /// &lt;/summary&gt;
                          public required string DefaultProvider { get; set; }
                  
                          /// &lt;summary&gt;
                          /// Ottiene o imposta la lista dei provider ORM supportati (ad esempio, EFCore, Dapper, ADO).
                          /// &lt;/summary&gt;
                          public List&lt;string&gt; Providers { get; set; } = new List&lt;string&gt;();
                  
                          /// &lt;summary&gt;
                          /// Ottiene o imposta le impostazioni di configurazione per EF Core.
                          /// &lt;/summary&gt;
                          public required EFCoreSettings EFCore { get; set; }
                  
                          /// &lt;summary&gt;
                          /// Ottiene o imposta le impostazioni di configurazione per Dapper.
                          /// &lt;/summary&gt;
                          public required DapperSettings Dapper { get; set; }
                  
                          /// &lt;summary&gt;
                          /// Ottiene o imposta le impostazioni di configurazione per ADO.NET.
                          /// &lt;/summary&gt;
                          public required ADOSettings ADO { get; set; }
                      }
                  
                      /// &lt;summary&gt;
                      /// Rappresenta le impostazioni di configurazione specifiche per EF Core.
                      /// &lt;/summary&gt;
                      public class EFCoreSettings
                      {
                          /// &lt;summary&gt;
                          /// Ottiene o imposta un valore che indica se il lazy loading delle entità correlate è abilitato in EF Core.
                          /// &lt;/summary&gt;
                          public required bool EnableLazyLoading { get; set; }
                  
                          /// &lt;summary&gt;
                          /// Ottiene o imposta un valore che indica se il logging dei dati sensibili è abilitato in EF Core.
                          /// &lt;/summary&gt;
                          public required bool EnableSensitiveDataLogging { get; set; }
                      }
                  
                      /// &lt;summary&gt;
                      /// Rappresenta le impostazioni di configurazione specifiche per Dapper.
                      /// &lt;/summary&gt;
                      public class DapperSettings
                      {
                          /// &lt;summary&gt;
                          /// Ottiene o imposta il timeout dei comandi (in secondi) per le query Dapper.
                          /// &lt;/summary&gt;
                          public required int CommandTimeout { get; set; }
                      }
                  
                      /// &lt;summary&gt;
                      /// Rappresenta le impostazioni di configurazione specifiche per ADO.NET.
                      /// &lt;/summary&gt;
                      public class ADOSettings
                      {
                          /// &lt;summary&gt;
                          /// Ottiene o imposta il timeout di connessione (in secondi) per le connessioni ADO.NET.
                          /// &lt;/summary&gt;
                          public required int ConnectionTimeout { get; set; }
                      }
                  }
                </File>
              </Folder>
              <Folder Name="Validators">
                <File Name="ConfigurationValidator.cs" MIME="text/plain" Encoding="utf_8" BOM="True">
                  ﻿namespace FlexCore.Core.Configuration.Validators;
                  
                  using System;
                  
                  /// &lt;summary&gt;
                  /// Classe statica per la validazione degli input di configurazione.
                  /// &lt;/summary&gt;
                  public static class ConfigurationValidator
                  {
                      /// &lt;summary&gt;
                      /// Verifica che la chiave di configurazione non sia nulla o vuota.
                      /// &lt;/summary&gt;
                      /// &lt;param name="key"&gt;La chiave da validare.&lt;/param&gt;
                      /// &lt;exception cref="ArgumentNullException"&gt;Se la chiave è null&lt;/exception&gt;
                      /// &lt;exception cref="ArgumentException"&gt;Se la chiave è vuota o spazi bianchi&lt;/exception&gt;
                      public static void ValidateKey(string key)
                      {
                          if (key is null)
                              throw new ArgumentNullException(nameof(key), "La chiave non può essere nulla.");
                  
                          if (string.IsNullOrWhiteSpace(key))
                              throw new ArgumentException("La chiave non può essere vuota o contenere solo spazi.", nameof(key));
                      }
                  }
                </File>
              </Folder>
            </Folder>
            <Folder Name="FlexCore.Core.Utilities">
              <File Name="DependencyValidator.cs" MIME="text/plain" Encoding="utf_8" BOM="True">
                ﻿using System;
                using System.Collections.Generic;
                using System.Linq;
                
                namespace FlexCore.Core.Utilities
                {
                    /// &lt;summary&gt;
                    /// Classe statica che fornisce metodi per la validazione e la risoluzione delle dipendenze tra progetti.
                    /// &lt;/summary&gt;
                    public static class DependencyValidator
                    {
                        /// &lt;summary&gt;
                        /// Valida le dipendenze tra i progetti per rilevare eventuali dipendenze circolari.
                        /// &lt;/summary&gt;
                        /// &lt;param name="projectDependencies"&gt;Un dizionario contenente i progetti come chiavi e le rispettive dipendenze come valori.&lt;/param&gt;
                        /// &lt;exception cref="InvalidOperationException"&gt;Lanciato quando viene rilevata una dipendenza circolare.&lt;/exception&gt;
                
                
                        //public static void ValidateDependencies(Dictionary&lt;string, List&lt;string&gt;&gt; projectDependencies)
                        //{
                        //    foreach (var project in projectDependencies.Keys)
                        //    {
                        //        var dependencies = projectDependencies[project];
                        //        // Controlla se un progetto dipende da se stesso (dipendenza circolare)
                        //        if (dependencies.Contains(project))
                        //        {
                        //            throw new InvalidOperationException($"Dipendenza circolare rilevata nel progetto: {project}");
                        //        }
                        //    }
                        //}
                        public static void ValidateDependencies(Dictionary&lt;string, List&lt;string&gt;&gt; projectDependencies)
                        {
                            var visited = new HashSet&lt;string&gt;();
                            var stack = new HashSet&lt;string&gt;();
                
                            void Visit(string project)
                            {
                                if (stack.Contains(project))
                                    throw new InvalidOperationException($"Dipendenza circolare rilevata: {project}");
                
                                if (!visited.Contains(project))
                                {
                                    visited.Add(project);
                                    stack.Add(project);
                
                                    foreach (var dependency in projectDependencies.GetValueOrDefault(project, new List&lt;string&gt;()))
                                    {
                                        Visit(dependency);
                                    }
                
                                    stack.Remove(project);
                                }
                            }
                
                            foreach (var project in projectDependencies.Keys)
                            {
                                Visit(project);
                            }
                        }
                
                
                        /// &lt;summary&gt;
                        /// Risolve le dipendenze circolari tra i progetti, se presenti.
                        /// &lt;/summary&gt;
                        /// &lt;param name="projectDependencies"&gt;Un dizionario contenente i progetti come chiavi e le rispettive dipendenze come valori.&lt;/param&gt;
                        public static void ResolveCircularDependencies(Dictionary&lt;string, List&lt;string&gt;&gt; projectDependencies)
                        {
                            var resolved = new HashSet&lt;string&gt;(); // Per tenere traccia dei progetti risolti
                            foreach (var project in projectDependencies.Keys)
                            {
                                // Se il progetto non è ancora stato risolto, risolvi le sue dipendenze
                                if (!resolved.Contains(project))
                                {
                                    ResolveDependencies(project, projectDependencies, resolved, new HashSet&lt;string&gt;());
                                }
                            }
                        }
                
                        /// &lt;summary&gt;
                        /// Risolve ricorsivamente le dipendenze di un singolo progetto.
                        /// &lt;/summary&gt;
                        /// &lt;param name="project"&gt;Il progetto per il quale risolvere le dipendenze.&lt;/param&gt;
                        /// &lt;param name="projectDependencies"&gt;Un dizionario contenente i progetti come chiavi e le rispettive dipendenze come valori.&lt;/param&gt;
                        /// &lt;param name="resolved"&gt;Un insieme che tiene traccia dei progetti già risolti.&lt;/param&gt;
                        /// &lt;param name="visiting"&gt;Un insieme che tiene traccia dei progetti attualmente in fase di visita per evitare dipendenze circolari.&lt;/param&gt;
                        /// &lt;exception cref="InvalidOperationException"&gt;Lanciato quando viene rilevata una dipendenza circolare durante la risoluzione delle dipendenze.&lt;/exception&gt;
                        private static void ResolveDependencies(string project, Dictionary&lt;string, List&lt;string&gt;&gt; projectDependencies, HashSet&lt;string&gt; resolved, HashSet&lt;string&gt; visiting)
                        {
                            visiting.Add(project); // Aggiungi il progetto all'elenco dei progetti in visita
                            foreach (var dependency in projectDependencies[project])
                            {
                                // Se una dipendenza non è ancora stata risolta
                                if (!resolved.Contains(dependency))
                                {
                                    // Se la dipendenza è già in visita, significa che c'è una dipendenza circolare
                                    if (visiting.Contains(dependency))
                                    {
                                        throw new InvalidOperationException($"Dipendenza circolare rilevata: {project} -&gt; {dependency}");
                                    }
                                    // Risolvi ricorsivamente la dipendenza
                                    ResolveDependencies(dependency, projectDependencies, resolved, visiting);
                                }
                            }
                            resolved.Add(project); // Aggiungi il progetto ai risolti
                            visiting.Remove(project); // Rimuovi il progetto dall'elenco dei progetti in visita
                        }
                    }
                }
              </File>
              <File Name="ExceptionHandler.cs" MIME="text/plain" Encoding="utf_8" BOM="True">
                ﻿namespace FlexCore.Core.Utilities;
                
                using System;
                
                /// &lt;summary&gt;
                /// Classe statica per la gestione generica delle eccezioni.
                /// &lt;/summary&gt;
                public static class ExceptionHandler
                {
                    /// &lt;summary&gt;
                    /// Gestisce le eccezioni durante le operazioni.
                    /// &lt;/summary&gt;
                    /// &lt;param name="ex"&gt;L'eccezione catturata.&lt;/param&gt;
                    /// &lt;param name="operation"&gt;L'operazione che ha generato l'eccezione.&lt;/param&gt;
                    /// &lt;param name="customExceptionFactory"&gt;Funzione per creare eccezioni personalizzate.&lt;/param&gt;
                    /// &lt;exception cref="Exception"&gt;Se si verifica un errore durante l'operazione.&lt;/exception&gt;
                    public static void HandleException(Exception ex, string operation, Func&lt;Exception, string, Exception&gt; customExceptionFactory)
                    {
                        throw customExceptionFactory(ex, operation);
                    }
                }
              </File>
              <File Name="FlexCore.Core.Utilities.csproj" MIME="application/xml" Encoding="utf_8" BOM="True">
                ﻿&lt;Project Sdk="Microsoft.NET.Sdk"&gt;
                  &lt;PropertyGroup&gt;
                	  &lt;OutputType&gt;Library&lt;/OutputType&gt;
                	  &lt;Version&gt;0.1.0&lt;/Version&gt;
                	  &lt;TargetFramework&gt;net9.0&lt;/TargetFramework&gt;
                    &lt;RootNamespace&gt;FlexCore.Core.Utilities&lt;/RootNamespace&gt;
                    &lt;ImplicitUsings&gt;enable&lt;/ImplicitUsings&gt;
                    &lt;Nullable&gt;enable&lt;/Nullable&gt;
                  &lt;/PropertyGroup&gt;
                &lt;/Project&gt;
              </File>
            </Folder>
          </Folder>
          <Folder Name="Database">
            <Folder Name="FlexCore.Database.Core">
              <File Name="ApplicationDbContext.cs" MIME="text/plain" Encoding="ascii">
                namespace FlexCore.Database.Core;
                
                using FlexCore.Database.Interfaces;
                using Microsoft.EntityFrameworkCore;
                using System;
                using System.Threading.Tasks;
                
                /// &lt;summary&gt;
                /// Contesto database principale con gestione delle transazioni.
                /// &lt;/summary&gt;
                public class ApplicationDbContext : DbContext, IUnitOfWork
                {
                    /// &lt;summary&gt;
                    /// Inizializza una nuova istanza della classe &lt;see cref="ApplicationDbContext"/&gt;.
                    /// &lt;/summary&gt;
                    public ApplicationDbContext(DbContextOptions&lt;ApplicationDbContext&gt; options)
                        : base(options)
                    {
                    }
                
                    /// &lt;summary&gt;
                    /// Avvia una transazione nel database.
                    /// &lt;/summary&gt;
                    public void BeginTransaction() =&gt; Database.BeginTransaction();
                
                    /// &lt;summary&gt;
                    /// Conferma la transazione in corso.
                    /// &lt;/summary&gt;
                    public void CommitTransaction()
                    {
                        if (Database.CurrentTransaction != null)
                        {
                            Database.CurrentTransaction.Commit();
                            Database.CurrentTransaction.Dispose();
                        }
                    }
                
                    /// &lt;summary&gt;
                    /// Annulla la transazione in corso.
                    /// &lt;/summary&gt;
                    public void RollbackTransaction()
                    {
                        if (Database.CurrentTransaction != null)
                        {
                            Database.CurrentTransaction.Rollback();
                            Database.CurrentTransaction.Dispose();
                        }
                    }
                
                    /// &lt;summary&gt;
                    /// Salva le modifiche nel database in modo asincrono.
                    /// &lt;/summary&gt;
                    public async Task&lt;int&gt; SaveChangesAsync()
                        =&gt; await base.SaveChangesAsync().ConfigureAwait(false);
                
                    /// &lt;summary&gt;
                    /// Rilascia le risorse gestite.
                    /// &lt;/summary&gt;
                    public override void Dispose()
                    {
                        base.Dispose(); // Eliminazione gestita da EF Core
                        GC.SuppressFinalize(this);
                    }
                }
              </File>
              <File Name="DbConnectionFactory.cs" MIME="text/plain" Encoding="cp1252">
                namespace FlexCore.Database.Core;
                
                using System.Data;
                using System.Threading.Tasks;
                using FlexCore.Database.Interfaces;
                using Microsoft.Data.SqlClient;
                
                /// &lt;summary&gt;
                /// Classe astratta base per la creazione di connessioni a database.
                /// Fornisce un'implementazione generica per tutti i provider.
                /// &lt;/summary&gt;
                public abstract class DbConnectionFactory : IDbConnectionFactory
                {
                    /// &lt;summary&gt;
                    /// Stringa di connessione al database.
                    /// &lt;/summary&gt;
                    protected readonly string _connectionString;
                
                    /// &lt;summary&gt;
                    /// Inizializza una nuova istanza della classe &lt;see cref="DbConnectionFactory"/&gt;.
                    /// &lt;/summary&gt;
                    /// &lt;param name="connectionString"&gt;Stringa di connessione al database. Non può essere null.&lt;/param&gt;
                    /// &lt;exception cref="ArgumentNullException"&gt;Se &lt;paramref name="connectionString"/&gt; è null.&lt;/exception&gt;
                    protected DbConnectionFactory(string connectionString)
                    {
                        _connectionString = connectionString ?? throw new ArgumentNullException(nameof(connectionString));
                    }
                
                    /// &lt;summary&gt;
                    /// Crea e restituisce una connessione aperta al database.
                    /// &lt;/summary&gt;
                    /// &lt;returns&gt;Istanza di &lt;see cref="IDbConnection"/&gt; aperta.&lt;/returns&gt;
                    public abstract IDbConnection CreateConnection();
                
                    /// &lt;summary&gt;
                    /// Crea e restituisce una connessione aperta al database in modo asincrono (implementazione predefinita).
                    /// &lt;/summary&gt;
                    /// &lt;returns&gt;Task che restituisce la connessione aperta.&lt;/returns&gt;
                    public virtual async Task&lt;IDbConnection&gt; CreateConnectionAsync()
                    {
                        var connection = CreateConnection();
                        await ((SqlConnection)connection).OpenAsync();
                        return connection;
                    }
                }
              </File>
              <File Name="FlexCore.Database.Core.csproj" MIME="application/xml" Encoding="utf_8" BOM="True">
                ﻿&lt;Project Sdk="Microsoft.NET.Sdk"&gt;
                    &lt;PropertyGroup&gt;
                		&lt;OutputType&gt;Library&lt;/OutputType&gt;
                		&lt;Version&gt;0.1.0&lt;/Version&gt;
                		&lt;TargetFramework&gt;net9.0&lt;/TargetFramework&gt;
                        &lt;RootNamespace&gt;FlexCore.Database.Core&lt;/RootNamespace&gt;
                        &lt;ImplicitUsings&gt;enable&lt;/ImplicitUsings&gt;
                        &lt;Nullable&gt;enable&lt;/Nullable&gt;
                    &lt;/PropertyGroup&gt;
                    &lt;ItemGroup&gt;
                      &lt;PackageReference Include="Microsoft.Data.SqlClient" Version="6.0.1" /&gt;
                      &lt;PackageReference Include="Microsoft.EntityFrameworkCore" Version="9.0.3" /&gt;
                    &lt;/ItemGroup&gt;
                &lt;/Project&gt;
              </File>
              <Folder Name="Interfaces">
                <File Name="IDatabaseProviderFactory.cs" MIME="text/plain" Encoding="utf_8" BOM="True">
                  ﻿namespace FlexCore.Database.Interfaces;
                  
                  /// &lt;summary&gt;
                  /// Interfaccia per la factory che crea istanze di provider di database.
                  /// &lt;/summary&gt;
                  public interface IDatabaseProviderFactory
                  {
                      /// &lt;summary&gt;
                      /// Crea un'istanza di un provider di database in base al nome e alla stringa di connessione.
                      /// &lt;/summary&gt;
                      /// &lt;param name="providerName"&gt;Nome del provider.&lt;/param&gt;
                      /// &lt;param name="connectionString"&gt;Stringa di connessione al database.&lt;/param&gt;
                      /// &lt;returns&gt;Un'istanza del provider di database.&lt;/returns&gt;
                      IDbConnectionFactory CreateProvider(string providerName, string connectionString);
                  }
                </File>
                <File Name="IDataContext.cs" MIME="text/plain" Encoding="utf_8" BOM="True">
                  ﻿namespace FlexCore.Database.Interfaces;
                  
                  using System;
                  using System.Threading.Tasks;
                  
                  /// &lt;summary&gt;
                  /// Interfaccia astratta per l'accesso ai dati, indipendente dal provider di database.
                  /// &lt;/summary&gt;
                  public interface IDataContext : IDisposable
                  {
                      /// &lt;summary&gt;
                      /// Avvia una transazione nel database.
                      /// &lt;/summary&gt;
                      void BeginTransaction();
                  
                      /// &lt;summary&gt;
                      /// Conferma la transazione in corso.
                      /// &lt;/summary&gt;
                      void CommitTransaction();
                  
                      /// &lt;summary&gt;
                      /// Annulla la transazione in corso.
                      /// &lt;/summary&gt;
                      void RollbackTransaction();
                  
                      /// &lt;summary&gt;
                      /// Salva le modifiche nel database.
                      /// &lt;/summary&gt;
                      /// &lt;returns&gt;Numero di record modificati.&lt;/returns&gt;
                      int SaveChanges();
                  
                      /// &lt;summary&gt;
                      /// Salva le modifiche nel database in modo asincrono.
                      /// &lt;/summary&gt;
                      /// &lt;returns&gt;Numero di record modificati.&lt;/returns&gt;
                      Task&lt;int&gt; SaveChangesAsync();
                  }
                </File>
                <File Name="IDbConnectionFactory.cs" MIME="text/plain" Encoding="utf_8" BOM="True">
                  ﻿namespace FlexCore.Database.Interfaces;
                  
                  using System.Data;
                  
                  /// &lt;summary&gt;
                  /// Interfaccia per la gestione della connessione al database.
                  /// &lt;/summary&gt;
                  public interface IDbConnectionFactory
                  {
                      /// &lt;summary&gt;
                      /// Crea e restituisce una connessione aperta al database.
                      /// &lt;/summary&gt;
                      /// &lt;returns&gt;Connessione al database.&lt;/returns&gt;
                      IDbConnection CreateConnection();
                  }
                </File>
                <File Name="IQuery.cs" MIME="text/plain" Encoding="ascii">
                  namespace FlexCore.Database.Interfaces;
                  
                  /// &lt;summary&gt;
                  /// Interfaccia generica per le query nel pattern CQRS.
                  /// &lt;/summary&gt;
                  /// &lt;typeparam name="TResult"&gt;Tipo del risultato restituito.&lt;/typeparam&gt;
                  public interface IQuery&lt;TResult&gt;
                  {
                      /// &lt;summary&gt;
                      /// Esegue la query e restituisce il risultato.
                      /// &lt;/summary&gt;
                      /// &lt;returns&gt;Risultato della query.&lt;/returns&gt;
                      TResult Execute();
                  }
                </File>
                <File Name="IRepository.cs" MIME="text/plain" Encoding="utf_8">
                  namespace FlexCore.Database.Interfaces;
                  
                  using System;
                  using System.Collections.Generic;
                  using System.Threading.Tasks;
                  
                  /// &lt;summary&gt;
                  /// Interfaccia generica per il repository pattern.
                  /// &lt;/summary&gt;
                  /// &lt;typeparam name="TEntity"&gt;Tipo dell'entità gestita dal repository.&lt;/typeparam&gt;
                  public interface IRepository&lt;TEntity&gt; where TEntity : class
                  {
                      /// &lt;summary&gt;
                      /// Recupera tutte le entità.
                      /// &lt;/summary&gt;
                      /// &lt;returns&gt;Una collezione di entità.&lt;/returns&gt;
                      Task&lt;IEnumerable&lt;TEntity&gt;&gt; GetAllAsync();
                  
                      /// &lt;summary&gt;
                      /// Recupera un'entità in base all'identificatore.
                      /// &lt;/summary&gt;
                      /// &lt;param name="id"&gt;Identificatore univoco dell'entità.&lt;/param&gt;
                      /// &lt;returns&gt;L'entità corrispondente se trovata, altrimenti null.&lt;/returns&gt;
                      Task&lt;TEntity?&gt; GetByIdAsync(Guid id);
                  
                      /// &lt;summary&gt;
                      /// Aggiunge una nuova entità al repository.
                      /// &lt;/summary&gt;
                      /// &lt;param name="entity"&gt;L'entità da aggiungere.&lt;/param&gt;
                      Task AddAsync(TEntity entity);
                  
                      /// &lt;summary&gt;
                      /// Aggiorna un'entità esistente.
                      /// &lt;/summary&gt;
                      /// &lt;param name="entity"&gt;L'entità con i dati aggiornati.&lt;/param&gt;
                      void Update(TEntity entity);
                  
                      /// &lt;summary&gt;
                      /// Rimuove un'entità dal repository.
                      /// &lt;/summary&gt;
                      /// &lt;param name="entity"&gt;L'entità da eliminare.&lt;/param&gt;
                      void Delete(TEntity entity);
                  }
                </File>
                <File Name="ITransactionManager.cs" MIME="text/plain" Encoding="utf_8" BOM="True">
                  ﻿namespace FlexCore.Database.Interfaces;
                  
                  using System.Threading.Tasks;
                  
                  /// &lt;summary&gt;
                  /// Interfaccia per la gestione delle transazioni.
                  /// &lt;/summary&gt;
                  public interface ITransactionManager
                  {
                      /// &lt;summary&gt;
                      /// Avvia una transazione asincrona.
                      /// &lt;/summary&gt;
                      Task BeginTransactionAsync();
                  
                      /// &lt;summary&gt;
                      /// Conferma la transazione corrente.
                      /// &lt;/summary&gt;
                      Task CommitTransactionAsync();
                  
                      /// &lt;summary&gt;
                      /// Annulla la transazione corrente.
                      /// &lt;/summary&gt;
                      Task RollbackTransactionAsync();
                  
                      /// &lt;summary&gt;
                      /// Avvia una transazione distribuita asincrona.
                      /// &lt;/summary&gt;
                      Task BeginDistributedTransactionAsync();
                  }
                </File>
                <File Name="IUnitOfWork.cs" MIME="text/plain" Encoding="utf_8">
                  namespace FlexCore.Database.Interfaces;
                  
                  /// &lt;summary&gt;
                  /// Interfaccia per la gestione dell'unità di lavoro (Unit of Work).
                  /// Definisce i metodi per salvare le modifiche, gestire transazioni e liberare le risorse.
                  /// &lt;/summary&gt;
                  public interface IUnitOfWork : IDisposable
                  {
                      /// &lt;summary&gt;
                      /// Salva tutte le modifiche apportate al contesto di persistenza in modo sincrono.
                      /// &lt;/summary&gt;
                      /// &lt;returns&gt;Il numero di entità aggiornate nel database.&lt;/returns&gt;
                      int SaveChanges();
                  
                      /// &lt;summary&gt;
                      /// Salva tutte le modifiche apportate al contesto di persistenza in modo asincrono.
                      /// &lt;/summary&gt;
                      /// &lt;returns&gt;Un Task che rappresenta l'operazione asincrona, contenente il numero di entità aggiornate.&lt;/returns&gt;
                      Task&lt;int&gt; SaveChangesAsync();
                  
                      /// &lt;summary&gt;
                      /// Avvia una nuova transazione.
                      /// &lt;/summary&gt;
                      void BeginTransaction();
                  
                      /// &lt;summary&gt;
                      /// Conferma la transazione in corso.
                      /// &lt;/summary&gt;
                      void CommitTransaction();
                  
                      /// &lt;summary&gt;
                      /// Annulla la transazione in corso.
                      /// &lt;/summary&gt;
                      void RollbackTransaction();
                  }
                </File>
              </Folder>
              <File Name="TransactionManager.cs" MIME="text/plain" Encoding="utf_8" BOM="True">
                ﻿namespace FlexCore.Database.Core;
                
                using FlexCore.Database.Interfaces;
                using System.Transactions;
                using System.Threading.Tasks;
                
                /// &lt;summary&gt;
                /// Gestore delle transazioni.
                /// &lt;/summary&gt;
                public class TransactionManager : ITransactionManager
                {
                    /// &lt;summary&gt;
                    /// Avvia una transazione asincrona.
                    /// &lt;/summary&gt;
                    public async Task BeginTransactionAsync()
                    {
                        await Task.CompletedTask; // Implementazione di esempio
                    }
                
                    /// &lt;summary&gt;
                    /// Conferma la transazione corrente.
                    /// &lt;/summary&gt;
                    public async Task CommitTransactionAsync()
                    {
                        await Task.CompletedTask; // Implementazione di esempio
                    }
                
                    /// &lt;summary&gt;
                    /// Annulla la transazione corrente.
                    /// &lt;/summary&gt;
                    public async Task RollbackTransactionAsync()
                    {
                        await Task.CompletedTask; // Implementazione di esempio
                    }
                
                    /// &lt;summary&gt;
                    /// Avvia una transazione distribuita asincrona.
                    /// &lt;/summary&gt;
                    public async Task BeginDistributedTransactionAsync()
                    {
                        using (var scope = new TransactionScope(TransactionScopeAsyncFlowOption.Enabled))
                        {
                            scope.Complete();
                            await Task.CompletedTask;
                        }
                    }
                }
              </File>
              <File Name="UnitOfWorkBase.cs" MIME="text/plain" Encoding="utf_8" BOM="True">
                ﻿namespace FlexCore.Database.Core;
                
                using FlexCore.Database.Interfaces;
                using System;
                
                /// &lt;summary&gt;
                /// Implementazione base del pattern Unit of Work con gestione semplificata delle risorse.
                /// &lt;/summary&gt;
                public abstract class UnitOfWorkBase : IUnitOfWork
                {
                    private readonly IDataContext _dataContext;
                    private bool _disposed;
                
                    /// &lt;summary&gt;
                    /// Inizializza una nuova istanza della classe &lt;see cref="UnitOfWorkBase"/&gt;.
                    /// &lt;/summary&gt;
                    /// &lt;param name="dataContext"&gt;Contesto di dati associato all'unità di lavoro.&lt;/param&gt;
                    protected UnitOfWorkBase(IDataContext dataContext)
                    {
                        _dataContext = dataContext ?? throw new ArgumentNullException(nameof(dataContext));
                    }
                
                    // Delega tutte le operazioni di transazione al contesto sottostante
                    public void BeginTransaction() =&gt; _dataContext.BeginTransaction();
                    public void CommitTransaction() =&gt; _dataContext.CommitTransaction();
                    public void RollbackTransaction() =&gt; _dataContext.RollbackTransaction();
                
                    // Metodi per il salvataggio delle modifiche
                    public int SaveChanges() =&gt; _dataContext.SaveChanges();
                    public async Task&lt;int&gt; SaveChangesAsync() =&gt; await _dataContext.SaveChangesAsync();
                
                    /// &lt;summary&gt;
                    /// Rilascia le risorse gestite.
                    /// &lt;/summary&gt;
                    public void Dispose()
                    {
                        Dispose(true);
                        GC.SuppressFinalize(this);
                    }
                
                    /// &lt;summary&gt;
                    /// Rilascia le risorse gestite e, opzionalmente, quelle non gestite.
                    /// &lt;/summary&gt;
                    /// &lt;param name="disposing"&gt;
                    /// Se true, rilascia sia le risorse gestite che quelle non gestite; 
                    /// se false, rilascia solo le risorse non gestite.
                    /// &lt;/param&gt;
                    protected virtual void Dispose(bool disposing)
                    {
                        if (!_disposed)
                        {
                            if (disposing)
                            {
                                // Elimina esplicitamente il contesto dati (senza cast ridondanti)
                                _dataContext.Dispose();
                            }
                            _disposed = true;
                        }
                    }
                }
              </File>
            </Folder>
            <Folder Name="FlexCore.Database.Factory">
              <File Name="DatabaseProviderFactory.cs" MIME="text/plain" Encoding="utf_8" BOM="True">
                ﻿namespace FlexCore.Database.Factory;
                
                using FlexCore.Database.Interfaces;
                using System;
                using System.Collections.Generic;
                
                /// &lt;summary&gt;
                /// Factory per la creazione dinamica di provider di database basati su nome e stringa di connessione.
                /// &lt;/summary&gt;
                public class DatabaseProviderFactory : IDatabaseProviderFactory
                {
                    private readonly Dictionary&lt;string, Func&lt;string, IDbConnectionFactory&gt;&gt; _providers = new();
                
                    /// &lt;summary&gt;
                    /// Registra un nuovo provider di database.
                    /// &lt;/summary&gt;
                    /// &lt;param name="name"&gt;Nome identificativo del provider (es. "SQLServer", "SQLite").&lt;/param&gt;
                    /// &lt;param name="providerFactory"&gt;Factory che crea un'istanza del provider.&lt;/param&gt;
                    /// &lt;exception cref="ArgumentException"&gt;Se &lt;paramref name="name"/&gt; è vuoto o nullo.&lt;/exception&gt;
                    /// &lt;exception cref="ArgumentNullException"&gt;Se &lt;paramref name="providerFactory"/&gt; è nullo.&lt;/exception&gt;
                    public void RegisterProvider(string name, Func&lt;string, IDbConnectionFactory&gt; providerFactory)
                    {
                        if (string.IsNullOrWhiteSpace(name))
                            throw new ArgumentException("Il nome del provider non può essere vuoto.", nameof(name));
                
                        _providers[name] = providerFactory ?? throw new ArgumentNullException(nameof(providerFactory));
                    }
                
                    /// &lt;summary&gt;
                    /// Crea un'istanza del provider specificato.
                    /// &lt;/summary&gt;
                    /// &lt;param name="providerName"&gt;Nome del provider registrato.&lt;/param&gt;
                    /// &lt;param name="connectionString"&gt;Stringa di connessione da utilizzare.&lt;/param&gt;
                    /// &lt;returns&gt;Istanza del provider di database.&lt;/returns&gt;
                    /// &lt;exception cref="NotSupportedException"&gt;Se il provider non è registrato.&lt;/exception&gt;
                    public IDbConnectionFactory CreateProvider(string providerName, string connectionString)
                    {
                        if (_providers.TryGetValue(providerName, out var factory))
                        {
                            return factory(connectionString);
                        }
                        throw new NotSupportedException($"Provider '{providerName}' non supportato.");
                    }
                }
              </File>
              <File Name="DatabaseServiceExtensions.cs" MIME="text/plain" Encoding="utf_8" BOM="True">
                ﻿namespace FlexCore.Database.Factory.Extensions;
                
                using Microsoft.Extensions.DependencyInjection;
                using FlexCore.Database.Factory;
                using FlexCore.Database.Interfaces;
                
                /// &lt;summary&gt;
                /// Estensioni per la configurazione del provider di database tramite Dependency Injection.
                /// &lt;/summary&gt;
                public static class DatabaseServiceExtensions
                {
                    /// &lt;summary&gt;
                    /// Registra un provider di database nel container DI.
                    /// &lt;/summary&gt;
                    /// &lt;param name="services"&gt;Collezione di servizi.&lt;/param&gt;
                    /// &lt;param name="providerName"&gt;Nome del provider (es. "SQLServer").&lt;/param&gt;
                    /// &lt;param name="connectionString"&gt;Stringa di connessione al database.&lt;/param&gt;
                    /// &lt;returns&gt;La collezione di servizi per il method chaining.&lt;/returns&gt;
                    public static IServiceCollection AddDatabaseProvider(
                        this IServiceCollection services,
                        string providerName,
                        string connectionString)
                    {
                        services.AddSingleton&lt;IDatabaseProviderFactory, DatabaseProviderFactory&gt;();
                        services.AddSingleton&lt;IDbConnectionFactory&gt;(sp =&gt;
                        {
                            var factory = sp.GetRequiredService&lt;IDatabaseProviderFactory&gt;();
                            return factory.CreateProvider(providerName, connectionString);
                        });
                        return services;
                    }
                }
              </File>
              <File Name="FlexCore.Database.Factory.csproj" MIME="application/xml" Encoding="utf_8" BOM="True">
                ﻿&lt;Project Sdk="Microsoft.NET.Sdk"&gt;
                  &lt;PropertyGroup&gt;
                	  &lt;OutputType&gt;Library&lt;/OutputType&gt;
                	  &lt;Version&gt;0.1.0&lt;/Version&gt;
                	  &lt;TargetFramework&gt;net9.0&lt;/TargetFramework&gt;
                	  &lt;RootNamespace&gt;FlexCore.Database.Factory&lt;/RootNamespace&gt;
                  &lt;/PropertyGroup&gt;
                  &lt;ItemGroup&gt;
                    &lt;PackageReference Include="Microsoft.Extensions.DependencyInjection" Version="9.0.3" /&gt;
                  &lt;/ItemGroup&gt;
                  &lt;ItemGroup&gt;
                    &lt;ProjectReference Include="..\FlexCore.Database.Core\FlexCore.Database.Core.csproj" /&gt;
                  &lt;/ItemGroup&gt;
                &lt;/Project&gt;
              </File>
            </Folder>
            <Folder Name="FlexCore.Database.MariaDB">
              <File Name="FlexCore.Database.MariaDB.csproj" MIME="application/xml" Encoding="utf_8" BOM="True">
                ﻿&lt;Project Sdk="Microsoft.NET.Sdk"&gt;
                  &lt;PropertyGroup&gt;
                    &lt;OutputType&gt;Library&lt;/OutputType&gt;
                    &lt;Version&gt;0.1.0&lt;/Version&gt;
                    &lt;TargetFramework&gt;net9.0&lt;/TargetFramework&gt;
                    &lt;RootNamespace&gt;FlexCore.Database.MariaDB&lt;/RootNamespace&gt;
                  &lt;/PropertyGroup&gt;
                  &lt;ItemGroup&gt;
                    &lt;PackageReference Include="MySqlConnector" Version="2.4.0" /&gt;
                  &lt;/ItemGroup&gt;
                  &lt;ItemGroup&gt;
                    &lt;ProjectReference Include="..\FlexCore.Database.Core\FlexCore.Database.Core.csproj" /&gt;
                  &lt;/ItemGroup&gt;
                &lt;/Project&gt;
              </File>
              <File Name="MariaDBProvider.cs" MIME="text/plain" Encoding="utf_8" BOM="True">
                ﻿namespace FlexCore.Database.MariaDB;
                
                using FlexCore.Database.Core;
                using MySqlConnector;
                using System;
                using System.Data;
                using System.Threading.Tasks;
                
                public class MariaDBProvider : DbConnectionFactory
                {
                    public MariaDBProvider(string connectionString) : base(connectionString)
                    {
                        if (string.IsNullOrWhiteSpace(connectionString))
                            throw new ArgumentNullException(nameof(connectionString));
                    }
                
                    public override IDbConnection CreateConnection()
                    {
                        var connection = new MySqlConnection(_connectionString);
                        connection.Open();
                        return connection;
                    }
                
                    public override async Task&lt;IDbConnection&gt; CreateConnectionAsync()
                    {
                        var connection = new MySqlConnection(_connectionString);
                        await connection.OpenAsync();
                        return connection;
                    }
                }
              </File>
            </Folder>
            <Folder Name="FlexCore.Database.SQLite">
              <File Name="FlexCore.Database.SQLite.csproj" MIME="application/xml" Encoding="utf_8" BOM="True">
                ﻿&lt;Project Sdk="Microsoft.NET.Sdk"&gt;
                  &lt;PropertyGroup&gt;
                	  &lt;OutputType&gt;Library&lt;/OutputType&gt;
                	  &lt;Version&gt;0.1.0&lt;/Version&gt;
                	  &lt;TargetFramework&gt;net9.0&lt;/TargetFramework&gt;
                    &lt;RootNamespace&gt;FlexCore.Database.SQLite&lt;/RootNamespace&gt;
                  &lt;/PropertyGroup&gt;
                  &lt;ItemGroup&gt;
                    &lt;PackageReference Include="Microsoft.Data.Sqlite" Version="9.0.3" /&gt;
                  &lt;/ItemGroup&gt;
                  &lt;ItemGroup&gt;
                    &lt;ProjectReference Include="..\FlexCore.Database.Core\FlexCore.Database.Core.csproj" /&gt;
                  &lt;/ItemGroup&gt;
                &lt;/Project&gt;
              </File>
              <File Name="SQLiteProvider.cs" MIME="text/plain" Encoding="utf_8">
                namespace FlexCore.Database.SQLite;
                
                using FlexCore.Database.Core;
                using Microsoft.Data.Sqlite;
                using System;
                using System.Data;
                using System.Threading.Tasks;
                
                /// &lt;summary&gt;
                /// Implementazione del provider per SQLite.
                /// &lt;/summary&gt;
                public class SQLiteProvider : DbConnectionFactory
                {
                    private new readonly string _connectionString;
                
                    /// &lt;summary&gt;
                    /// Inizializza una nuova istanza della classe &lt;see cref="SQLiteProvider"/&gt;.
                    /// &lt;/summary&gt;
                    /// &lt;param name="connectionString"&gt;Stringa di connessione al database.&lt;/param&gt;
                    public SQLiteProvider(string connectionString) : base(connectionString)
                    {
                        if (string.IsNullOrWhiteSpace(connectionString))
                            throw new ArgumentNullException(nameof(connectionString), "La stringa di connessione non può essere vuota.");
                
                        _connectionString = connectionString;
                    }
                
                    /// &lt;summary&gt;
                    /// Crea una connessione al database SQLite.
                    /// &lt;/summary&gt;
                    /// &lt;returns&gt;Connessione al database.&lt;/returns&gt;
                    public override IDbConnection CreateConnection()
                    {
                        if (string.IsNullOrEmpty(_connectionString))
                            throw new InvalidOperationException("La stringa di connessione non è stata configurata.");
                
                        var connection = new SqliteConnection(_connectionString);
                        connection.Open();
                        return connection;
                    }
                
                    /// &lt;summary&gt;
                    /// Crea una connessione al database SQLite in modo asincrono.
                    /// &lt;/summary&gt;
                    /// &lt;returns&gt;Connessione al database.&lt;/returns&gt;
                    public override async Task&lt;IDbConnection&gt; CreateConnectionAsync()
                    {
                        if (string.IsNullOrEmpty(_connectionString))
                            throw new InvalidOperationException("La stringa di connessione non è stata configurata.");
                
                        var connection = new SqliteConnection(_connectionString);
                        await connection.OpenAsync();
                        return connection;
                    }
                }
              </File>
            </Folder>
            <Folder Name="FlexCore.Database.SQLServer">
              <File Name="FlexCore.Database.SQLServer.csproj" MIME="application/xml" Encoding="utf_8" BOM="True">
                ﻿&lt;Project Sdk="Microsoft.NET.Sdk"&gt;
                  &lt;PropertyGroup&gt;
                	  &lt;OutputType&gt;Library&lt;/OutputType&gt;
                	  &lt;Version&gt;0.1.0&lt;/Version&gt;
                	  &lt;TargetFramework&gt;net9.0&lt;/TargetFramework&gt;
                    &lt;RootNamespace&gt;FlexCore.Database.SQLServer&lt;/RootNamespace&gt;
                  &lt;/PropertyGroup&gt;
                  &lt;ItemGroup&gt;
                    &lt;PackageReference Include="Microsoft.Data.SqlClient" Version="6.0.1" /&gt;
                  &lt;/ItemGroup&gt;
                  &lt;ItemGroup&gt;
                    &lt;ProjectReference Include="..\FlexCore.Database.Core\FlexCore.Database.Core.csproj" /&gt;
                  &lt;/ItemGroup&gt;
                &lt;/Project&gt;
              </File>
              <File Name="SQLServerProvider.cs" MIME="text/plain" Encoding="cp1258">
                namespace FlexCore.Database.SQLServer;
                
                using FlexCore.Database.Core;
                using Microsoft.Data.SqlClient;
                using System;
                using System.Data;
                using System.Threading.Tasks;
                
                /// &lt;summary&gt;
                /// Implementazione del provider per Microsoft SQL Server.
                /// &lt;/summary&gt;
                public class SQLServerProvider : DbConnectionFactory
                {
                    /// &lt;summary&gt;
                    /// Inizializza una nuova istanza del provider per SQL Server.
                    /// &lt;/summary&gt;
                    /// &lt;param name="connectionString"&gt;Stringa di connessione al database.&lt;/param&gt;
                    public SQLServerProvider(string connectionString) : base(connectionString)
                    {
                        if (string.IsNullOrWhiteSpace(connectionString))
                            throw new ArgumentNullException(nameof(connectionString), "La stringa di connessione non pụ essere vuota.");
                    }
                
                    /// &lt;summary&gt;
                    /// Crea una connessione aperta a SQL Server.
                    /// &lt;/summary&gt;
                    /// &lt;returns&gt;Connessione aperta al database.&lt;/returns&gt;
                    public override IDbConnection CreateConnection()
                    {
                        var connection = new SqlConnection(_connectionString);
                        connection.Open();
                        return connection;
                    }
                
                    /// &lt;summary&gt;
                    /// Crea una connessione aperta a SQL Server in modo asincrono.
                    /// &lt;/summary&gt;
                    /// &lt;returns&gt;Task che restituisce la connessione aperta.&lt;/returns&gt;
                    public override async Task&lt;IDbConnection&gt; CreateConnectionAsync()
                    {
                        var connection = new SqlConnection(_connectionString);
                        await connection.OpenAsync();
                        return connection;
                    }
                }
              </File>
            </Folder>
          </Folder>
          <Folder Name="Infrastructure">
            <Folder Name="FlexCore.Infrastructure.Commands">
              <File Name="CommandBase.cs" MIME="text/plain" Encoding="utf_8" BOM="True">
                ﻿namespace FlexCore.Infrastructure.Commands;
                
                /// &lt;summary&gt;
                /// Implementazione base di un comando.
                /// &lt;/summary&gt;
                public abstract class CommandBase : ICommand
                {
                    public abstract void Execute();
                }
              </File>
              <File Name="FlexCore.Infrastructure.Commands.csproj" MIME="application/xml" Encoding="utf_8" BOM="True">
                ﻿&lt;Project Sdk="Microsoft.NET.Sdk"&gt;
                  &lt;PropertyGroup&gt;
                	  &lt;OutputType&gt;Library&lt;/OutputType&gt;
                	  &lt;Version&gt;0.1.0&lt;/Version&gt;
                	  &lt;TargetFramework&gt;net9.0&lt;/TargetFramework&gt;
                	  &lt;RootNamespace&gt;FlexCore.Infrastructure.Commands&lt;/RootNamespace&gt;
                    &lt;ImplicitUsings&gt;enable&lt;/ImplicitUsings&gt;
                    &lt;Nullable&gt;enable&lt;/Nullable&gt;
                  &lt;/PropertyGroup&gt;
                &lt;/Project&gt;
              </File>
              <File Name="ICommand.cs" MIME="text/plain" Encoding="utf_8" BOM="True">
                ﻿namespace FlexCore.Infrastructure.Commands;
                
                /// &lt;summary&gt;
                /// Interfaccia generica per un comando.
                /// &lt;/summary&gt;
                public interface ICommand
                {
                    void Execute();
                }
              </File>
            </Folder>
            <Folder Name="FlexCore.Infrastructure.Events">
              <File Name="DomainEvent.cs" MIME="text/plain" Encoding="utf_8" BOM="True">
                ﻿namespace FlexCore.Infrastructure.Events;
                using System;
                
                /// &lt;summary&gt;
                /// Classe astratta che rappresenta un evento di dominio.
                /// &lt;/summary&gt;
                public abstract class DomainEvent : IEvent
                {
                    public DateTime OccurredOn { get; }
                    protected DomainEvent() =&gt; OccurredOn = DateTime.UtcNow;
                }
              </File>
              <File Name="EventBus.cs" MIME="text/plain" Encoding="utf_8" BOM="True">
                ﻿namespace FlexCore.Infrastructure.Events;
                
                using System;
                using System.Collections.Generic;
                using System.Threading.Tasks;
                using Microsoft.Extensions.DependencyInjection;
                
                /// &lt;summary&gt;
                /// Implementazione dell'EventBus per la gestione e distribuzione degli eventi.
                /// &lt;/summary&gt;
                /// &lt;param name="serviceProvider"&gt;Service provider per la risoluzione delle dipendenze.&lt;/param&gt;
                public class EventBus(IServiceProvider serviceProvider)
                {
                    private readonly IServiceProvider _serviceProvider = serviceProvider ?? throw new ArgumentNullException(nameof(serviceProvider));
                    private readonly List&lt;object&gt; _subscribers = [];
                
                    /// &lt;summary&gt;
                    /// Sottoscrive un handler per un evento specifico.
                    /// &lt;/summary&gt;
                    /// &lt;typeparam name="TEvent"&gt;Tipo dell'evento.&lt;/typeparam&gt;
                    /// &lt;param name="handler"&gt;Handler da registrare.&lt;/param&gt;
                    /// &lt;exception cref="ArgumentNullException"&gt;Se l'handler è nullo.&lt;/exception&gt;
                    public void Subscribe&lt;TEvent&gt;(IEventHandler&lt;TEvent&gt; handler) where TEvent : IEvent
                    {
                        if (handler == null) throw new ArgumentNullException(nameof(handler));
                        _subscribers.Add(handler);
                    }
                
                    /// &lt;summary&gt;
                    /// Pubblica un evento e notifica tutti gli handler registrati.
                    /// &lt;/summary&gt;
                    /// &lt;typeparam name="TEvent"&gt;Tipo dell'evento pubblicato.&lt;/typeparam&gt;
                    /// &lt;param name="event"&gt;Istanza dell'evento.&lt;/param&gt;
                    /// &lt;returns&gt;Task completato dopo l'elaborazione dell'evento.&lt;/returns&gt;
                    public async Task PublishAsync&lt;TEvent&gt;(TEvent @event) where TEvent : IEvent
                    {
                        foreach (var subscriber in _subscribers)
                        {
                            if (subscriber is IEventHandler&lt;TEvent&gt; handler)
                            {
                                await handler.HandleAsync(@event);
                            }
                        }
                    }
                }
              </File>
              <File Name="FlexCore.Infrastructure.Events.csproj" MIME="application/xml" Encoding="utf_8" BOM="True">
                ﻿&lt;Project Sdk="Microsoft.NET.Sdk"&gt;
                	&lt;PropertyGroup&gt;
                		&lt;TargetFramework&gt;net9.0&lt;/TargetFramework&gt;
                		&lt;ImplicitUsings&gt;enable&lt;/ImplicitUsings&gt;
                		&lt;Nullable&gt;enable&lt;/Nullable&gt;
                	&lt;/PropertyGroup&gt;
                
                	&lt;ItemGroup&gt;
                		&lt;PackageReference Include="Microsoft.Extensions.DependencyInjection" Version="9.0.3" /&gt;
                		&lt;PackageReference Include="Microsoft.Extensions.DependencyInjection.Abstractions" Version="9.0.3" /&gt;
                	&lt;/ItemGroup&gt;
                &lt;/Project&gt;
              </File>
              <File Name="IEvent.cs" MIME="text/plain" Encoding="utf_8" BOM="True">
                ﻿namespace FlexCore.Infrastructure.Events
                {
                    /// &lt;summary&gt;
                    /// Interfaccia marker per identificare un evento del sistema
                    /// &lt;/summary&gt;
                    public interface IEvent { }
                }   
              </File>
              <File Name="IEventBus.cs" MIME="text/plain" Encoding="utf_8" BOM="True">
                ﻿namespace FlexCore.Infrastructure.Events
                {
                    /// &lt;summary&gt;
                    /// Interfaccia per il bus eventi
                    /// &lt;/summary&gt;
                    public interface IEventBus
                    {
                        /// &lt;summary&gt;
                        /// Pubblica un evento in modo asincrono
                        /// &lt;/summary&gt;
                        /// &lt;typeparam name="TEvent"&gt;Tipo dell'evento&lt;/typeparam&gt;
                        /// &lt;param name="event"&gt;Istanza dell'evento&lt;/param&gt;
                        Task PublishAsync&lt;TEvent&gt;(TEvent @event) where TEvent : IEvent;
                    }
                }
              </File>
              <File Name="IEventHandler.cs" MIME="text/plain" Encoding="utf_8" BOM="True">
                ﻿namespace FlexCore.Infrastructure.Events;
                
                /// &lt;summary&gt;
                /// Interfaccia per la gestione degli eventi di un tipo specifico
                /// &lt;/summary&gt;
                /// &lt;typeparam name="TEvent"&gt;Tipo dell'evento da gestire&lt;/typeparam&gt;
                public interface IEventHandler&lt;in TEvent&gt; where TEvent : IEvent
                {
                    /// &lt;summary&gt;
                    /// Gestisce l'evento in modo asincrono
                    /// &lt;/summary&gt;
                    /// &lt;param name="event"&gt;Istanza dell'evento da gestire&lt;/param&gt;
                    /// &lt;returns&gt;Task che rappresenta l'operazione asincrona&lt;/returns&gt;
                    Task HandleAsync(TEvent @event);
                }
              </File>
            </Folder>
          </Folder>
          <Folder Name="Logging">
            <Folder Name="FlexCore.Logging.Console">
              <File Name="ConsoleLogger.cs" MIME="text/plain" Encoding="utf_8" BOM="True">
                ﻿namespace FlexCore.Logging.Console;
                
                using FleFlexCore.Logging.Core.Base;
                using FlexCore.Logging.Interfaces;
                
                /// &lt;summary&gt;
                /// Provider di logging su console.
                /// &lt;/summary&gt;
                public class ConsoleLogger : BaseLogger, ILoggingProvider
                {
                    /// &lt;summary&gt;
                    /// Registra un messaggio su console.
                    /// &lt;/summary&gt;
                    /// &lt;param name="level"&gt;Livello di log.&lt;/param&gt;
                    /// &lt;param name="message"&gt;Messaggio da registrare.&lt;/param&gt;
                    protected override void Log(string level, string message)
                    {
                        System.Console.WriteLine($"[{level}] {message}");
                    }
                }
              </File>
              <File Name="FlexCore.Logging.Console.csproj" MIME="application/xml" Encoding="utf_8" BOM="True">
                ﻿&lt;Project Sdk="Microsoft.NET.Sdk"&gt;
                  &lt;PropertyGroup&gt;
                	  &lt;OutputType&gt;Library&lt;/OutputType&gt;
                	  &lt;Version&gt;0.1.0&lt;/Version&gt;
                	  &lt;TargetFramework&gt;net9.0&lt;/TargetFramework&gt;
                	  &lt;RootNamespace&gt;FlexCore.Logging.Console&lt;/RootNamespace&gt;
                    &lt;ImplicitUsings&gt;enable&lt;/ImplicitUsings&gt;
                    &lt;Nullable&gt;enable&lt;/Nullable&gt;
                  &lt;/PropertyGroup&gt;
                  &lt;ItemGroup&gt;
                    &lt;ProjectReference Include="..\FlexCore.Logging.Core\FlexCore.Logging.Core.csproj" /&gt;
                  &lt;/ItemGroup&gt;
                &lt;/Project&gt;
              </File>
            </Folder>
            <Folder Name="FlexCore.Logging.Core">
              <Folder Name="Base">
                <File Name="BaseLogger.cs" MIME="text/plain" Encoding="utf_8" BOM="True">
                  ﻿namespace FleFlexCore.Logging.Core.Base;
                  
                  using FlexCore.Logging.Interfaces;
                  
                  /// &lt;summary&gt;
                  /// Classe base astratta per i logger.
                  /// &lt;/summary&gt;
                  public abstract class BaseLogger : ILogger
                  {
                      /// &lt;summary&gt;
                      /// Registra un messaggio di debug.
                      /// &lt;/summary&gt;
                      /// &lt;param name="message"&gt;Messaggio da registrare.&lt;/param&gt;
                      public void Debug(string message) =&gt; Log("DEBUG", message);
                  
                      /// &lt;summary&gt;
                      /// Registra un messaggio informativo.
                      /// &lt;/summary&gt;
                      /// &lt;param name="message"&gt;Messaggio da registrare.&lt;/param&gt;
                      public void Info(string message) =&gt; Log("INFO", message);
                  
                      /// &lt;summary&gt;
                      /// Registra un messaggio di avvertimento.
                      /// &lt;/summary&gt;
                      /// &lt;param name="message"&gt;Messaggio da registrare.&lt;/param&gt;
                      public void Warn(string message) =&gt; Log("WARN", message);
                  
                      /// &lt;summary&gt;
                      /// Registra un messaggio di errore.
                      /// &lt;/summary&gt;
                      /// &lt;param name="message"&gt;Messaggio da registrare.&lt;/param&gt;
                      public void Error(string message) =&gt; Log("ERROR", message);
                  
                      /// &lt;summary&gt;
                      /// Registra un messaggio di errore fatale.
                      /// &lt;/summary&gt;
                      /// &lt;param name="message"&gt;Messaggio da registrare.&lt;/param&gt;
                      public void Fatal(string message) =&gt; Log("FATAL", message);
                  
                      /// &lt;summary&gt;
                      /// Metodo astratto per la registrazione dei messaggi.
                      /// &lt;/summary&gt;
                      /// &lt;param name="level"&gt;Livello di log.&lt;/param&gt;
                      /// &lt;param name="message"&gt;Messaggio da registrare.&lt;/param&gt;
                      protected abstract void Log(string level, string message);
                  }
                </File>
                <File Name="LoggingExceptionHandler.cs" MIME="text/plain" Encoding="utf_8" BOM="True">
                  ﻿using System;
                  using FleFlexCore.Logging.Core.Exceptions;
                  using FlexCore.Core.Utilities;
                  
                  namespace FleFlexCore.Logging.Core.Base;
                  
                  /// &lt;summary&gt;
                  /// Classe statica per la gestione delle eccezioni relative al logging
                  /// &lt;/summary&gt;
                  public static class LoggingExceptionHandler
                  {
                      /// &lt;summary&gt;
                      /// Gestisce le eccezioni durante le operazioni di logging
                      /// &lt;/summary&gt;
                      /// &lt;param name="ex"&gt;Eccezione da gestire&lt;/param&gt;
                      /// &lt;param name="operation"&gt;Nome dell'operazione fallita&lt;/param&gt;
                      /// &lt;exception cref="LoggingException"&gt;Sempre lanciata per incapsulare l'eccezione originale&lt;/exception&gt;
                      public static void HandleException(Exception ex, string operation)
                      {
                          ExceptionHandler.HandleException(
                              ex,
                              operation,
                              (e, op) =&gt; e switch
                              {
                                  Log4NetException =&gt; new LoggingException($"Errore di Log4Net durante {op}", e),
                                  SerilogException =&gt; new LoggingException($"Errore di Serilog durante {op}", e),
                                  _ =&gt; new LoggingException($"Errore durante l'operazione di logging: {op}", e)
                              });
                      }
                  }
                </File>
                <File Name="LoggingProviderBase.cs" MIME="text/plain" Encoding="ascii">
                  namespace FleFlexCore.Logging.Core.Base;
                  
                  using FlexCore.Logging.Interfaces;
                  
                  /// &lt;summary&gt;
                  /// Classe base astratta per i provider di logging.
                  /// &lt;/summary&gt;
                  public abstract class LoggingProviderBase : ILoggingProvider
                  {
                      /// &lt;summary&gt;
                      /// Registra un messaggio di debug.
                      /// &lt;/summary&gt;
                      /// &lt;param name="message"&gt;Messaggio da registrare.&lt;/param&gt;
                      public abstract void Debug(string message);
                  
                      /// &lt;summary&gt;
                      /// Registra un messaggio informativo.
                      /// &lt;/summary&gt;
                      /// &lt;param name="message"&gt;Messaggio da registrare.&lt;/param&gt;
                      public abstract void Info(string message);
                  
                      /// &lt;summary&gt;
                      /// Registra un messaggio di avvertimento.
                      /// &lt;/summary&gt;
                      /// &lt;param name="message"&gt;Messaggio da registrare.&lt;/param&gt;
                      public abstract void Warn(string message);
                  
                      /// &lt;summary&gt;
                      /// Registra un messaggio di errore.
                      /// &lt;/summary&gt;
                      /// &lt;param name="message"&gt;Messaggio da registrare.&lt;/param&gt;
                      public abstract void Error(string message);
                  
                      /// &lt;summary&gt;
                      /// Registra un messaggio di errore fatale.
                      /// &lt;/summary&gt;
                      /// &lt;param name="message"&gt;Messaggio da registrare.&lt;/param&gt;
                      public abstract void Fatal(string message);
                  }
                </File>
              </Folder>
              <Folder Name="Exceptions">
                <File Name="Log4NetException.cs" MIME="text/plain" Encoding="utf_8" BOM="True">
                  ﻿namespace FleFlexCore.Logging.Core.Exceptions;
                  
                  using System;
                  
                  /// &lt;summary&gt;
                  /// Eccezione specifica per errori di Log4Net.
                  /// &lt;/summary&gt;
                  public class Log4NetException : Exception
                  {
                      /// &lt;summary&gt;
                      /// Inizializza una nuova istanza della classe &lt;see cref="Log4NetException"/&gt;.
                      /// &lt;/summary&gt;
                      /// &lt;param name="message"&gt;Messaggio di errore.&lt;/param&gt;
                      public Log4NetException(string message) : base(message) { }
                  
                      /// &lt;summary&gt;
                      /// Inizializza una nuova istanza della classe &lt;see cref="Log4NetException"/&gt;.
                      /// &lt;/summary&gt;
                      /// &lt;param name="message"&gt;Messaggio di errore.&lt;/param&gt;
                      /// &lt;param name="innerException"&gt;Eccezione interna.&lt;/param&gt;
                      public Log4NetException(string message, Exception innerException) : base(message, innerException) { }
                  }
                </File>
                <File Name="LoggingException.cs" MIME="text/plain" Encoding="utf_8" BOM="True">
                  ﻿namespace FleFlexCore.Logging.Core.Exceptions;
                  
                  /// &lt;summary&gt;
                  /// Eccezione personalizzata per gli errori di logging.
                  /// &lt;/summary&gt;
                  public class LoggingException : Exception
                  {
                      /// &lt;summary&gt;
                      /// Inizializza una nuova istanza della classe &lt;see cref="LoggingException"/&gt;.
                      /// &lt;/summary&gt;
                      /// &lt;param name="message"&gt;Messaggio di errore.&lt;/param&gt;
                      public LoggingException(string message) : base(message) { }
                  
                      /// &lt;summary&gt;
                      /// Inizializza una nuova istanza della classe &lt;see cref="LoggingException"/&gt;.
                      /// &lt;/summary&gt;
                      /// &lt;param name="message"&gt;Messaggio di errore.&lt;/param&gt;
                      /// &lt;param name="innerException"&gt;Eccezione interna.&lt;/param&gt;
                      public LoggingException(string message, Exception innerException) : base(message, innerException) { }
                  }
                </File>
                <File Name="SerilogException.cs" MIME="text/plain" Encoding="utf_8" BOM="True">
                  ﻿namespace FleFlexCore.Logging.Core.Exceptions;
                  
                  using System;
                  
                  /// &lt;summary&gt;
                  /// Eccezione specifica per errori di Serilog.
                  /// &lt;/summary&gt;
                  public class SerilogException : Exception
                  {
                      /// &lt;summary&gt;
                      /// Inizializza una nuova istanza della classe &lt;see cref="SerilogException"/&gt;.
                      /// &lt;/summary&gt;
                      /// &lt;param name="message"&gt;Messaggio di errore.&lt;/param&gt;
                      public SerilogException(string message) : base(message) { }
                  
                      /// &lt;summary&gt;
                      /// Inizializza una nuova istanza della classe &lt;see cref="SerilogException"/&gt;.
                      /// &lt;/summary&gt;
                      /// &lt;param name="message"&gt;Messaggio di errore.&lt;/param&gt;
                      /// &lt;param name="innerException"&gt;Eccezione interna.&lt;/param&gt;
                      public SerilogException(string message, Exception innerException) : base(message, innerException) { }
                  }
                </File>
              </Folder>
              <File Name="FlexCore.Logging.Core.csproj" MIME="application/xml" Encoding="utf_8">
                &lt;?xml version="1.0" encoding="utf-8"?&gt;
                &lt;Project Sdk="Microsoft.NET.Sdk"&gt;
                  &lt;PropertyGroup&gt;
                	  &lt;OutputType&gt;Library&lt;/OutputType&gt;
                	  &lt;Version&gt;0.1.0&lt;/Version&gt;
                	  &lt;TargetFramework&gt;net9.0&lt;/TargetFramework&gt;
                	  &lt;RootNamespace&gt;FleFlexCore.Logging.Core&lt;/RootNamespace&gt;
                    &lt;ImplicitUsings&gt;enable&lt;/ImplicitUsings&gt;
                    &lt;Nullable&gt;enable&lt;/Nullable&gt;
                  &lt;/PropertyGroup&gt;
                  &lt;ItemGroup&gt;
                    &lt;ProjectReference Include="../../Core/FlexCore.Core.Utilities/FlexCore.Core.Utilities.csproj" /&gt;
                  &lt;/ItemGroup&gt;
                &lt;/Project&gt;
              </File>
              <Folder Name="Interfaces">
                <File Name="ILogger.cs" MIME="text/plain" Encoding="utf_8" BOM="True">
                  ﻿namespace FlexCore.Logging.Interfaces;
                  
                  /// &lt;summary&gt;
                  /// Interfaccia per il sistema di logging.
                  /// &lt;/summary&gt;
                  public interface ILogger
                  {
                      /// &lt;summary&gt;
                      /// Registra un messaggio di debug.
                      /// &lt;/summary&gt;
                      /// &lt;param name="message"&gt;Messaggio da registrare.&lt;/param&gt;
                      void Debug(string message);
                  
                      /// &lt;summary&gt;
                      /// Registra un messaggio informativo.
                      /// &lt;/summary&gt;
                      /// &lt;param name="message"&gt;Messaggio da registrare.&lt;/param&gt;
                      void Info(string message);
                  
                      /// &lt;summary&gt;
                      /// Registra un messaggio di avvertimento.
                      /// &lt;/summary&gt;
                      /// &lt;param name="message"&gt;Messaggio da registrare.&lt;/param&gt;
                      void Warn(string message);
                  
                      /// &lt;summary&gt;
                      /// Registra un messaggio di errore.
                      /// &lt;/summary&gt;
                      /// &lt;param name="message"&gt;Messaggio da registrare.&lt;/param&gt;
                      void Error(string message);
                  
                      /// &lt;summary&gt;
                      /// Registra un messaggio di errore fatale.
                      /// &lt;/summary&gt;
                      /// &lt;param name="message"&gt;Messaggio da registrare.&lt;/param&gt;
                      void Fatal(string message);
                  }
                </File>
                <File Name="ILoggingFactory.cs" MIME="text/plain" Encoding="utf_8" BOM="True">
                  ﻿namespace FlexCore.Logging.Interfaces;
                  
                  /// &lt;summary&gt;
                  /// Interfaccia per la factory che crea i provider di logging.
                  /// &lt;/summary&gt;
                  public interface ILoggingFactory
                  {
                      /// &lt;summary&gt;
                      /// Crea un'istanza di un provider di logging in base al nome.
                      /// &lt;/summary&gt;
                      /// &lt;param name="providerName"&gt;Nome del provider da creare.&lt;/param&gt;
                      /// &lt;returns&gt;Un'istanza del provider di logging.&lt;/returns&gt;
                      ILoggingProvider CreateProvider(string providerName);
                  }
                </File>
                <File Name="ILoggingProvider.cs" MIME="text/plain" Encoding="ascii">
                  namespace FlexCore.Logging.Interfaces;
                  
                  /// &lt;summary&gt;
                  /// Interfaccia per i servizi di logging.
                  /// &lt;/summary&gt;
                  public interface ILoggingProvider : ILogger
                  {
                  }
                </File>
              </Folder>
            </Folder>
            <Folder Name="FlexCore.Logging.Factory">
              <File Name="FlexCore.Logging.Factory.csproj" MIME="application/xml" Encoding="utf_8" BOM="True">
                ﻿&lt;Project Sdk="Microsoft.NET.Sdk"&gt;
                  &lt;PropertyGroup&gt;
                	  &lt;OutputType&gt;Library&lt;/OutputType&gt;
                	  &lt;Version&gt;0.1.0&lt;/Version&gt;
                	  &lt;TargetFramework&gt;net9.0&lt;/TargetFramework&gt;
                    &lt;ImplicitUsings&gt;enable&lt;/ImplicitUsings&gt;
                    &lt;Nullable&gt;enable&lt;/Nullable&gt;
                	  &lt;RootNamespace&gt;FlexCore.Logging.Factory&lt;/RootNamespace&gt;
                  &lt;/PropertyGroup&gt;
                  &lt;ItemGroup&gt;
                    &lt;PackageReference Include="Microsoft.Extensions.DependencyInjection" Version="9.0.3" /&gt;
                  &lt;/ItemGroup&gt;
                  &lt;ItemGroup&gt;
                    &lt;ProjectReference Include="..\FlexCore.Logging.Core\FlexCore.Logging.Core.csproj" /&gt;
                  &lt;/ItemGroup&gt;
                &lt;/Project&gt;
              </File>
              <File Name="LoggingProviderFactory.cs" MIME="text/plain" Encoding="utf_8" BOM="True">
                ﻿namespace FlexCore.Logging.Factory;
                
                using FlexCore.Logging.Interfaces;
                using System;
                using System.Collections.Generic;
                
                /// &lt;summary&gt;
                /// Factory per la creazione e registrazione dinamica dei provider di logging.
                /// &lt;/summary&gt;
                public class LoggingProviderFactory : ILoggingFactory
                {
                    private readonly Dictionary&lt;string, Func&lt;ILoggingProvider&gt;&gt; _providers = new();
                
                    /// &lt;summary&gt;
                    /// Registra un provider di logging con un nome specifico.
                    /// &lt;/summary&gt;
                    /// &lt;param name="name"&gt;Nome del provider (es. "Console", "Log4Net", "Serilog").&lt;/param&gt;
                    /// &lt;param name="providerFactory"&gt;Funzione che crea un'istanza del provider.&lt;/param&gt;
                    public void RegisterProvider(string name, Func&lt;ILoggingProvider&gt; providerFactory)
                    {
                        if (string.IsNullOrWhiteSpace(name))
                            throw new ArgumentException("Il nome del provider non può essere vuoto.", nameof(name));
                
                        if (providerFactory == null)
                            throw new ArgumentNullException(nameof(providerFactory), "La factory del provider non può essere nulla.");
                
                        _providers[name] = providerFactory;
                    }
                
                    /// &lt;summary&gt;
                    /// Crea un'istanza di un provider di logging in base al nome.
                    /// &lt;/summary&gt;
                    /// &lt;param name="providerName"&gt;Nome del provider da creare.&lt;/param&gt;
                    /// &lt;returns&gt;Un'istanza del provider di logging.&lt;/returns&gt;
                    public ILoggingProvider CreateProvider(string providerName)
                    {
                        if (_providers.TryGetValue(providerName, out var providerFactory))
                        {
                            return providerFactory();
                        }
                        throw new NotSupportedException($"Provider '{providerName}' non supportato.");
                    }
                }
              </File>
              <File Name="LoggingServiceExtensions.cs" MIME="text/plain" Encoding="utf_8" BOM="True">
                ﻿namespace FlexCore.Logging.Factory;
                
                using Microsoft.Extensions.DependencyInjection;
                using FlexCore.Logging.Interfaces;
                
                /// &lt;summary&gt;
                /// Estensioni per la configurazione del provider di logging.
                /// &lt;/summary&gt;
                public static class LoggingServiceExtensions
                {
                    /// &lt;summary&gt;
                    /// Registra un provider di logging in base al nome specificato.
                    /// &lt;/summary&gt;
                    /// &lt;param name="services"&gt;La collection di servizi DI.&lt;/param&gt;
                    /// &lt;param name="providerName"&gt;Il nome del provider di logging.&lt;/param&gt;
                    /// &lt;returns&gt;IServiceCollection con il provider registrato.&lt;/returns&gt;
                    public static IServiceCollection AddLoggingProvider(this IServiceCollection services, string providerName)
                    {
                        services.AddSingleton&lt;ILoggingFactory&gt;(sp =&gt; new LoggingProviderFactory());
                        services.AddSingleton&lt;ILoggingProvider&gt;(sp =&gt; sp.GetRequiredService&lt;ILoggingFactory&gt;().CreateProvider(providerName));
                        return services;
                    }
                }
              </File>
            </Folder>
            <Folder Name="FlexCore.Logging.Log4Net">
              <File Name="FlexCore.Logging.Log4Net.csproj" MIME="application/xml" Encoding="utf_8" BOM="True">
                ﻿&lt;Project Sdk="Microsoft.NET.Sdk"&gt;
                	&lt;PropertyGroup&gt;
                		&lt;OutputType&gt;Library&lt;/OutputType&gt;
                		&lt;Version&gt;0.1.0&lt;/Version&gt;
                		&lt;TargetFramework&gt;net9.0&lt;/TargetFramework&gt;
                		&lt;RootNamespace&gt;FlexCore.Logging.Log4Net&lt;/RootNamespace&gt;
                		&lt;ImplicitUsings&gt;enable&lt;/ImplicitUsings&gt;
                		&lt;Nullable&gt;enable&lt;/Nullable&gt;
                	&lt;/PropertyGroup&gt;
                	&lt;ItemGroup&gt;
                	  &lt;PackageReference Include="log4net" Version="3.0.4" /&gt;
                	&lt;/ItemGroup&gt;
                	&lt;ItemGroup&gt;
                	  &lt;ProjectReference Include="..\FlexCore.Logging.Core\FlexCore.Logging.Core.csproj" /&gt;
                	&lt;/ItemGroup&gt;
                &lt;/Project&gt;
              </File>
              <File Name="Log4NetLogger.cs" MIME="text/plain" Encoding="utf_8" BOM="True">
                ﻿namespace FlexCore.Logging.Log4Net;
                
                using FleFlexCore.Logging.Core.Base;
                using FlexCore.Logging.Interfaces;
                using log4net;
                
                /// &lt;summary&gt;
                /// Provider di logging con Log4Net.
                /// &lt;/summary&gt;
                public class Log4NetLogger : BaseLogger, ILoggingProvider
                {
                    private readonly ILog _logger;
                
                    /// &lt;summary&gt;
                    /// Inizializza una nuova istanza della classe &lt;see cref="Log4NetLogger"/&gt;.
                    /// &lt;/summary&gt;
                    public Log4NetLogger()
                    {
                        _logger = LogManager.GetLogger(typeof(Log4NetLogger));
                    }
                
                    /// &lt;summary&gt;
                    /// Registra un messaggio utilizzando Log4Net.
                    /// &lt;/summary&gt;
                    /// &lt;param name="level"&gt;Livello di log.&lt;/param&gt;
                    /// &lt;param name="message"&gt;Messaggio da registrare.&lt;/param&gt;
                    protected override void Log(string level, string message)
                    {
                        switch (level)
                        {
                            case "DEBUG":
                                _logger.Debug(message);
                                break;
                            case "INFO":
                                _logger.Info(message);
                                break;
                            case "WARN":
                                _logger.Warn(message);
                                break;
                            case "ERROR":
                                _logger.Error(message);
                                break;
                            case "FATAL":
                                _logger.Fatal(message);
                                break;
                        }
                    }
                }
              </File>
            </Folder>
            <Folder Name="FlexCore.Logging.Serilog">
              <File Name="FlexCore.Logging.Serilog.csproj" MIME="application/xml" Encoding="utf_8" BOM="True">
                ﻿&lt;Project Sdk="Microsoft.NET.Sdk"&gt;
                	&lt;PropertyGroup&gt;
                		&lt;OutputType&gt;Library&lt;/OutputType&gt;
                		&lt;Version&gt;0.1.0&lt;/Version&gt;
                		&lt;TargetFramework&gt;net9.0&lt;/TargetFramework&gt;
                		&lt;RootNamespace&gt;FlexCore.Logging.Serilog&lt;/RootNamespace&gt;
                		&lt;ImplicitUsings&gt;enable&lt;/ImplicitUsings&gt;
                		&lt;Nullable&gt;enable&lt;/Nullable&gt;
                	&lt;/PropertyGroup&gt;
                	&lt;ItemGroup&gt;
                	  &lt;PackageReference Include="Serilog" Version="4.2.0" /&gt;
                	&lt;/ItemGroup&gt;
                	&lt;ItemGroup&gt;
                	  &lt;ProjectReference Include="..\FlexCore.Logging.Core\FlexCore.Logging.Core.csproj" /&gt;
                	&lt;/ItemGroup&gt;
                &lt;/Project&gt;
              </File>
              <File Name="SerilogLogger.cs" MIME="text/plain" Encoding="utf_8" BOM="True">
                ﻿namespace FlexCore.Logging.Serilog;
                
                using FleFlexCore.Logging.Core.Base;
                using FlexCore.Logging.Interfaces;
                using global::Serilog;
                
                /// &lt;summary&gt;
                /// Provider di logging con Serilog.
                /// &lt;/summary&gt;
                public class SerilogLogger : BaseLogger, ILoggingProvider
                {
                    private readonly global::Serilog.ILogger _logger;
                
                    /// &lt;summary&gt;
                    /// Inizializza una nuova istanza della classe &lt;see cref="SerilogLogger"/&gt;.
                    /// &lt;/summary&gt;
                    public SerilogLogger()
                    {
                        _logger = global::Serilog.Log.ForContext&lt;SerilogLogger&gt;();
                    }
                
                    /// &lt;summary&gt;
                    /// Registra un messaggio utilizzando Serilog.
                    /// &lt;/summary&gt;
                    /// &lt;param name="level"&gt;Livello di log.&lt;/param&gt;
                    /// &lt;param name="message"&gt;Messaggio da registrare.&lt;/param&gt;
                    protected override void Log(string level, string message)
                    {
                        switch (level)
                        {
                            case "DEBUG":
                                _logger.Debug(message);
                                break;
                            case "INFO":
                                _logger.Information(message);
                                break;
                            case "WARN":
                                _logger.Warning(message);
                                break;
                            case "ERROR":
                                _logger.Error(message);
                                break;
                            case "FATAL":
                                _logger.Fatal(message);
                                break;
                        }
                    }
                }
              </File>
            </Folder>
          </Folder>
          <Folder Name="ORM">
            <Folder Name="FlexCore.ORM.Core">
              <File Name="FlexCore.ORM.Core.csproj" MIME="application/xml" Encoding="utf_8" BOM="True">
                ﻿&lt;Project Sdk="Microsoft.NET.Sdk"&gt;
                	&lt;PropertyGroup&gt;
                		&lt;OutputType&gt;Library&lt;/OutputType&gt;
                		&lt;Version&gt;0.1.0&lt;/Version&gt;
                		&lt;TargetFramework&gt;net9.0&lt;/TargetFramework&gt;
                		&lt;RootNamespace&gt;FlexCore.ORM.Core&lt;/RootNamespace&gt;
                		&lt;ImplicitUsings&gt;enable&lt;/ImplicitUsings&gt;
                		&lt;Nullable&gt;enable&lt;/Nullable&gt;
                	&lt;/PropertyGroup&gt;
                &lt;/Project&gt;
              </File>
              <Folder Name="Implementations">
                <File Name="OrmProviderBase.cs" MIME="text/plain" Encoding="utf_8">
                  namespace FlexCore.ORM.Core.Implementations;
                  
                  using FlexCore.ORM.Core.Interfaces;
                  using System;
                  using System.Collections.Generic;
                  using System.Threading.Tasks;
                  
                  /// &lt;summary&gt;
                  /// Classe base astratta per i provider ORM.
                  /// &lt;/summary&gt;
                  public abstract class OrmProviderBase : IOrmProvider
                  {
                      // Flag per indicare se le risorse sono gi� state rilasciate
                      private bool _disposed = false;
                  
                      /// &lt;summary&gt;
                      /// Inizializza il provider ORM.
                      /// &lt;/summary&gt;
                      public abstract void Initialize();
                  
                      /// &lt;summary&gt;
                      /// Esegue una query SQL sul database.
                      /// &lt;/summary&gt;
                      /// &lt;param name="query"&gt;La query SQL da eseguire.&lt;/param&gt;
                      public abstract void ExecuteQuery(string query);
                  
                      /// &lt;summary&gt;
                      /// Recupera un'entit� dal database tramite il suo ID.
                      /// &lt;/summary&gt;
                      /// &lt;typeparam name="T"&gt;Il tipo dell'entit�.&lt;/typeparam&gt;
                      /// &lt;param name="id"&gt;L'ID dell'entit� da recuperare.&lt;/param&gt;
                      /// &lt;returns&gt;L'entit� trovata o null se non esiste.&lt;/returns&gt;
                      public abstract Task&lt;T?&gt; GetByIdAsync&lt;T&gt;(Guid id) where T : class;
                  
                      /// &lt;summary&gt;
                      /// Recupera tutte le entit� di un determinato tipo dal database.
                      /// &lt;/summary&gt;
                      /// &lt;typeparam name="T"&gt;Il tipo dell'entit�.&lt;/typeparam&gt;
                      /// &lt;returns&gt;Una collezione di entit�.&lt;/returns&gt;
                      public abstract Task&lt;IEnumerable&lt;T&gt;&gt; GetAllAsync&lt;T&gt;() where T : class;
                  
                      /// &lt;summary&gt;
                      /// Aggiunge una nuova entit� al database.
                      /// &lt;/summary&gt;
                      /// &lt;typeparam name="T"&gt;Il tipo dell'entit�.&lt;/typeparam&gt;
                      /// &lt;param name="entity"&gt;L'entit� da aggiungere.&lt;/param&gt;
                      public abstract Task AddAsync&lt;T&gt;(T entity) where T : class;
                  
                      /// &lt;summary&gt;
                      /// Aggiunge una collezione di entit� al database.
                      /// &lt;/summary&gt;
                      /// &lt;typeparam name="T"&gt;Il tipo dell'entit�.&lt;/typeparam&gt;
                      /// &lt;param name="entities"&gt;Le entit� da aggiungere.&lt;/param&gt;
                      public abstract Task AddRangeAsync&lt;T&gt;(IEnumerable&lt;T&gt; entities) where T : class;
                  
                      /// &lt;summary&gt;
                      /// Aggiorna un'entit� esistente nel database.
                      /// &lt;/summary&gt;
                      /// &lt;typeparam name="T"&gt;Il tipo dell'entit�.&lt;/typeparam&gt;
                      /// &lt;param name="entity"&gt;L'entit� da aggiornare.&lt;/param&gt;
                      public abstract Task UpdateAsync&lt;T&gt;(T entity) where T : class;
                  
                      /// &lt;summary&gt;
                      /// Aggiorna una collezione di entit� nel database.
                      /// &lt;/summary&gt;
                      /// &lt;typeparam name="T"&gt;Il tipo dell'entit�.&lt;/typeparam&gt;
                      /// &lt;param name="entities"&gt;Le entit� da aggiornare.&lt;/param&gt;
                      public abstract Task UpdateRangeAsync&lt;T&gt;(IEnumerable&lt;T&gt; entities) where T : class;
                  
                      /// &lt;summary&gt;
                      /// Elimina un'entit� dal database.
                      /// &lt;/summary&gt;
                      /// &lt;typeparam name="T"&gt;Il tipo dell'entit�.&lt;/typeparam&gt;
                      /// &lt;param name="entity"&gt;L'entit� da eliminare.&lt;/param&gt;
                      public abstract Task DeleteAsync&lt;T&gt;(T entity) where T : class;
                  
                      /// &lt;summary&gt;
                      /// Elimina una collezione di entit� dal database.
                      /// &lt;/summary&gt;
                      /// &lt;typeparam name="T"&gt;Il tipo dell'entit�.&lt;/typeparam&gt;
                      /// &lt;param name="entities"&gt;Le entit� da eliminare.&lt;/param&gt;
                      public abstract Task DeleteRangeAsync&lt;T&gt;(IEnumerable&lt;T&gt; entities) where T : class;
                  
                      /// &lt;summary&gt;
                      /// Salva tutte le modifiche apportate al database.
                      /// &lt;/summary&gt;
                      /// &lt;returns&gt;Il numero di entit� modificate.&lt;/returns&gt;
                      public abstract Task&lt;int&gt; SaveChangesAsync();
                  
                      /// &lt;summary&gt;
                      /// Inizia una nuova transazione asincrona.
                      /// &lt;/summary&gt;
                      public abstract Task BeginTransactionAsync();
                  
                      /// &lt;summary&gt;
                      /// Conferma la transazione corrente.
                      /// &lt;/summary&gt;
                      public abstract Task CommitTransactionAsync();
                  
                      /// &lt;summary&gt;
                      /// Annulla la transazione corrente.
                      /// &lt;/summary&gt;
                      public abstract Task RollbackTransactionAsync();
                  
                      /// &lt;summary&gt;
                      /// Rilascia le risorse gestite e non gestite.
                      /// &lt;/summary&gt;
                      public void Dispose()
                      {
                          Dispose(true);
                          GC.SuppressFinalize(this);
                      }
                  
                      /// &lt;summary&gt;
                      /// Rilascia le risorse gestite e non gestite.
                      /// &lt;/summary&gt;
                      /// &lt;param name="disposing"&gt;Indica se rilasciare risorse gestite.&lt;/param&gt;
                      protected virtual void Dispose(bool disposing)
                      {
                          if (!_disposed)
                          {
                              if (disposing)
                              {
                                  // Rilascia le risorse gestite (ad esempio, connessioni al database)
                              }
                  
                              // Rilascia le risorse non gestite (se presenti)
                              _disposed = true;
                          }
                      }
                  
                      /// &lt;summary&gt;
                      /// Distruttore per garantire il rilascio delle risorse.
                      /// &lt;/summary&gt;
                      ~OrmProviderBase()
                      {
                          Dispose(false);
                      }
                  }
                </File>
                <File Name="UnitOfWorkBase.cs" MIME="text/plain" Encoding="utf_8" BOM="True">
                  ﻿namespace FlexCore.ORM.Core.Implementations
                  {
                      using System;
                  
                      /// &lt;summary&gt;
                      /// Classe astratta che fornisce le basi per l'implementazione di un'unità di lavoro.
                      /// Gestisce la transazione e il salvataggio delle modifiche in un contesto di dati.
                      /// &lt;/summary&gt;
                      public abstract class UnitOfWorkBase : IDisposable
                      {
                          // Flag per tenere traccia se l'oggetto è stato già rilasciato.
                          protected bool _disposed;
                  
                          /// &lt;summary&gt;
                          /// Avvia una transazione in modo asincrono.
                          /// &lt;/summary&gt;
                          /// &lt;returns&gt;Un task che rappresenta l'operazione asincrona.&lt;/returns&gt;
                          public abstract Task BeginTransactionAsync();
                  
                          /// &lt;summary&gt;
                          /// Commette la transazione in corso in modo asincrono.
                          /// &lt;/summary&gt;
                          /// &lt;returns&gt;Un task che rappresenta l'operazione asincrona.&lt;/returns&gt;
                          public abstract Task CommitTransactionAsync();
                  
                          /// &lt;summary&gt;
                          /// Annulla la transazione in corso in modo asincrono.
                          /// &lt;/summary&gt;
                          /// &lt;returns&gt;Un task che rappresenta l'operazione asincrona.&lt;/returns&gt;
                          public abstract Task RollbackTransactionAsync();
                  
                          /// &lt;summary&gt;
                          /// Salva le modifiche effettuate nel contesto di dati in modo asincrono.
                          /// &lt;/summary&gt;
                          /// &lt;returns&gt;Un task che rappresenta l'operazione asincrona, restituendo il numero di entità salvate.&lt;/returns&gt;
                          public abstract Task&lt;int&gt; SaveChangesAsync();
                  
                          /// &lt;summary&gt;
                          /// Esegue la logica di rilascio delle risorse.
                          /// Questo metodo è protetto e deve essere implementato dalle classi derivate.
                          /// &lt;/summary&gt;
                          /// &lt;param name="disposing"&gt;Indica se il metodo è stato chiamato tramite il metodo Dispose o dal finalizzatore.&lt;/param&gt;
                          protected abstract void Dispose(bool disposing);
                  
                          /// &lt;summary&gt;
                          /// Rilascia le risorse quando l'oggetto non è più necessario.
                          /// &lt;/summary&gt;
                          public void Dispose()
                          {
                              // Non chiamare Dispose più di una volta.
                              Dispose(true);
                              GC.SuppressFinalize(this);
                          }
                      }
                  }
                </File>
              </Folder>
              <Folder Name="Interfaces">
                <File Name="IOrmProvider.cs" MIME="text/plain" Encoding="mac_roman">
                  namespace FlexCore.ORM.Core.Interfaces;
                  
                  using System;
                  using System.Collections.Generic;
                  using System.Threading.Tasks;
                  
                  /// &lt;summary&gt;
                  /// Interfaccia per le operazioni CRUD generiche su un database.
                  /// Include metodi per il recupero, l'aggiunta, l'aggiornamento e la cancellazione di entit‡.
                  /// Inoltre gestisce le transazioni attraverso i metodi di commit, rollback e salvataggio delle modifiche.
                  /// &lt;/summary&gt;
                  public interface IOrmProvider : IDisposable
                  {
                      /// &lt;summary&gt;
                      /// Recupera un'entit‡ dal database in base all'ID.
                      /// &lt;/summary&gt;
                      /// &lt;typeparam name="T"&gt;Tipo dell'entit‡.&lt;/typeparam&gt;
                      /// &lt;param name="id"&gt;L'ID dell'entit‡ da recuperare.&lt;/param&gt;
                      /// &lt;returns&gt;Un task che restituisce l'entit‡ se trovata, altrimenti null.&lt;/returns&gt;
                      Task&lt;T?&gt; GetByIdAsync&lt;T&gt;(Guid id) where T : class;
                  
                      /// &lt;summary&gt;
                      /// Recupera tutte le entit‡ di tipo &lt;typeparamref name="T"/&gt; dal database.
                      /// &lt;/summary&gt;
                      /// &lt;typeparam name="T"&gt;Tipo dell'entit‡.&lt;/typeparam&gt;
                      /// &lt;returns&gt;Un task che restituisce una raccolta di entit‡.&lt;/returns&gt;
                      Task&lt;IEnumerable&lt;T&gt;&gt; GetAllAsync&lt;T&gt;() where T : class;
                  
                      /// &lt;summary&gt;
                      /// Aggiunge una nuova entit‡ al database.
                      /// &lt;/summary&gt;
                      /// &lt;typeparam name="T"&gt;Tipo dell'entit‡.&lt;/typeparam&gt;
                      /// &lt;param name="entity"&gt;L'entit‡ da aggiungere.&lt;/param&gt;
                      /// &lt;returns&gt;Un task che rappresenta l'operazione asincrona.&lt;/returns&gt;
                      Task AddAsync&lt;T&gt;(T entity) where T : class;
                  
                      /// &lt;summary&gt;
                      /// Aggiunge un intervallo di entit‡ al database.
                      /// &lt;/summary&gt;
                      /// &lt;typeparam name="T"&gt;Tipo dell'entit‡.&lt;/typeparam&gt;
                      /// &lt;param name="entities"&gt;Le entit‡ da aggiungere.&lt;/param&gt;
                      /// &lt;returns&gt;Un task che rappresenta l'operazione asincrona.&lt;/returns&gt;
                      Task AddRangeAsync&lt;T&gt;(IEnumerable&lt;T&gt; entities) where T : class;
                  
                      /// &lt;summary&gt;
                      /// Aggiorna un'entit‡ esistente nel database.
                      /// &lt;/summary&gt;
                      /// &lt;typeparam name="T"&gt;Tipo dell'entit‡.&lt;/typeparam&gt;
                      /// &lt;param name="entity"&gt;L'entit‡ da aggiornare.&lt;/param&gt;
                      /// &lt;returns&gt;Un task che rappresenta l'operazione asincrona.&lt;/returns&gt;
                      Task UpdateAsync&lt;T&gt;(T entity) where T : class;
                  
                      /// &lt;summary&gt;
                      /// Aggiorna un intervallo di entit‡ esistenti nel database.
                      /// &lt;/summary&gt;
                      /// &lt;typeparam name="T"&gt;Tipo dell'entit‡.&lt;/typeparam&gt;
                      /// &lt;param name="entities"&gt;Le entit‡ da aggiornare.&lt;/param&gt;
                      /// &lt;returns&gt;Un task che rappresenta l'operazione asincrona.&lt;/returns&gt;
                      Task UpdateRangeAsync&lt;T&gt;(IEnumerable&lt;T&gt; entities) where T : class;
                  
                      /// &lt;summary&gt;
                      /// Elimina un'entit‡ dal database.
                      /// &lt;/summary&gt;
                      /// &lt;typeparam name="T"&gt;Tipo dell'entit‡.&lt;/typeparam&gt;
                      /// &lt;param name="entity"&gt;L'entit‡ da eliminare.&lt;/param&gt;
                      /// &lt;returns&gt;Un task che rappresenta l'operazione asincrona.&lt;/returns&gt;
                      Task DeleteAsync&lt;T&gt;(T entity) where T : class;
                  
                      /// &lt;summary&gt;
                      /// Elimina un intervallo di entit‡ dal database.
                      /// &lt;/summary&gt;
                      /// &lt;typeparam name="T"&gt;Tipo dell'entit‡.&lt;/typeparam&gt;
                      /// &lt;param name="entities"&gt;Le entit‡ da eliminare.&lt;/param&gt;
                      /// &lt;returns&gt;Un task che rappresenta l'operazione asincrona.&lt;/returns&gt;
                      Task DeleteRangeAsync&lt;T&gt;(IEnumerable&lt;T&gt; entities) where T : class;
                  
                      /// &lt;summary&gt;
                      /// Salva le modifiche effettuate nel contesto.
                      /// &lt;/summary&gt;
                      /// &lt;returns&gt;Un task che restituisce il numero di modifiche salvate.&lt;/returns&gt;
                      Task&lt;int&gt; SaveChangesAsync();
                  
                      /// &lt;summary&gt;
                      /// Avvia una nuova transazione asincrona.
                      /// &lt;/summary&gt;
                      /// &lt;returns&gt;Un task che rappresenta l'operazione asincrona.&lt;/returns&gt;
                      Task BeginTransactionAsync();
                  
                      /// &lt;summary&gt;
                      /// Conferma la transazione attiva asincrona.
                      /// &lt;/summary&gt;
                      /// &lt;returns&gt;Un task che rappresenta l'operazione asincrona.&lt;/returns&gt;
                      Task CommitTransactionAsync();
                  
                      /// &lt;summary&gt;
                      /// Annulla la transazione attiva asincrona.
                      /// &lt;/summary&gt;
                      /// &lt;returns&gt;Un task che rappresenta l'operazione asincrona.&lt;/returns&gt;
                      Task RollbackTransactionAsync();
                  }
                </File>
                <File Name="IOrmProviderFactory.cs" MIME="text/plain" Encoding="utf_8" BOM="True">
                  ﻿namespace FlexCore.ORM.Core.Interfaces;
                  
                  /// &lt;summary&gt;
                  /// Interfaccia per la factory che crea istanze di provider ORM.
                  /// &lt;/summary&gt;
                  public interface IOrmProviderFactory
                  {
                      /// &lt;summary&gt;
                      /// Crea un'istanza di un provider ORM in base al nome del provider e alla stringa di connessione.
                      /// &lt;/summary&gt;
                      /// &lt;param name="providerName"&gt;Il nome del provider ORM (es. "EFCore", "Dapper", "ADO").&lt;/param&gt;
                      /// &lt;param name="connectionString"&gt;La stringa di connessione al database.&lt;/param&gt;
                      /// &lt;returns&gt;Un'istanza del provider ORM.&lt;/returns&gt;
                      /// &lt;exception cref="NotSupportedException"&gt;Se il provider specificato non è supportato.&lt;/exception&gt;
                      IOrmProvider CreateProvider(string providerName, string connectionString);
                  }
                </File>
                <File Name="IUnitOfWork.cs" MIME="text/plain" Encoding="utf_8" BOM="True">
                  ﻿namespace FlexCore.ORM.Core.Interfaces
                  {
                      using System;
                      using System.Threading.Tasks;
                  
                      /// &lt;summary&gt;
                      /// Definisce le operazioni di base per una unità di lavoro, inclusi il supporto per le transazioni.
                      /// Implementa i metodi per iniziare, confermare e annullare una transazione, nonché per salvare le modifiche.
                      /// &lt;/summary&gt;
                      public interface IUnitOfWork : IDisposable
                      {
                          /// &lt;summary&gt;
                          /// Avvia una nuova transazione asincrona.
                          /// &lt;/summary&gt;
                          /// &lt;returns&gt;Un task che rappresenta l'operazione asincrona.&lt;/returns&gt;
                          Task BeginTransactionAsync();
                  
                          /// &lt;summary&gt;
                          /// Conferma la transazione attiva asincrona.
                          /// &lt;/summary&gt;
                          /// &lt;returns&gt;Un task che rappresenta l'operazione asincrona.&lt;/returns&gt;
                          Task CommitTransactionAsync();
                  
                          /// &lt;summary&gt;
                          /// Annulla la transazione attiva asincrona.
                          /// &lt;/summary&gt;
                          /// &lt;returns&gt;Un task che rappresenta l'operazione asincrona.&lt;/returns&gt;
                          Task RollbackTransactionAsync();
                  
                          /// &lt;summary&gt;
                          /// Salva le modifiche effettuate nel contesto e restituisce il numero di modifiche salvate.
                          /// &lt;/summary&gt;
                          /// &lt;returns&gt;Un task che rappresenta l'operazione asincrona e restituisce il numero di modifiche.&lt;/returns&gt;
                          Task&lt;int&gt; SaveChangesAsync();
                      }
                  }
                </File>
              </Folder>
            </Folder>
            <Folder Name="FlexCore.ORM.Factory">
              <File Name="FlexCore.ORM.Factory.csproj" MIME="application/xml" Encoding="utf_8" BOM="True">
                ﻿&lt;Project Sdk="Microsoft.NET.Sdk"&gt;
                	&lt;PropertyGroup&gt;
                		&lt;OutputType&gt;Library&lt;/OutputType&gt;
                		&lt;Version&gt;0.1.0&lt;/Version&gt;
                		&lt;TargetFramework&gt;net9.0&lt;/TargetFramework&gt;
                		&lt;Nullable&gt;enable&lt;/Nullable&gt;
                		&lt;ImplicitUsings&gt;enable&lt;/ImplicitUsings&gt;
                		&lt;RootNamespace&gt;FlexCore.ORM.Factory&lt;/RootNamespace&gt;
                	&lt;/PropertyGroup&gt;
                	&lt;ItemGroup&gt;
                	  &lt;PackageReference Include="Microsoft.Extensions.DependencyInjection" Version="9.0.3" /&gt;
                	&lt;/ItemGroup&gt;
                	&lt;ItemGroup&gt;
                	  &lt;ProjectReference Include="..\FlexCore.ORM.Core\FlexCore.ORM.Core.csproj" /&gt;
                	&lt;/ItemGroup&gt;
                &lt;/Project&gt;
              </File>
              <File Name="OrmProviderFactory.cs" MIME="text/plain" Encoding="utf_8" BOM="True">
                ﻿namespace FlexCore.ORM.Factory;
                
                using FlexCore.ORM.Core.Interfaces;
                using System;
                using System.Collections.Generic;
                
                /// &lt;summary&gt;
                /// Factory per la creazione e registrazione dinamica dei provider ORM.
                /// &lt;/summary&gt;
                public class OrmProviderFactory : IOrmProviderFactory
                {
                    private readonly Dictionary&lt;string, Func&lt;string, IOrmProvider&gt;&gt; _providers = new();
                
                    /// &lt;summary&gt;
                    /// Registra un provider ORM con un nome specifico.
                    /// &lt;/summary&gt;
                    /// &lt;param name="name"&gt;Nome del provider (es. "EFCore", "Dapper", "ADO").&lt;/param&gt;
                    /// &lt;param name="providerFactory"&gt;Funzione che crea un'istanza del provider.&lt;/param&gt;
                    public void RegisterProvider(string name, Func&lt;string, IOrmProvider&gt; providerFactory)
                    {
                        if (string.IsNullOrWhiteSpace(name))
                            throw new ArgumentException("Il nome del provider non può essere vuoto.", nameof(name));
                
                        if (providerFactory == null)
                            throw new ArgumentNullException(nameof(providerFactory), "La factory del provider non può essere nulla.");
                
                        _providers[name] = providerFactory;
                    }
                
                    /// &lt;summary&gt;
                    /// Crea un'istanza di un provider ORM in base al nome e alla stringa di connessione.
                    /// &lt;/summary&gt;
                    /// &lt;param name="providerName"&gt;Nome del provider da creare.&lt;/param&gt;
                    /// &lt;param name="connectionString"&gt;Stringa di connessione al database.&lt;/param&gt;
                    /// &lt;returns&gt;Un'istanza del provider ORM.&lt;/returns&gt;
                    public IOrmProvider CreateProvider(string providerName, string connectionString)
                    {
                        if (_providers.TryGetValue(providerName, out var providerFactory))
                        {
                            return providerFactory(connectionString);
                        }
                        throw new NotSupportedException($"Provider '{providerName}' non supportato.");
                    }
                }
              </File>
              <File Name="OrmServiceExtensions.cs" MIME="text/plain" Encoding="utf_8" BOM="True">
                ﻿namespace FlexCore.ORM.Factory;
                
                using Microsoft.Extensions.DependencyInjection;
                using FlexCore.ORM.Core.Interfaces;
                
                /// &lt;summary&gt;
                /// Estensioni per la configurazione del provider ORM.
                /// &lt;/summary&gt;
                public static class OrmServiceExtensions
                {
                    /// &lt;summary&gt;
                    /// Registra un provider ORM in base al nome e alla stringa di connessione.
                    /// &lt;/summary&gt;
                    /// &lt;param name="services"&gt;La collection di servizi DI.&lt;/param&gt;
                    /// &lt;param name="providerName"&gt;Il nome del provider ORM.&lt;/param&gt;
                    /// &lt;param name="connectionString"&gt;La stringa di connessione al database.&lt;/param&gt;
                    /// &lt;returns&gt;IServiceCollection con il provider registrato.&lt;/returns&gt;
                    public static IServiceCollection AddOrmProvider(this IServiceCollection services, string providerName, string connectionString)
                    {
                        services.AddSingleton&lt;IOrmProviderFactory&gt;(sp =&gt; new OrmProviderFactory());
                        services.AddSingleton&lt;IOrmProvider&gt;(sp =&gt; sp.GetRequiredService&lt;IOrmProviderFactory&gt;().CreateProvider(providerName, connectionString));
                        return services;
                    }
                }
              </File>
            </Folder>
            <Folder Name="FlexCore.ORM.Providers.ADO">
              <File Name="AdoNetUnitOfWork.cs" MIME="text/plain" Encoding="utf_8" BOM="True">
                ﻿namespace FlexCore.ORM.Providers.ADO;
                
                using System;
                using System.Data;
                using System.Threading.Tasks;
                using FlexCore.ORM.Core.Implementations;
                
                /// &lt;summary&gt;
                /// Implementa il pattern UnitOfWork utilizzando ADO.NET per la gestione delle transazioni.
                /// Gestisce le operazioni di transazione come commit e rollback per una connessione ADO.NET.
                /// &lt;/summary&gt;
                public class AdoNetUnitOfWork : UnitOfWorkBase
                {
                    private readonly IDbConnection _connection;
                    private IDbTransaction? _transaction = null;
                
                    /// &lt;summary&gt;
                    /// Inizializza una nuova istanza di &lt;see cref="AdoNetUnitOfWork"/&gt;.
                    /// &lt;/summary&gt;
                    /// &lt;param name="connection"&gt;La connessione al database.&lt;/param&gt;
                    /// &lt;exception cref="ArgumentNullException"&gt;L'argomento &lt;paramref name="connection"/&gt; è nullo.&lt;/exception&gt;
                    public AdoNetUnitOfWork(IDbConnection connection)
                    {
                        _connection = connection ?? throw new ArgumentNullException(nameof(connection));
                    }
                
                    /// &lt;summary&gt;
                    /// Avvia una nuova transazione sul database.
                    /// &lt;/summary&gt;
                    /// &lt;returns&gt;Un task che rappresenta l'operazione asincrona.&lt;/returns&gt;
                    public override async Task BeginTransactionAsync()
                    {
                        if (_connection.State != ConnectionState.Open)
                            await Task.Run(() =&gt; _connection.Open());
                
                        _transaction = await Task.Run(() =&gt; _connection.BeginTransaction());
                    }
                
                    /// &lt;summary&gt;
                    /// Conferma la transazione attiva.
                    /// &lt;/summary&gt;
                    /// &lt;returns&gt;Un task che rappresenta l'operazione asincrona.&lt;/returns&gt;
                    /// &lt;exception cref="InvalidOperationException"&gt;Se non c'è alcuna transazione attiva.&lt;/exception&gt;
                    public override async Task CommitTransactionAsync()
                    {
                        if (_transaction == null)
                            throw new InvalidOperationException("Nessuna transazione attiva.");
                
                        await Task.Run(() =&gt; _transaction.Commit());
                        _transaction = null;
                    }
                
                    /// &lt;summary&gt;
                    /// Annulla la transazione attiva.
                    /// &lt;/summary&gt;
                    /// &lt;returns&gt;Un task che rappresenta l'operazione asincrona.&lt;/returns&gt;
                    /// &lt;exception cref="InvalidOperationException"&gt;Se non c'è alcuna transazione attiva.&lt;/exception&gt;
                    public override async Task RollbackTransactionAsync()
                    {
                        if (_transaction == null)
                            throw new InvalidOperationException("Nessuna transazione attiva.");
                
                        await Task.Run(() =&gt; _transaction.Rollback());
                        _transaction = null;
                    }
                
                    /// &lt;summary&gt;
                    /// Salva le modifiche effettuate nel contesto. Non implementa operazioni come Entity Framework, quindi ritorna sempre 0.
                    /// &lt;/summary&gt;
                    /// &lt;returns&gt;Un intero che rappresenta il numero di modifiche salvate.&lt;/returns&gt;
                    public override Task&lt;int&gt; SaveChangesAsync()
                    {
                        return Task.FromResult(0); // ADO.NET non gestisce SaveChanges come Entity Framework.
                    }
                
                    /// &lt;summary&gt;
                    /// Rilascia le risorse utilizzate dalla connessione e dalla transazione.
                    /// &lt;/summary&gt;
                    /// &lt;param name="disposing"&gt;Indica se il metodo è stato chiamato dal metodo Dispose pubblico o dal finalizzatore.&lt;/param&gt;
                    protected override void Dispose(bool disposing)
                    {
                        if (!_disposed)
                        {
                            if (disposing)
                            {
                                _transaction?.Dispose();
                            }
                
                            _connection?.Dispose();
                            _disposed = true;
                        }
                    }
                }
              </File>
              <File Name="AdoOrmProvider.cs" MIME="text/plain" Encoding="ascii">
                using System;
                using System.Collections.Generic;
                using System.Data;
                using System.Data.Common;
                using System.Linq;
                using System.Threading.Tasks;
                using FlexCore.ORM.Core.Interfaces;
                
                namespace FlexCore.ORM.Providers.ADO
                {
                    public class AdoOrmProvider(IDbConnection connection) : IOrmProvider, IDisposable
                    {
                        private readonly IDbConnection _connection = connection ?? throw new ArgumentNullException(nameof(connection));
                        private IDbTransaction? _transaction = null;
                
                        public async Task&lt;T?&gt; GetByIdAsync&lt;T&gt;(Guid id) where T : class
                        {
                            using var command = _connection.CreateCommand();
                            command.CommandText = $"SELECT * FROM {typeof(T).Name} WHERE Id = @Id";
                
                            var param = command.CreateParameter();
                            param.ParameterName = "@Id";
                            param.Value = id;
                            command.Parameters.Add(param);
                
                            using var reader = await ExecuteReaderAsync(command);
                            return await ReadEntityAsync&lt;T&gt;(reader);
                        }
                
                        public async Task AddAsync&lt;T&gt;(T entity) where T : class
                        {
                            var query = GenerateInsertQuery&lt;T&gt;();
                            using var command = _connection.CreateCommand();
                            command.CommandText = query;
                
                            foreach (var prop in typeof(T).GetProperties())
                            {
                                var param = command.CreateParameter();
                                param.ParameterName = $"@{prop.Name}";
                                param.Value = prop.GetValue(entity) ?? DBNull.Value;
                                command.Parameters.Add(param);
                            }
                
                            await ExecuteNonQueryAsync(command);
                        }
                
                        public async Task&lt;IEnumerable&lt;T&gt;&gt; GetAllAsync&lt;T&gt;() where T : class
                        {
                            using var command = _connection.CreateCommand();
                            command.CommandText = $"SELECT * FROM {typeof(T).Name}";
                
                            using var reader = await ExecuteReaderAsync(command);
                            var results = new List&lt;T&gt;();
                
                            while (await reader.ReadAsync())
                            {
                                results.Add(MapToEntity&lt;T&gt;(reader));
                            }
                            return results;
                        }
                
                        public async Task AddRangeAsync&lt;T&gt;(IEnumerable&lt;T&gt; entities) where T : class
                        {
                            foreach (var entity in entities)
                            {
                                await AddAsync(entity);
                            }
                        }
                
                        public async Task UpdateAsync&lt;T&gt;(T entity) where T : class
                        {
                            var setClause = string.Join(", ",
                                typeof(T).GetProperties()
                                .Where(p =&gt; p.Name != "Id")
                                .Select(p =&gt; $"{p.Name} = @{p.Name}"));
                
                            using var command = _connection.CreateCommand();
                            command.CommandText = $"UPDATE {typeof(T).Name} SET {setClause} WHERE Id = @Id";
                
                            foreach (var prop in typeof(T).GetProperties())
                            {
                                var param = command.CreateParameter();
                                param.ParameterName = $"@{prop.Name}";
                                param.Value = prop.GetValue(entity) ?? DBNull.Value;
                                command.Parameters.Add(param);
                            }
                
                            await ExecuteNonQueryAsync(command);
                        }
                
                        public async Task UpdateRangeAsync&lt;T&gt;(IEnumerable&lt;T&gt; entities) where T : class
                        {
                            foreach (var entity in entities)
                            {
                                await UpdateAsync(entity);
                            }
                        }
                
                        public async Task DeleteAsync&lt;T&gt;(T entity) where T : class
                        {
                            var id = typeof(T).GetProperty("Id")?.GetValue(entity);
                            using var command = _connection.CreateCommand();
                            command.CommandText = $"DELETE FROM {typeof(T).Name} WHERE Id = @Id";
                
                            var param = command.CreateParameter();
                            param.ParameterName = "@Id";
                            param.Value = id;
                            command.Parameters.Add(param);
                
                            await ExecuteNonQueryAsync(command);
                        }
                
                        public async Task DeleteRangeAsync&lt;T&gt;(IEnumerable&lt;T&gt; entities) where T : class
                        {
                            foreach (var entity in entities)
                            {
                                await DeleteAsync(entity);
                            }
                        }
                
                        public Task&lt;int&gt; SaveChangesAsync() =&gt; Task.FromResult(0);
                
                        public async Task BeginTransactionAsync()
                        {
                            if (_connection.State != ConnectionState.Open)
                                _connection.Open();
                
                            _transaction = _connection.BeginTransaction();
                            await Task.CompletedTask;
                        }
                
                        public async Task CommitTransactionAsync()
                        {
                            _transaction?.Commit();
                            _transaction = null;
                            await Task.CompletedTask;
                        }
                
                        public async Task RollbackTransactionAsync()
                        {
                            _transaction?.Rollback();
                            _transaction = null;
                            await Task.CompletedTask;
                        }
                
                        private async Task&lt;DbDataReader&gt; ExecuteReaderAsync(IDbCommand command)
                        {
                            // CA1859: Utilizzo di tipo concreto DbCommand
                            if (command is DbCommand dbCommand)
                            {
                                return await dbCommand.ExecuteReaderAsync();
                            }
                
                            // CS0266: Cast esplicito per IDataReader
                            return (DbDataReader)await Task.Run(() =&gt; command.ExecuteReader());
                        }
                
                        private async Task&lt;int&gt; ExecuteNonQueryAsync(IDbCommand command)
                        {
                            // CA1859: Utilizzo di tipo concreto DbCommand
                            if (command is DbCommand dbCommand)
                            {
                                return await dbCommand.ExecuteNonQueryAsync();
                            }
                
                            return await Task.Run(() =&gt; command.ExecuteNonQuery());
                        }
                
                        // CA1822: Metodo reso static
                        private static async Task&lt;T?&gt; ReadEntityAsync&lt;T&gt;(DbDataReader reader) where T : class
                        {
                            return await reader.ReadAsync() ? MapToEntity&lt;T&gt;(reader) : null;
                        }
                
                        // CA1822: Metodo reso static
                        private static T MapToEntity&lt;T&gt;(IDataRecord reader) where T : class
                        {
                            var entity = Activator.CreateInstance&lt;T&gt;();
                            for (int i = 0; i &lt; reader.FieldCount; i++)
                            {
                                var prop = typeof(T).GetProperty(reader.GetName(i));
                                prop?.SetValue(entity, reader.IsDBNull(i) ? null : reader.GetValue(i));
                            }
                            return entity;
                        }
                
                        // CA1822: Metodo reso static
                        private static string GenerateInsertQuery&lt;T&gt;()
                        {
                            var properties = typeof(T).GetProperties();
                            var columns = string.Join(", ", properties.Select(p =&gt; p.Name));
                            var parameters = string.Join(", ", properties.Select(p =&gt; $"@{p.Name}"));
                            return $"INSERT INTO {typeof(T).Name} ({columns}) VALUES ({parameters})";
                        }
                
                        public void Dispose()
                        {
                            _transaction?.Dispose();
                            _connection?.Dispose();
                            GC.SuppressFinalize(this);
                        }
                    }
                }
              </File>
              <File Name="FlexCore.ORM.Providers.ADO.csproj" MIME="application/xml" Encoding="utf_8" BOM="True">
                ﻿&lt;Project Sdk="Microsoft.NET.Sdk"&gt;
                	&lt;PropertyGroup&gt;
                		&lt;OutputType&gt;Library&lt;/OutputType&gt;
                		&lt;Version&gt;0.1.0&lt;/Version&gt;
                		&lt;TargetFramework&gt;net9.0&lt;/TargetFramework&gt;
                		&lt;RootNamespace&gt;FlexCore.ORM.Providers.ADO&lt;/RootNamespace&gt;
                		&lt;ImplicitUsings&gt;enable&lt;/ImplicitUsings&gt;
                		&lt;Nullable&gt;enable&lt;/Nullable&gt;
                	&lt;/PropertyGroup&gt;
                	&lt;ItemGroup&gt;
                	  &lt;ProjectReference Include="..\FlexCore.ORM.Core\FlexCore.ORM.Core.csproj" /&gt;
                	&lt;/ItemGroup&gt;
                &lt;/Project&gt;
              </File>
            </Folder>
            <Folder Name="FlexCore.ORM.Providers.Dapper">
              <File Name="DapperOrmProvider.cs" MIME="text/plain" Encoding="utf_8" BOM="True">
                ﻿#nullable enable
                using Dapper;
                using Dapper.Contrib.Extensions;
                using FlexCore.ORM.Core.Interfaces;
                using System;
                using System.Collections.Generic;
                using System.Data;
                using System.Linq;
                using System.Threading.Tasks;
                
                namespace FlexCore.ORM.Providers.Dapper;
                
                /// &lt;summary&gt;
                /// Implementazione del provider ORM basato su Dapper.Contrib.
                /// Gestisce la mappatura degli oggetti, le transazioni e le operazioni CRUD.
                /// &lt;/summary&gt;
                public class DapperOrmProvider : IOrmProvider, IDisposable
                {
                    private readonly IDbConnection _connection;
                    private IDbTransaction? _transaction;
                
                    /// &lt;summary&gt;
                    /// Inizializza i gestori di tipo per i GUID.
                    /// &lt;/summary&gt;
                    static DapperOrmProvider()
                    {
                        SqlMapper.RemoveTypeMap(typeof(Guid));
                        SqlMapper.AddTypeHandler(new GuidTypeHandler());
                    }
                
                    /// &lt;summary&gt;
                    /// Inizializza una nuova istanza del provider Dapper.
                    /// &lt;/summary&gt;
                    /// &lt;param name="connection"&gt;Connessione al database già configurata&lt;/param&gt;
                    /// &lt;exception cref="ArgumentNullException"&gt;Se la connessione è null&lt;/exception&gt;
                    public DapperOrmProvider(IDbConnection connection)
                    {
                        _connection = connection ?? throw new ArgumentNullException(nameof(connection));
                    }
                
                    /// &lt;summary&gt;
                    /// Gestore personalizzato per la conversione GUID/stringa.
                    /// &lt;/summary&gt;
                    public class GuidTypeHandler : SqlMapper.TypeHandler&lt;Guid&gt;
                    {
                        /// &lt;summary&gt;
                        /// Converte una stringa in GUID.
                        /// &lt;/summary&gt;
                        /// &lt;param name="value"&gt;Valore da convertire&lt;/param&gt;
                        /// &lt;returns&gt;Guid parsato&lt;/returns&gt;
                        /// &lt;exception cref="FormatException"&gt;Se il formato non è valido&lt;/exception&gt;
                        public override Guid Parse(object value) =&gt; Guid.Parse(value.ToString()!);
                
                        /// &lt;summary&gt;
                        /// Imposta il parametro SQL con il GUID formattato come stringa.
                        /// &lt;/summary&gt;
                        /// &lt;param name="parameter"&gt;Parametro SQL da impostare&lt;/param&gt;
                        /// &lt;param name="value"&gt;Valore GUID da convertire&lt;/param&gt;
                        public override void SetValue(IDbDataParameter parameter, Guid value)
                        {
                            parameter.DbType = DbType.String;
                            parameter.Value = value.ToString("N");
                        }
                    }
                
                    /// &lt;summary&gt;
                    /// Recupera un'entità tramite ID.
                    /// &lt;/summary&gt;
                    /// &lt;typeparam name="T"&gt;Tipo dell'entità&lt;/typeparam&gt;
                    /// &lt;param name="id"&gt;ID univoco dell'entità&lt;/param&gt;
                    /// &lt;returns&gt;Task che restituisce l'entità o null&lt;/returns&gt;
                    public async Task&lt;T?&gt; GetByIdAsync&lt;T&gt;(Guid id) where T : class =&gt;
                        await _connection.GetAsync&lt;T&gt;(id);
                
                    /// &lt;summary&gt;
                    /// Recupera tutte le entità di tipo T.
                    /// &lt;/summary&gt;
                    /// &lt;typeparam name="T"&gt;Tipo dell'entità&lt;/typeparam&gt;
                    /// &lt;returns&gt;Task che restituisce una collezione di entità&lt;/returns&gt;
                    public async Task&lt;IEnumerable&lt;T&gt;&gt; GetAllAsync&lt;T&gt;() where T : class =&gt;
                        await _connection.GetAllAsync&lt;T&gt;();
                
                    /// &lt;summary&gt;
                    /// Aggiunge una nuova entità al database.
                    /// &lt;/summary&gt;
                    /// &lt;typeparam name="T"&gt;Tipo dell'entità&lt;/typeparam&gt;
                    /// &lt;param name="entity"&gt;Entità da aggiungere&lt;/param&gt;
                    /// &lt;returns&gt;Task completato&lt;/returns&gt;
                    public async Task AddAsync&lt;T&gt;(T entity) where T : class =&gt;
                        await _connection.InsertAsync(entity);
                
                    /// &lt;summary&gt;
                    /// Aggiunge una collezione di entità al database.
                    /// &lt;/summary&gt;
                    /// &lt;typeparam name="T"&gt;Tipo dell'entità&lt;/typeparam&gt;
                    /// &lt;param name="entities"&gt;Collezione di entità da aggiungere&lt;/param&gt;
                    /// &lt;returns&gt;Task completato&lt;/returns&gt;
                    public async Task AddRangeAsync&lt;T&gt;(IEnumerable&lt;T&gt; entities) where T : class =&gt;
                        await _connection.InsertAsync(entities);
                
                    /// &lt;summary&gt;
                    /// Aggiorna un'entità esistente.
                    /// &lt;/summary&gt;
                    /// &lt;typeparam name="T"&gt;Tipo dell'entità&lt;/typeparam&gt;
                    /// &lt;param name="entity"&gt;Entità con i valori aggiornati&lt;/param&gt;
                    /// &lt;returns&gt;Task completato&lt;/returns&gt;
                    public async Task UpdateAsync&lt;T&gt;(T entity) where T : class =&gt;
                        await _connection.UpdateAsync(entity);
                
                    /// &lt;summary&gt;
                    /// Aggiorna una collezione di entità.
                    /// &lt;/summary&gt;
                    /// &lt;typeparam name="T"&gt;Tipo dell'entità&lt;/typeparam&gt;
                    /// &lt;param name="entities"&gt;Collezione di entità da aggiornare&lt;/param&gt;
                    /// &lt;returns&gt;Task completato&lt;/returns&gt;
                    public async Task UpdateRangeAsync&lt;T&gt;(IEnumerable&lt;T&gt; entities) where T : class =&gt;
                        await _connection.UpdateAsync(entities);
                
                    /// &lt;summary&gt;
                    /// Elimina un'entità dal database.
                    /// &lt;/summary&gt;
                    /// &lt;typeparam name="T"&gt;Tipo dell'entità&lt;/typeparam&gt;
                    /// &lt;param name="entity"&gt;Entità da eliminare&lt;/param&gt;
                    /// &lt;returns&gt;Task completato&lt;/returns&gt;
                    public async Task DeleteAsync&lt;T&gt;(T entity) where T : class =&gt;
                        await _connection.DeleteAsync(entity);
                
                    /// &lt;summary&gt;
                    /// Elimina una collezione di entità.
                    /// &lt;/summary&gt;
                    /// &lt;typeparam name="T"&gt;Tipo dell'entità&lt;/typeparam&gt;
                    /// &lt;param name="entities"&gt;Collezione di entità da eliminare&lt;/param&gt;
                    /// &lt;returns&gt;Task completato&lt;/returns&gt;
                    public async Task DeleteRangeAsync&lt;T&gt;(IEnumerable&lt;T&gt; entities) where T : class =&gt;
                        await _connection.DeleteAsync(entities);
                
                    /// &lt;summary&gt;
                    /// Salva le modifiche (non necessario in Dapper).
                    /// &lt;/summary&gt;
                    /// &lt;returns&gt;Task che restituisce sempre 0&lt;/returns&gt;
                    public Task&lt;int&gt; SaveChangesAsync() =&gt; Task.FromResult(0);
                
                    /// &lt;summary&gt;
                    /// Avvia una transazione asincrona.
                    /// &lt;/summary&gt;
                    /// &lt;returns&gt;Task completato&lt;/returns&gt;
                    /// &lt;exception cref="InvalidOperationException"&gt;Se la connessione non è aperta&lt;/exception&gt;
                    public async Task BeginTransactionAsync()
                    {
                        if (_connection.State != ConnectionState.Open)
                            throw new InvalidOperationException("La connessione deve essere aperta");
                
                        _transaction = await Task.Run(() =&gt; _connection.BeginTransaction());
                    }
                
                    /// &lt;summary&gt;
                    /// Conferma la transazione corrente.
                    /// &lt;/summary&gt;
                    /// &lt;returns&gt;Task completato&lt;/returns&gt;
                    /// &lt;exception cref="InvalidOperationException"&gt;Se non c'è una transazione attiva&lt;/exception&gt;
                    public async Task CommitTransactionAsync()
                    {
                        if (_transaction == null)
                            throw new InvalidOperationException("Nessuna transazione attiva");
                
                        await Task.Run(() =&gt; _transaction.Commit());
                        _transaction = null;
                    }
                
                    /// &lt;summary&gt;
                    /// Annulla la transazione corrente.
                    /// &lt;/summary&gt;
                    /// &lt;returns&gt;Task completato&lt;/returns&gt;
                    /// &lt;exception cref="InvalidOperationException"&gt;Se non c'è una transazione attiva&lt;/exception&gt;
                    public async Task RollbackTransactionAsync()
                    {
                        if (_transaction == null)
                            throw new InvalidOperationException("Nessuna transazione attiva");
                
                        await Task.Run(() =&gt; _transaction.Rollback());
                        _transaction = null;
                    }
                
                    /// &lt;summary&gt;
                    /// Rilascia le risorse gestite (connessione e transazione).
                    /// &lt;/summary&gt;
                    public void Dispose()
                    {
                        _transaction?.Dispose();
                        _connection?.Dispose();
                        GC.SuppressFinalize(this);
                    }
                }
              </File>
              <File Name="DapperUnitOfWork.cs" MIME="text/plain" Encoding="utf_8" BOM="True">
                ﻿namespace FlexCore.ORM.Providers.Dapper;
                
                using System.Data;
                using System.Threading.Tasks;
                using System;
                using FlexCore.ORM.Core.Implementations;
                
                /// &lt;summary&gt;
                /// Implementazione del UnitOfWork per Dapper. Gestisce le transazioni e l'accesso al database tramite Dapper.
                /// &lt;/summary&gt;
                public class DapperUnitOfWork : UnitOfWorkBase
                {
                    // Connessione al database
                    private readonly IDbConnection _connection;
                    // Transazione associata alla connessione
                    private IDbTransaction _transaction;
                
                    /// &lt;summary&gt;
                    /// Inizializza una nuova istanza di &lt;see cref="DapperUnitOfWork"/&gt;.
                    /// &lt;/summary&gt;
                    /// &lt;param name="connection"&gt;La connessione al database utilizzata da Dapper.&lt;/param&gt;
                    public DapperUnitOfWork(IDbConnection connection)
                    {
                        _connection = connection ?? throw new ArgumentNullException(nameof(connection));
                    }
                
                    /// &lt;summary&gt;
                    /// Avvia una nuova transazione asincrona.
                    /// &lt;/summary&gt;
                    /// &lt;returns&gt;Un task che rappresenta l'operazione asincrona.&lt;/returns&gt;
                    public override async Task BeginTransactionAsync()
                    {
                        // Verifica se la connessione è aperta, altrimenti la apre
                        if (_connection.State != ConnectionState.Open)
                            _connection.Open();
                
                        // Inizia una nuova transazione
                        _transaction = _connection.BeginTransaction();
                        await Task.CompletedTask;
                    }
                
                    /// &lt;summary&gt;
                    /// Commette la transazione corrente.
                    /// &lt;/summary&gt;
                    /// &lt;returns&gt;Un task che rappresenta l'operazione asincrona.&lt;/returns&gt;
                    public override async Task CommitTransactionAsync()
                    {
                        // Commette la transazione se non è null
                        _transaction?.Commit();
                        _transaction = null;
                        await Task.CompletedTask;
                    }
                
                    /// &lt;summary&gt;
                    /// Annulla la transazione corrente.
                    /// &lt;/summary&gt;
                    /// &lt;returns&gt;Un task che rappresenta l'operazione asincrona.&lt;/returns&gt;
                    public override async Task RollbackTransactionAsync()
                    {
                        // Annulla la transazione se non è null
                        _transaction?.Rollback();
                        _transaction = null;
                        await Task.CompletedTask;
                    }
                
                    /// &lt;summary&gt;
                    /// Metodo per salvare le modifiche. Dapper non gestisce SaveChanges come EF Core, quindi restituisce sempre 0.
                    /// &lt;/summary&gt;
                    /// &lt;returns&gt;Un task che rappresenta l'operazione asincrona. Restituisce 0.&lt;/returns&gt;
                    public override async Task&lt;int&gt; SaveChangesAsync()
                    {
                        // Dapper non ha una gestione diretta di SaveChanges, quindi restituisce sempre 0
                        return await Task.FromResult(0);
                    }
                
                    /// &lt;summary&gt;
                    /// Rilascia le risorse utilizzate dal UnitOfWork.
                    /// &lt;/summary&gt;
                    /// &lt;param name="disposing"&gt;Indica se il metodo è stato chiamato dal Dispose o dal finalizzatore.&lt;/param&gt;
                    protected override void Dispose(bool disposing)
                    {
                        if (!_disposed)
                        {
                            if (disposing)
                            {
                                // Rilascia le risorse gestite
                                _transaction?.Dispose();
                            }
                
                            // Rilascia le risorse non gestite (connessione al database)
                            _connection?.Dispose();
                            _disposed = true;
                        }
                    }
                }
              </File>
              <File Name="FlexCore.ORM.Providers.Dapper.csproj" MIME="application/xml" Encoding="utf_8" BOM="True">
                ﻿&lt;Project Sdk="Microsoft.NET.Sdk"&gt;
                	&lt;PropertyGroup&gt;
                		&lt;OutputType&gt;Library&lt;/OutputType&gt;
                		&lt;Version&gt;0.1.0&lt;/Version&gt;
                		&lt;TargetFramework&gt;net9.0&lt;/TargetFramework&gt;
                		&lt;RootNamespace&gt;FlexCore.ORM.Providers.Dapper&lt;/RootNamespace&gt;
                	&lt;/PropertyGroup&gt;
                	&lt;ItemGroup&gt;
                	  &lt;PackageReference Include="Dapper.Contrib" Version="2.0.78" /&gt;
                	&lt;/ItemGroup&gt;
                	&lt;ItemGroup&gt;
                	  &lt;ProjectReference Include="..\FlexCore.ORM.Core\FlexCore.ORM.Core.csproj" /&gt;
                	&lt;/ItemGroup&gt;
                &lt;/Project&gt;
              </File>
            </Folder>
            <Folder Name="FlexCore.ORM.Providers.EFCore">
              <File Name="EFCoreOrmProvider.cs" MIME="text/plain" Encoding="mac_roman">
                namespace FlexCore.ORM.Providers.EFCore;
                
                using FlexCore.ORM.Core.Interfaces;
                using Microsoft.EntityFrameworkCore;
                using System;
                using System.Collections.Generic;
                using System.Threading.Tasks;
                
                /// &lt;summary&gt;
                /// Implementazione del provider ORM basato su Entity Framework Core.
                /// Questa classe fornisce metodi per interagire con il database tramite EF Core, come aggiungere, aggiornare, eliminare e recuperare entit‡.
                /// &lt;/summary&gt;
                public class EFCoreOrmProvider : IOrmProvider
                {
                    // Riferimento al contesto del database (DbContext)
                    private readonly DbContext _dbContext;
                
                    /// &lt;summary&gt;
                    /// Inizializza una nuova istanza di &lt;see cref="EFCoreOrmProvider"/&gt;.
                    /// &lt;/summary&gt;
                    /// &lt;param name="dbContext"&gt;Il contesto del database EF Core.&lt;/param&gt;
                    /// &lt;exception cref="ArgumentNullException"&gt;Lanciato se il &lt;paramref name="dbContext"/&gt; Ë null.&lt;/exception&gt;
                    public EFCoreOrmProvider(DbContext dbContext)
                    {
                        _dbContext = dbContext ?? throw new ArgumentNullException(nameof(dbContext));
                    }
                
                    /// &lt;summary&gt;
                    /// Recupera un'entit‡ per il suo ID in modo asincrono.
                    /// &lt;/summary&gt;
                    /// &lt;typeparam name="T"&gt;Il tipo dell'entit‡ da recuperare.&lt;/typeparam&gt;
                    /// &lt;param name="id"&gt;L'ID dell'entit‡ da recuperare.&lt;/param&gt;
                    /// &lt;returns&gt;Un task che rappresenta l'operazione asincrona. Restituisce l'entit‡ se trovata, altrimenti null.&lt;/returns&gt;
                    public async Task&lt;T?&gt; GetByIdAsync&lt;T&gt;(Guid id) where T : class
                    {
                        return await _dbContext.Set&lt;T&gt;().FindAsync(id);
                    }
                
                    /// &lt;summary&gt;
                    /// Recupera tutte le entit‡ di un tipo in modo asincrono.
                    /// &lt;/summary&gt;
                    /// &lt;typeparam name="T"&gt;Il tipo dell'entit‡ da recuperare.&lt;/typeparam&gt;
                    /// &lt;returns&gt;Un task che rappresenta l'operazione asincrona. Restituisce una collezione di entit‡.&lt;/returns&gt;
                    public async Task&lt;IEnumerable&lt;T&gt;&gt; GetAllAsync&lt;T&gt;() where T : class
                    {
                        return await _dbContext.Set&lt;T&gt;().AsNoTracking().ToListAsync();
                    }
                
                    /// &lt;summary&gt;
                    /// Aggiunge una nuova entit‡ al contesto di dati in modo asincrono.
                    /// &lt;/summary&gt;
                    /// &lt;typeparam name="T"&gt;Il tipo dell'entit‡ da aggiungere.&lt;/typeparam&gt;
                    /// &lt;param name="entity"&gt;L'entit‡ da aggiungere.&lt;/param&gt;
                    /// &lt;returns&gt;Un task che rappresenta l'operazione asincrona.&lt;/returns&gt;
                    public async Task AddAsync&lt;T&gt;(T entity) where T : class
                    {
                        await _dbContext.Set&lt;T&gt;().AddAsync(entity);
                        await _dbContext.SaveChangesAsync();
                    }
                
                    /// &lt;summary&gt;
                    /// Aggiunge un intervallo di entit‡ al contesto di dati in modo asincrono.
                    /// &lt;/summary&gt;
                    /// &lt;typeparam name="T"&gt;Il tipo dell'entit‡ da aggiungere.&lt;/typeparam&gt;
                    /// &lt;param name="entities"&gt;Le entit‡ da aggiungere.&lt;/param&gt;
                    /// &lt;returns&gt;Un task che rappresenta l'operazione asincrona.&lt;/returns&gt;
                    public async Task AddRangeAsync&lt;T&gt;(IEnumerable&lt;T&gt; entities) where T : class
                    {
                        await _dbContext.Set&lt;T&gt;().AddRangeAsync(entities);
                        await _dbContext.SaveChangesAsync();
                    }
                
                    /// &lt;summary&gt;
                    /// Aggiorna un'entit‡ nel contesto di dati in modo asincrono.
                    /// &lt;/summary&gt;
                    /// &lt;typeparam name="T"&gt;Il tipo dell'entit‡ da aggiornare.&lt;/typeparam&gt;
                    /// &lt;param name="entity"&gt;L'entit‡ da aggiornare.&lt;/param&gt;
                    /// &lt;returns&gt;Un task che rappresenta l'operazione asincrona.&lt;/returns&gt;
                    public async Task UpdateAsync&lt;T&gt;(T entity) where T : class
                    {
                        _dbContext.Set&lt;T&gt;().Update(entity);
                        await _dbContext.SaveChangesAsync();
                    }
                
                    /// &lt;summary&gt;
                    /// Aggiorna un intervallo di entit‡ nel contesto di dati in modo asincrono.
                    /// &lt;/summary&gt;
                    /// &lt;typeparam name="T"&gt;Il tipo dell'entit‡ da aggiornare.&lt;/typeparam&gt;
                    /// &lt;param name="entities"&gt;Le entit‡ da aggiornare.&lt;/param&gt;
                    /// &lt;returns&gt;Un task che rappresenta l'operazione asincrona.&lt;/returns&gt;
                    public async Task UpdateRangeAsync&lt;T&gt;(IEnumerable&lt;T&gt; entities) where T : class
                    {
                        _dbContext.Set&lt;T&gt;().UpdateRange(entities);
                        await _dbContext.SaveChangesAsync();
                    }
                
                    /// &lt;summary&gt;
                    /// Elimina un'entit‡ dal contesto di dati in modo asincrono.
                    /// &lt;/summary&gt;
                    /// &lt;typeparam name="T"&gt;Il tipo dell'entit‡ da eliminare.&lt;/typeparam&gt;
                    /// &lt;param name="entity"&gt;L'entit‡ da eliminare.&lt;/param&gt;
                    /// &lt;returns&gt;Un task che rappresenta l'operazione asincrona.&lt;/returns&gt;
                    public async Task DeleteAsync&lt;T&gt;(T entity) where T : class
                    {
                        _dbContext.Set&lt;T&gt;().Remove(entity);
                        await _dbContext.SaveChangesAsync();
                    }
                
                    /// &lt;summary&gt;
                    /// Elimina un intervallo di entit‡ dal contesto di dati in modo asincrono.
                    /// &lt;/summary&gt;
                    /// &lt;typeparam name="T"&gt;Il tipo dell'entit‡ da eliminare.&lt;/typeparam&gt;
                    /// &lt;param name="entities"&gt;Le entit‡ da eliminare.&lt;/param&gt;
                    /// &lt;returns&gt;Un task che rappresenta l'operazione asincrona.&lt;/returns&gt;
                    public async Task DeleteRangeAsync&lt;T&gt;(IEnumerable&lt;T&gt; entities) where T : class
                    {
                        _dbContext.Set&lt;T&gt;().RemoveRange(entities);
                        await _dbContext.SaveChangesAsync();
                    }
                
                    /// &lt;summary&gt;
                    /// Salva tutte le modifiche nel contesto di dati in modo asincrono.
                    /// &lt;/summary&gt;
                    /// &lt;returns&gt;Un task che rappresenta l'operazione asincrona. Restituisce il numero di entit‡ salvate.&lt;/returns&gt;
                    public async Task&lt;int&gt; SaveChangesAsync()
                    {
                        return await _dbContext.SaveChangesAsync();
                    }
                
                    /// &lt;summary&gt;
                    /// Avvia una transazione asincrona nel contesto di EF Core.
                    /// &lt;/summary&gt;
                    /// &lt;returns&gt;Un task che rappresenta l'operazione asincrona.&lt;/returns&gt;
                    public async Task BeginTransactionAsync()
                    {
                        await _dbContext.Database.BeginTransactionAsync();
                    }
                
                    /// &lt;summary&gt;
                    /// Commette la transazione asincrona nel contesto di EF Core.
                    /// &lt;/summary&gt;
                    /// &lt;returns&gt;Un task che rappresenta l'operazione asincrona.&lt;/returns&gt;
                    public async Task CommitTransactionAsync()
                    {
                        await _dbContext.Database.CommitTransactionAsync();
                    }
                
                    /// &lt;summary&gt;
                    /// Annulla la transazione asincrona nel contesto di EF Core.
                    /// &lt;/summary&gt;
                    /// &lt;returns&gt;Un task che rappresenta l'operazione asincrona.&lt;/returns&gt;
                    public async Task RollbackTransactionAsync()
                    {
                        await _dbContext.Database.RollbackTransactionAsync();
                    }
                
                    /// &lt;summary&gt;
                    /// Rilascia le risorse utilizzate dal provider ORM.
                    /// &lt;/summary&gt;
                    public void Dispose()
                    {
                        _dbContext?.Dispose();
                    }
                }
              </File>
              <File Name="EFCoreUnitOfWork.cs" MIME="text/plain" Encoding="utf_8" BOM="True">
                ﻿namespace FlexCore.ORM.Providers.EFCore;
                
                using Microsoft.EntityFrameworkCore;
                using System.Threading.Tasks;
                using FlexCore.ORM.Core.Implementations;
                
                /// &lt;summary&gt;
                /// Implementazione di UnitOfWork per EF Core. Gestisce la transazione e il salvataggio delle modifiche utilizzando Entity Framework Core.
                /// &lt;/summary&gt;
                public class EFCoreUnitOfWork : UnitOfWorkBase
                {
                    // Riferimento al contesto del database (DbContext)
                    private readonly DbContext _dbContext;
                
                    /// &lt;summary&gt;
                    /// Inizializza una nuova istanza di &lt;see cref="EFCoreUnitOfWork"/&gt;.
                    /// &lt;/summary&gt;
                    /// &lt;param name="dbContext"&gt;Il contesto del database EF Core.&lt;/param&gt;
                    public EFCoreUnitOfWork(DbContext dbContext)
                    {
                        _dbContext = dbContext;
                    }
                
                    /// &lt;summary&gt;
                    /// Avvia una nuova transazione asincrona nel contesto di EF Core.
                    /// &lt;/summary&gt;
                    /// &lt;returns&gt;Un task che rappresenta l'operazione asincrona.&lt;/returns&gt;
                    public override async Task BeginTransactionAsync()
                    {
                        await _dbContext.Database.BeginTransactionAsync();
                    }
                
                    /// &lt;summary&gt;
                    /// Commette la transazione asincrona nel contesto di EF Core.
                    /// &lt;/summary&gt;
                    /// &lt;returns&gt;Un task che rappresenta l'operazione asincrona.&lt;/returns&gt;
                    public override async Task CommitTransactionAsync()
                    {
                        await _dbContext.Database.CommitTransactionAsync();
                    }
                
                    /// &lt;summary&gt;
                    /// Annulla la transazione asincrona nel contesto di EF Core.
                    /// &lt;/summary&gt;
                    /// &lt;returns&gt;Un task che rappresenta l'operazione asincrona.&lt;/returns&gt;
                    public override async Task RollbackTransactionAsync()
                    {
                        await _dbContext.Database.RollbackTransactionAsync();
                    }
                
                    /// &lt;summary&gt;
                    /// Salva le modifiche nel contesto di EF Core in modo asincrono.
                    /// &lt;/summary&gt;
                    /// &lt;returns&gt;Un task che rappresenta l'operazione asincrona, restituendo il numero di entità salvate.&lt;/returns&gt;
                    public override async Task&lt;int&gt; SaveChangesAsync()
                    {
                        return await _dbContext.SaveChangesAsync();
                    }
                
                    /// &lt;summary&gt;
                    /// Rilascia le risorse utilizzate dall'istanza di &lt;see cref="EFCoreUnitOfWork"/&gt;.
                    /// &lt;/summary&gt;
                    /// &lt;param name="disposing"&gt;Indica se il metodo è stato chiamato tramite il metodo Dispose o dal finalizzatore.&lt;/param&gt;
                    protected override void Dispose(bool disposing)
                    {
                        if (!_disposed)
                        {
                            if (disposing)
                            {
                                // Rilascia le risorse gestite (DbContext)
                                _dbContext?.Dispose();
                            }
                
                            // Rilascia le risorse non gestite (nessuna nel caso di DbContext)
                            _disposed = true;
                        }
                    }
                }
              </File>
              <File Name="FlexCore.ORM.Providers.EFCore.csproj" MIME="application/xml" Encoding="utf_8" BOM="True">
                ﻿&lt;Project Sdk="Microsoft.NET.Sdk"&gt;
                	&lt;PropertyGroup&gt;
                		&lt;OutputType&gt;Library&lt;/OutputType&gt;
                		&lt;Version&gt;0.1.0&lt;/Version&gt;
                		&lt;TargetFramework&gt;net9.0&lt;/TargetFramework&gt;
                		&lt;Nullable&gt;enable&lt;/Nullable&gt;
                		&lt;ImplicitUsings&gt;enable&lt;/ImplicitUsings&gt;
                		&lt;RootNamespace&gt;FlexCore.ORM.Providers.EFCore&lt;/RootNamespace&gt;
                	&lt;/PropertyGroup&gt;
                	&lt;ItemGroup&gt;
                	  &lt;PackageReference Include="Microsoft.EntityFrameworkCore" Version="9.0.3" /&gt;
                	&lt;/ItemGroup&gt;
                	&lt;ItemGroup&gt;
                	  &lt;ProjectReference Include="..\FlexCore.ORM.Core\FlexCore.ORM.Core.csproj" /&gt;
                	&lt;/ItemGroup&gt;
                &lt;/Project&gt;
              </File>
            </Folder>
          </Folder>
          <Folder Name="Security">
            <Folder Name="FlexCore.Security.Identity">
              <File Name="FlexCore.Security.Identity.csproj" MIME="application/xml" Encoding="utf_8" BOM="True">
                ﻿&lt;Project Sdk="Microsoft.NET.Sdk"&gt;
                
                  &lt;PropertyGroup&gt;
                    &lt;TargetFramework&gt;net9.0&lt;/TargetFramework&gt;
                    &lt;ImplicitUsings&gt;enable&lt;/ImplicitUsings&gt;
                    &lt;Nullable&gt;enable&lt;/Nullable&gt;
                  &lt;/PropertyGroup&gt;
                
                  &lt;ItemGroup&gt;
                    &lt;PackageReference Include="Google.Apis.Auth" Version="1.69.0" /&gt;
                    &lt;PackageReference Include="Microsoft.AspNetCore.Authorization" Version="9.0.3" /&gt;
                    &lt;PackageReference Include="System.IdentityModel.Tokens.Jwt" Version="8.7.0" /&gt;
                  &lt;/ItemGroup&gt;
                
                &lt;/Project&gt;
              </File>
              <Folder Name="Models">
                <File Name="GoogleTokenPayload.cs" MIME="text/plain" Encoding="utf_8" BOM="True">
                  ﻿namespace FlexCore.Security.Identity.Models
                  {
                      public class GoogleTokenPayload
                      {
                          public required string Subject { get; set; }
                          public required string Email { get; set; }
                          public required string Name { get; set; }
                      }
                  }
                </File>
                <File Name="JwtSettings.cs" MIME="text/plain" Encoding="utf_8" BOM="True">
                  ﻿namespace FlexCore.Security.Identity.Models
                  {
                      public class JwtSettings
                      {
                          public required string SecretKey { get; set; }
                          public required string Issuer { get; set; }
                          public required string Audience { get; set; }
                          public int ExpiryMinutes { get; set; } = 60;
                      }
                  }
                </File>
                <File Name="OAuthProvider.cs" MIME="text/plain" Encoding="utf_8" BOM="True">
                  ﻿namespace FlexCore.Security.Identity.Models
                  {
                      public class OAuthProvider
                      {
                          public required string ClientId { get; set; }
                          public required string ClientSecret { get; set; }
                          public required string RedirectUri { get; set; }
                      }
                  }
                </File>
              </Folder>
              <Folder Name="Services">
                <File Name="GoogleTokenValidator.cs" MIME="text/plain" Encoding="utf_8" BOM="True">
                  ﻿using Google.Apis.Auth;
                  using FlexCore.Security.Identity.Models;
                  using System.Threading.Tasks;
                  
                  namespace FlexCore.Security.Identity.Services
                  {
                      public class GoogleTokenValidator : IGoogleTokenValidator
                      {
                          public async Task&lt;GoogleTokenPayload&gt; ValidateAsync(string token)
                          {
                              var payload = await GoogleJsonWebSignature.ValidateAsync(token);
                              return new GoogleTokenPayload
                              {
                                  Subject = payload.Subject,
                                  Email = payload.Email,
                                  Name = payload.Name
                              };
                          }
                      }
                  }
                </File>
                <File Name="IGoogleTokenValidator.cs" MIME="text/plain" Encoding="utf_8" BOM="True">
                  ﻿using FlexCore.Security.Identity.Models;
                  using System.Threading.Tasks;
                  
                  namespace FlexCore.Security.Identity.Services
                  {
                      public interface IGoogleTokenValidator
                      {
                          Task&lt;GoogleTokenPayload&gt; ValidateAsync(string token);
                      }
                  }
                </File>
                <File Name="JwtTokenService.cs" MIME="text/plain" Encoding="utf_8" BOM="True">
                  ﻿using System.IdentityModel.Tokens.Jwt;
                  using System.Security.Claims;
                  using System.Text;
                  using FlexCore.Security.Identity.Models;
                  using Microsoft.IdentityModel.Tokens;
                  
                  namespace FlexCore.Security.Identity.Services
                  {
                      public sealed class JwtTokenService
                      {
                          private readonly JwtSettings _settings;
                  
                          public JwtTokenService(JwtSettings settings)
                          {
                              _settings = settings;
                          }
                  
                          public string GenerateToken(IEnumerable&lt;Claim&gt; claims)
                          {
                              var key = new SymmetricSecurityKey(Encoding.UTF8.GetBytes(_settings.SecretKey));
                              var creds = new SigningCredentials(key, SecurityAlgorithms.HmacSha256);
                  
                              var token = new JwtSecurityToken(
                                  issuer: _settings.Issuer,
                                  audience: _settings.Audience,
                                  claims: claims,
                                  expires: DateTime.UtcNow.AddMinutes(_settings.ExpiryMinutes),
                                  signingCredentials: creds
                              );
                  
                              return new JwtSecurityTokenHandler().WriteToken(token);
                          }
                      }
                  }
                </File>
                <File Name="OAuthService.cs" MIME="text/plain" Encoding="utf_8" BOM="True">
                  ﻿using System.Security.Claims;
                  using System.Threading.Tasks;
                  
                  namespace FlexCore.Security.Identity.Services
                  {
                      public sealed class OAuthService
                      {
                          private readonly IGoogleTokenValidator _tokenValidator;
                  
                          public OAuthService(IGoogleTokenValidator tokenValidator)
                          {
                              _tokenValidator = tokenValidator;
                          }
                  
                          public async Task&lt;ClaimsPrincipal&gt; AuthenticateWithGoogleAsync(string token)
                          {
                              var payload = await _tokenValidator.ValidateAsync(token);
                  
                              var claims = new[]
                              {
                                  new Claim(ClaimTypes.NameIdentifier, payload.Subject),
                                  new Claim(ClaimTypes.Email, payload.Email),
                                  new Claim(ClaimTypes.Name, payload.Name)
                              };
                  
                              return new ClaimsPrincipal(new ClaimsIdentity(claims, "Google"));
                          }
                      }
                  }
                </File>
                <File Name="PolicyService.cs" MIME="text/plain" Encoding="utf_8" BOM="True">
                  ﻿using Microsoft.AspNetCore.Authorization;
                  using System.Security.Claims;
                  
                  namespace FlexCore.Security.Identity.Services
                  {
                      public static class PolicyService
                      {
                          public static void ConfigurePolicies(AuthorizationOptions options)
                          {
                              options.AddPolicy("AdminOnly", policy =&gt;
                                  policy.RequireClaim(ClaimTypes.Role, "Admin"));
                  
                              options.AddPolicy("ContentEditor", policy =&gt;
                                  policy.RequireAssertion(context =&gt;
                                      context.User.HasClaim(c =&gt;
                                          c.Type == ClaimTypes.Role &amp;&amp;
                                          (c.Value == "Admin" || c.Value == "Editor"))));
                          }
                      }
                  }
                </File>
              </Folder>
            </Folder>
          </Folder>
        </Folder>
      </Folder>
      <Folder Name="Solutions">
        <File Name="FlexCore.sln" MIME="text/plain" Encoding="utf_8" BOM="True">
          ﻿
          Microsoft Visual Studio Solution File, Format Version 12.00
          # Visual Studio Version 17
          VisualStudioVersion = 17.0.31903.59
          MinimumVisualStudioVersion = 10.0.40219.1
          Project("{FAE04EC0-301F-11D3-BF4B-00C04F79EFBC}") = "FlexCore.ORM.Core.Tests", "..\Tests\Libraries\ORM\FlexCore.ORM.Core.Tests\FlexCore.ORM.Core.Tests.csproj", "{6016AAE7-6775-4DEB-9EF1-468975575705}"
          EndProject
          Project("{FAE04EC0-301F-11D3-BF4B-00C04F79EFBC}") = "FlexCore.ORM.Providers.EFCore.Tests", "..\Tests\Libraries\ORM\FlexCore.ORM.Providers.EFCore.Tests\FlexCore.ORM.Providers.EFCore.Tests.csproj", "{EC19DF8E-D99A-42FD-99E8-68E3578139F3}"
          EndProject
          Project("{FAE04EC0-301F-11D3-BF4B-00C04F79EFBC}") = "FlexCore.Logging.Console.Tests", "..\Tests\Libraries\Logging\FlexCore.Logging.Console.Tests\FlexCore.Logging.Console.Tests.csproj", "{76A5436E-C08C-44F7-9FBD-8879A069BC29}"
          EndProject
          Project("{FAE04EC0-301F-11D3-BF4B-00C04F79EFBC}") = "FlexCore.Logging.Core.Tests", "..\Tests\Libraries\Logging\FlexCore.Logging.Core.Tests\FlexCore.Logging.Core.Tests.csproj", "{738859B7-CE24-47EB-A50E-7F5BDD7E9855}"
          EndProject
          Project("{FAE04EC0-301F-11D3-BF4B-00C04F79EFBC}") = "FlexCore.Logging.Factory.Tests", "..\Tests\Libraries\Logging\FlexCore.Logging.Factory.Tests\FlexCore.Logging.Factory.Tests.csproj", "{EF220141-1ED5-4991-9213-FC41EB034C42}"
          EndProject
          Project("{FAE04EC0-301F-11D3-BF4B-00C04F79EFBC}") = "FlexCore.Logging.Log4NetTests", "..\Tests\Libraries\Logging\FlexCore.Logging.Log4NetTests\FlexCore.Logging.Log4NetTests.csproj", "{78CDE71B-267F-411B-9665-923A11CAB6E7}"
          EndProject
          Project("{FAE04EC0-301F-11D3-BF4B-00C04F79EFBC}") = "FlexCore.Logging.Serilog.Tests", "..\Tests\Libraries\Logging\FlexCore.Logging.Serilog.Tests\FlexCore.Logging.Serilog.Tests.csproj", "{C7EDD1BE-FB9B-4D14-AF9A-2B666526A0C3}"
          EndProject
          Project("{FAE04EC0-301F-11D3-BF4B-00C04F79EFBC}") = "FlexCore.Infrastructure.Commands.Tests", "..\Tests\Libraries\Infrastructure\FlexCore.Infrastructure.Commands.Tests\FlexCore.Infrastructure.Commands.Tests.csproj", "{F88704EB-EBE7-438E-9DC8-C8A1A1035409}"
          EndProject
          Project("{FAE04EC0-301F-11D3-BF4B-00C04F79EFBC}") = "FlexCore.Database.Core.Tests", "..\Tests\Libraries\Database\FlexCore.Database.Core.Tests\FlexCore.Database.Core.Tests.csproj", "{F707E03F-98B9-4F4E-A956-BFE53B14E6AE}"
          EndProject
          Project("{FAE04EC0-301F-11D3-BF4B-00C04F79EFBC}") = "FlexCore.Database.Factory.Tests", "..\Tests\Libraries\Database\FlexCore.Database.Factory.Tests\FlexCore.Database.Factory.Tests.csproj", "{9FCB3D87-0EC8-424D-B649-C8B066E1B46A}"
          EndProject
          Project("{FAE04EC0-301F-11D3-BF4B-00C04F79EFBC}") = "FlexCore.Database.MariaDB.Tests", "..\Tests\Libraries\Database\FlexCore.Database.MariaDB.Tests\FlexCore.Database.MariaDB.Tests.csproj", "{7AB09DAD-7878-4C92-B1ED-E41060C9D6D5}"
          EndProject
          Project("{FAE04EC0-301F-11D3-BF4B-00C04F79EFBC}") = "FlexCore.Database.SQLite.Tests", "..\Tests\Libraries\Database\FlexCore.Database.SQLite.Tests\FlexCore.Database.SQLite.Tests.csproj", "{35341761-B87D-475E-AB08-7AD94D057302}"
          EndProject
          Project("{FAE04EC0-301F-11D3-BF4B-00C04F79EFBC}") = "FlexCore.Database.SQLServer.Tests", "..\Tests\Libraries\Database\FlexCore.Database.SQLServer.Tests\FlexCore.Database.SQLServer.Tests.csproj", "{FA6AC8C4-ACD9-4B48-91ED-4A1A4683AB34}"
          EndProject
          Project("{FAE04EC0-301F-11D3-BF4B-00C04F79EFBC}") = "FlexCore.Core.Configuration.Tests", "..\Tests\Libraries\Core\FlexCore.Core.Configuration.Tests\FlexCore.Core.Configuration.Tests.csproj", "{24C4ABC3-20D3-4C73-9543-C94E8467EB76}"
          EndProject
          Project("{FAE04EC0-301F-11D3-BF4B-00C04F79EFBC}") = "FlexCore.Core.Utilities.Tests", "..\Tests\Libraries\Core\FlexCore.Core.Utilities.Tests\FlexCore.Core.Utilities.Tests.csproj", "{C2B1BCCC-8CDE-46E3-B135-D911430C4696}"
          EndProject
          Project("{FAE04EC0-301F-11D3-BF4B-00C04F79EFBC}") = "FlexCore.Caching.Core.Tests", "..\Tests\Libraries\Caching\FlexCore.Caching.Core.Tests\FlexCore.Caching.Core.Tests.csproj", "{0134FF52-D9DD-4109-95A3-30C434B2A35D}"
          EndProject
          Project("{FAE04EC0-301F-11D3-BF4B-00C04F79EFBC}") = "FlexCore.Caching.Factory.Tests", "..\Tests\Libraries\Caching\FlexCore.Caching.Factory.Tests\FlexCore.Caching.Factory.Tests.csproj", "{1ED80402-DA13-4409-9170-55C50261E97A}"
          EndProject
          Project("{FAE04EC0-301F-11D3-BF4B-00C04F79EFBC}") = "FlexCore.Caching.Memory.Tests", "..\Tests\Libraries\Caching\FlexCore.Caching.Memory.Tests\FlexCore.Caching.Memory.Tests.csproj", "{5AF7A63F-01AE-4BB1-A7FA-D5177AF8FA2D}"
          EndProject
          Project("{FAE04EC0-301F-11D3-BF4B-00C04F79EFBC}") = "FlexCore.Caching.Redis.Tests", "..\Tests\Libraries\Caching\FlexCore.Caching.Redis.Tests\FlexCore.Caching.Redis.Tests.csproj", "{39D43940-DFD3-4266-AD2B-E823C65C5483}"
          EndProject
          Project("{FAE04EC0-301F-11D3-BF4B-00C04F79EFBC}") = "FlexCore.ORM.Core", "..\Projects\Libraries\ORM\FlexCore.ORM.Core\FlexCore.ORM.Core.csproj", "{BF07A16F-0116-4553-B085-E7CF12C8C475}"
          EndProject
          Project("{FAE04EC0-301F-11D3-BF4B-00C04F79EFBC}") = "FlexCore.ORM.Providers.ADO", "..\Projects\Libraries\ORM\FlexCore.ORM.Providers.ADO\FlexCore.ORM.Providers.ADO.csproj", "{2DB069D5-7CF5-438A-AAD5-3C4E47C52C19}"
          EndProject
          Project("{FAE04EC0-301F-11D3-BF4B-00C04F79EFBC}") = "FlexCore.ORM.Providers.Dapper", "..\Projects\Libraries\ORM\FlexCore.ORM.Providers.Dapper\FlexCore.ORM.Providers.Dapper.csproj", "{3398FEF9-F2C1-43CB-919B-2D804AA1ABF9}"
          EndProject
          Project("{FAE04EC0-301F-11D3-BF4B-00C04F79EFBC}") = "FlexCore.ORM.Providers.EFCore", "..\Projects\Libraries\ORM\FlexCore.ORM.Providers.EFCore\FlexCore.ORM.Providers.EFCore.csproj", "{5BAB9716-23EF-42B2-BC0B-2D2F541D56DE}"
          EndProject
          Project("{FAE04EC0-301F-11D3-BF4B-00C04F79EFBC}") = "FlexCore.Logging.Console", "..\Projects\Libraries\Logging\FlexCore.Logging.Console\FlexCore.Logging.Console.csproj", "{EFA9EE8E-9B8E-4B8A-96C4-3D99CC95A8C1}"
          EndProject
          Project("{FAE04EC0-301F-11D3-BF4B-00C04F79EFBC}") = "FlexCore.Logging.Core", "..\Projects\Libraries\Logging\FlexCore.Logging.Core\FlexCore.Logging.Core.csproj", "{EA48E529-EFCC-4827-9300-1757DB6F186A}"
          EndProject
          Project("{FAE04EC0-301F-11D3-BF4B-00C04F79EFBC}") = "FlexCore.Logging.Factory", "..\Projects\Libraries\Logging\FlexCore.Logging.Factory\FlexCore.Logging.Factory.csproj", "{7E991522-8BED-4BBF-BDA4-C20101F822B4}"
          EndProject
          Project("{FAE04EC0-301F-11D3-BF4B-00C04F79EFBC}") = "FlexCore.Logging.Log4Net", "..\Projects\Libraries\Logging\FlexCore.Logging.Log4Net\FlexCore.Logging.Log4Net.csproj", "{53BFFE96-C81E-480D-9A3E-A74556F28228}"
          EndProject
          Project("{FAE04EC0-301F-11D3-BF4B-00C04F79EFBC}") = "FlexCore.Logging.Serilog", "..\Projects\Libraries\Logging\FlexCore.Logging.Serilog\FlexCore.Logging.Serilog.csproj", "{9BD18DE5-BF09-4089-BD25-52E481B4CD16}"
          EndProject
          Project("{FAE04EC0-301F-11D3-BF4B-00C04F79EFBC}") = "FlexCore.Infrastructure.Commands", "..\Projects\Libraries\Infrastructure\FlexCore.Infrastructure.Commands\FlexCore.Infrastructure.Commands.csproj", "{B585B325-BB7B-4D38-AFBB-73056779FDB0}"
          EndProject
          Project("{FAE04EC0-301F-11D3-BF4B-00C04F79EFBC}") = "FlexCore.Infrastructure.Events", "..\Projects\Libraries\Infrastructure\FlexCore.Infrastructure.Events\FlexCore.Infrastructure.Events.csproj", "{F25D88DF-ABE5-40AD-B9C9-BE15D8ED8C95}"
          EndProject
          Project("{FAE04EC0-301F-11D3-BF4B-00C04F79EFBC}") = "FlexCore.Database.Core", "..\Projects\Libraries\Database\FlexCore.Database.Core\FlexCore.Database.Core.csproj", "{43273F3B-32F4-402C-9F24-A65EC40D7DD6}"
          EndProject
          Project("{FAE04EC0-301F-11D3-BF4B-00C04F79EFBC}") = "FlexCore.Database.Factory", "..\Projects\Libraries\Database\FlexCore.Database.Factory\FlexCore.Database.Factory.csproj", "{7A7478A6-80E8-4D7F-81A7-BD31003179C5}"
          EndProject
          Project("{FAE04EC0-301F-11D3-BF4B-00C04F79EFBC}") = "FlexCore.Database.MariaDB", "..\Projects\Libraries\Database\FlexCore.Database.MariaDB\FlexCore.Database.MariaDB.csproj", "{9A2037BB-8048-443C-9975-74EF4BE10EE0}"
          EndProject
          Project("{FAE04EC0-301F-11D3-BF4B-00C04F79EFBC}") = "FlexCore.Database.SQLite", "..\Projects\Libraries\Database\FlexCore.Database.SQLite\FlexCore.Database.SQLite.csproj", "{D02E42FF-5780-4B04-A9B6-6C4B303C980A}"
          EndProject
          Project("{FAE04EC0-301F-11D3-BF4B-00C04F79EFBC}") = "FlexCore.Database.SQLServer", "..\Projects\Libraries\Database\FlexCore.Database.SQLServer\FlexCore.Database.SQLServer.csproj", "{11E44CF0-24C0-41B3-9011-95CF71694BB0}"
          EndProject
          Project("{FAE04EC0-301F-11D3-BF4B-00C04F79EFBC}") = "FlexCore.Core.Configuration", "..\Projects\Libraries\Core\FlexCore.Core.Configuration\FlexCore.Core.Configuration.csproj", "{D4B5D509-A233-471D-B7B8-38B51CE44CD9}"
          EndProject
          Project("{FAE04EC0-301F-11D3-BF4B-00C04F79EFBC}") = "FlexCore.Core.Utilities", "..\Projects\Libraries\Core\FlexCore.Core.Utilities\FlexCore.Core.Utilities.csproj", "{F3CBF083-D0F5-469F-A80F-76377FE86E61}"
          EndProject
          Project("{FAE04EC0-301F-11D3-BF4B-00C04F79EFBC}") = "FlexCore.Caching.Core", "..\Projects\Libraries\Caching\FlexCore.Caching.Core\FlexCore.Caching.Core.csproj", "{6E8171A4-6545-443E-B716-52E695142837}"
          EndProject
          Project("{FAE04EC0-301F-11D3-BF4B-00C04F79EFBC}") = "FlexCore.Caching.Factory", "..\Projects\Libraries\Caching\FlexCore.Caching.Factory\FlexCore.Caching.Factory.csproj", "{4F8CBF12-1E42-47CA-85A1-286FE455B1D3}"
          EndProject
          Project("{FAE04EC0-301F-11D3-BF4B-00C04F79EFBC}") = "FlexCore.Caching.Interfaces", "..\Projects\Libraries\Caching\FlexCore.Caching.Interfaces\FlexCore.Caching.Interfaces.csproj", "{1834042A-B1D5-4FF3-8459-8BA57A18E9D7}"
          EndProject
          Project("{FAE04EC0-301F-11D3-BF4B-00C04F79EFBC}") = "FlexCore.Caching.Memory", "..\Projects\Libraries\Caching\FlexCore.Caching.Memory\FlexCore.Caching.Memory.csproj", "{1468A021-9F1A-4F89-8BAA-D9D2D9830785}"
          EndProject
          Project("{FAE04EC0-301F-11D3-BF4B-00C04F79EFBC}") = "FlexCore.Caching.Redis", "..\Projects\Libraries\Caching\FlexCore.Caching.Redis\FlexCore.Caching.Redis.csproj", "{8391174B-5E64-4475-A066-18CFFDD58209}"
          EndProject
          Project("{2150E333-8FDC-42A3-9474-1A3956D46DE8}") = "Tests", "Tests", "{323C84A9-4776-4DB2-A89A-3D4A7E88079D}"
          EndProject
          Project("{2150E333-8FDC-42A3-9474-1A3956D46DE8}") = "Libraries", "Libraries", "{6025D545-6A88-437E-A251-53E74A2A1904}"
          EndProject
          Project("{2150E333-8FDC-42A3-9474-1A3956D46DE8}") = "ORM", "ORM", "{89504F29-1D94-4565-A145-EE3EF35EC397}"
          EndProject
          Project("{2150E333-8FDC-42A3-9474-1A3956D46DE8}") = "Logging", "Logging", "{FD028703-F68E-4DF4-B980-ECDCD6B98272}"
          EndProject
          Project("{2150E333-8FDC-42A3-9474-1A3956D46DE8}") = "Infrastructure", "Infrastructure", "{B09A448F-399B-430F-8918-881E1255A3D8}"
          EndProject
          Project("{2150E333-8FDC-42A3-9474-1A3956D46DE8}") = "Database", "Database", "{79F52185-0D84-4D03-AD20-AFE0AC36A2DC}"
          EndProject
          Project("{2150E333-8FDC-42A3-9474-1A3956D46DE8}") = "Core", "Core", "{89960A29-7440-402F-8A9A-237EF084578D}"
          EndProject
          Project("{2150E333-8FDC-42A3-9474-1A3956D46DE8}") = "Caching", "Caching", "{7B07B7C3-9509-47BF-ACA9-E6BD82FD40E7}"
          EndProject
          Project("{2150E333-8FDC-42A3-9474-1A3956D46DE8}") = "Projects", "Projects", "{48B8C347-B383-47F7-8216-56AFB3CE0962}"
          EndProject
          Project("{2150E333-8FDC-42A3-9474-1A3956D46DE8}") = "Libraries", "Libraries", "{B96B327A-7BA5-461B-B35D-5B1EFAEADA96}"
          EndProject
          Project("{2150E333-8FDC-42A3-9474-1A3956D46DE8}") = "ORM", "ORM", "{AD9B660B-589A-4FE5-9891-ED04AECFE232}"
          EndProject
          Project("{2150E333-8FDC-42A3-9474-1A3956D46DE8}") = "Logging", "Logging", "{C3BD3AE4-FA31-4C94-A585-5C09DD2288A5}"
          EndProject
          Project("{2150E333-8FDC-42A3-9474-1A3956D46DE8}") = "Infrastructure", "Infrastructure", "{AF32442F-C14C-4000-8D33-9D7695DB6E59}"
          EndProject
          Project("{2150E333-8FDC-42A3-9474-1A3956D46DE8}") = "Database", "Database", "{81A6F2A5-AA3F-417F-BBE3-C6353CC18548}"
          EndProject
          Project("{2150E333-8FDC-42A3-9474-1A3956D46DE8}") = "Core", "Core", "{7BEB06B9-8E76-4CAE-8A65-B562B3907E02}"
          EndProject
          Project("{2150E333-8FDC-42A3-9474-1A3956D46DE8}") = "Caching", "Caching", "{A671E38D-1C7E-4BE9-A940-41C3F6FC8C16}"
          EndProject
          Project("{2150E333-8FDC-42A3-9474-1A3956D46DE8}") = "Security", "Security", "{6C83A596-D32D-B35F-00DD-F0C99B673980}"
          EndProject
          Project("{2150E333-8FDC-42A3-9474-1A3956D46DE8}") = "_Varie", "_Varie", "{E72FEF59-8741-4AA9-BDAB-5B7DF2C3206B}"
          	ProjectSection(SolutionItems) = preProject
          		..\.gitignore = ..\.gitignore
          		..\Directory.Build.props = ..\Directory.Build.props
          		..\Documents\memo.txt = ..\Documents\memo.txt
          	EndProjectSection
          EndProject
          Project("{FAE04EC0-301F-11D3-BF4B-00C04F79EFBC}") = "FlexCore.Caching.Common", "..\Projects\Libraries\Caching\FlexCore.Caching.Common\FlexCore.Caching.Common.csproj", "{DC1C3CA6-C3EC-432D-8CA3-166D5824DF27}"
          EndProject
          Project("{FAE04EC0-301F-11D3-BF4B-00C04F79EFBC}") = "FlexCore.Caching.Common.Tests", "..\Tests\Libraries\Caching\FlexCore.Caching.Common.Tests\FlexCore.Caching.Common.Tests.csproj", "{942D5489-CF3B-45E2-A694-5711B4066602}"
          EndProject
          Project("{FAE04EC0-301F-11D3-BF4B-00C04F79EFBC}") = "FlexCore.Caching.Interfaces.Tests", "..\Tests\Libraries\Caching\FlexCore.Caching.Interfaces.Tests\FlexCore.Caching.Interfaces.Tests.csproj", "{9FA55AF4-E6F7-DFA3-7787-C4619E2227C0}"
          EndProject
          Project("{FAE04EC0-301F-11D3-BF4B-00C04F79EFBC}") = "FlexCore.ORM.Providers.ADO.Tests", "..\Tests\Libraries\ORM\FlexCore.ORM.Providers.ADO.Tests\FlexCore.ORM.Providers.ADO.Tests.csproj", "{1D9D4740-82B3-4DDE-8361-FA49B297337D}"
          EndProject
          Project("{FAE04EC0-301F-11D3-BF4B-00C04F79EFBC}") = "FlexCore.ORM.Providers.Dapper.Tests", "..\Tests\Libraries\ORM\FlexCore.ORM.Providers.Dapper.Tests\FlexCore.ORM.Providers.Dapper.Tests.csproj", "{2E03F246-ECCF-479F-BCE3-D2E6C0E50F47}"
          EndProject
          Project("{FAE04EC0-301F-11D3-BF4B-00C04F79EFBC}") = "FlexCore.ORM.Factory", "..\Projects\Libraries\ORM\FlexCore.ORM.Factory\FlexCore.ORM.Factory.csproj", "{D8B95EF6-8198-1851-D350-2DEC5CA9A7EF}"
          EndProject
          Project("{FAE04EC0-301F-11D3-BF4B-00C04F79EFBC}") = "FlexCore.ORM.Factory.Tests", "..\Tests\Libraries\ORM\FlexCore.ORM.Factory.Tests\FlexCore.ORM.Factory.Tests.csproj", "{B386CABF-E864-C0B2-76E1-EA61F9FD3418}"
          EndProject
          Project("{FAE04EC0-301F-11D3-BF4B-00C04F79EFBC}") = "FlexCore.Security.Identity", "..\Projects\Libraries\Security\FlexCore.Security.Identity\FlexCore.Security.Identity.csproj", "{4A5656DE-1F3F-45CD-AD25-91B328035E33}"
          EndProject
          Project("{FAE04EC0-301F-11D3-BF4B-00C04F79EFBC}") = "FlexCore.Security.Identity.Tests", "..\Tests\Libraries\Security\FlexCore.Security.Identity.Tests\FlexCore.Security.Identity.Tests.csproj", "{3344B8FD-D780-4109-A2AC-C0BDEC64408F}"
          EndProject
          Project("{2150E333-8FDC-42A3-9474-1A3956D46DE8}") = "Security", "Security", "{920B7032-53EE-47C0-B59F-E0C0BCB6F661}"
          EndProject
          Global
          	GlobalSection(SolutionConfigurationPlatforms) = preSolution
          		Debug|Any CPU = Debug|Any CPU
          		Release|Any CPU = Release|Any CPU
          	EndGlobalSection
          	GlobalSection(ProjectConfigurationPlatforms) = postSolution
          		{6016AAE7-6775-4DEB-9EF1-468975575705}.Debug|Any CPU.ActiveCfg = Debug|Any CPU
          		{6016AAE7-6775-4DEB-9EF1-468975575705}.Debug|Any CPU.Build.0 = Debug|Any CPU
          		{6016AAE7-6775-4DEB-9EF1-468975575705}.Release|Any CPU.ActiveCfg = Release|Any CPU
          		{6016AAE7-6775-4DEB-9EF1-468975575705}.Release|Any CPU.Build.0 = Release|Any CPU
          		{EC19DF8E-D99A-42FD-99E8-68E3578139F3}.Debug|Any CPU.ActiveCfg = Debug|Any CPU
          		{EC19DF8E-D99A-42FD-99E8-68E3578139F3}.Debug|Any CPU.Build.0 = Debug|Any CPU
          		{EC19DF8E-D99A-42FD-99E8-68E3578139F3}.Release|Any CPU.ActiveCfg = Release|Any CPU
          		{EC19DF8E-D99A-42FD-99E8-68E3578139F3}.Release|Any CPU.Build.0 = Release|Any CPU
          		{76A5436E-C08C-44F7-9FBD-8879A069BC29}.Debug|Any CPU.ActiveCfg = Debug|Any CPU
          		{76A5436E-C08C-44F7-9FBD-8879A069BC29}.Debug|Any CPU.Build.0 = Debug|Any CPU
          		{76A5436E-C08C-44F7-9FBD-8879A069BC29}.Release|Any CPU.ActiveCfg = Release|Any CPU
          		{76A5436E-C08C-44F7-9FBD-8879A069BC29}.Release|Any CPU.Build.0 = Release|Any CPU
          		{738859B7-CE24-47EB-A50E-7F5BDD7E9855}.Debug|Any CPU.ActiveCfg = Debug|Any CPU
          		{738859B7-CE24-47EB-A50E-7F5BDD7E9855}.Debug|Any CPU.Build.0 = Debug|Any CPU
          		{738859B7-CE24-47EB-A50E-7F5BDD7E9855}.Release|Any CPU.ActiveCfg = Release|Any CPU
          		{738859B7-CE24-47EB-A50E-7F5BDD7E9855}.Release|Any CPU.Build.0 = Release|Any CPU
          		{EF220141-1ED5-4991-9213-FC41EB034C42}.Debug|Any CPU.ActiveCfg = Debug|Any CPU
          		{EF220141-1ED5-4991-9213-FC41EB034C42}.Debug|Any CPU.Build.0 = Debug|Any CPU
          		{EF220141-1ED5-4991-9213-FC41EB034C42}.Release|Any CPU.ActiveCfg = Release|Any CPU
          		{EF220141-1ED5-4991-9213-FC41EB034C42}.Release|Any CPU.Build.0 = Release|Any CPU
          		{78CDE71B-267F-411B-9665-923A11CAB6E7}.Debug|Any CPU.ActiveCfg = Debug|Any CPU
          		{78CDE71B-267F-411B-9665-923A11CAB6E7}.Debug|Any CPU.Build.0 = Debug|Any CPU
          		{78CDE71B-267F-411B-9665-923A11CAB6E7}.Release|Any CPU.ActiveCfg = Release|Any CPU
          		{78CDE71B-267F-411B-9665-923A11CAB6E7}.Release|Any CPU.Build.0 = Release|Any CPU
          		{C7EDD1BE-FB9B-4D14-AF9A-2B666526A0C3}.Debug|Any CPU.ActiveCfg = Debug|Any CPU
          		{C7EDD1BE-FB9B-4D14-AF9A-2B666526A0C3}.Debug|Any CPU.Build.0 = Debug|Any CPU
          		{C7EDD1BE-FB9B-4D14-AF9A-2B666526A0C3}.Release|Any CPU.ActiveCfg = Release|Any CPU
          		{C7EDD1BE-FB9B-4D14-AF9A-2B666526A0C3}.Release|Any CPU.Build.0 = Release|Any CPU
          		{F88704EB-EBE7-438E-9DC8-C8A1A1035409}.Debug|Any CPU.ActiveCfg = Debug|Any CPU
          		{F88704EB-EBE7-438E-9DC8-C8A1A1035409}.Debug|Any CPU.Build.0 = Debug|Any CPU
          		{F88704EB-EBE7-438E-9DC8-C8A1A1035409}.Release|Any CPU.ActiveCfg = Release|Any CPU
          		{F88704EB-EBE7-438E-9DC8-C8A1A1035409}.Release|Any CPU.Build.0 = Release|Any CPU
          		{F707E03F-98B9-4F4E-A956-BFE53B14E6AE}.Debug|Any CPU.ActiveCfg = Debug|Any CPU
          		{F707E03F-98B9-4F4E-A956-BFE53B14E6AE}.Debug|Any CPU.Build.0 = Debug|Any CPU
          		{F707E03F-98B9-4F4E-A956-BFE53B14E6AE}.Release|Any CPU.ActiveCfg = Release|Any CPU
          		{F707E03F-98B9-4F4E-A956-BFE53B14E6AE}.Release|Any CPU.Build.0 = Release|Any CPU
          		{9FCB3D87-0EC8-424D-B649-C8B066E1B46A}.Debug|Any CPU.ActiveCfg = Debug|Any CPU
          		{9FCB3D87-0EC8-424D-B649-C8B066E1B46A}.Debug|Any CPU.Build.0 = Debug|Any CPU
          		{9FCB3D87-0EC8-424D-B649-C8B066E1B46A}.Release|Any CPU.ActiveCfg = Release|Any CPU
          		{9FCB3D87-0EC8-424D-B649-C8B066E1B46A}.Release|Any CPU.Build.0 = Release|Any CPU
          		{7AB09DAD-7878-4C92-B1ED-E41060C9D6D5}.Debug|Any CPU.ActiveCfg = Debug|Any CPU
          		{7AB09DAD-7878-4C92-B1ED-E41060C9D6D5}.Debug|Any CPU.Build.0 = Debug|Any CPU
          		{7AB09DAD-7878-4C92-B1ED-E41060C9D6D5}.Release|Any CPU.ActiveCfg = Release|Any CPU
          		{7AB09DAD-7878-4C92-B1ED-E41060C9D6D5}.Release|Any CPU.Build.0 = Release|Any CPU
          		{35341761-B87D-475E-AB08-7AD94D057302}.Debug|Any CPU.ActiveCfg = Debug|Any CPU
          		{35341761-B87D-475E-AB08-7AD94D057302}.Debug|Any CPU.Build.0 = Debug|Any CPU
          		{35341761-B87D-475E-AB08-7AD94D057302}.Release|Any CPU.ActiveCfg = Release|Any CPU
          		{35341761-B87D-475E-AB08-7AD94D057302}.Release|Any CPU.Build.0 = Release|Any CPU
          		{FA6AC8C4-ACD9-4B48-91ED-4A1A4683AB34}.Debug|Any CPU.ActiveCfg = Debug|Any CPU
          		{FA6AC8C4-ACD9-4B48-91ED-4A1A4683AB34}.Debug|Any CPU.Build.0 = Debug|Any CPU
          		{FA6AC8C4-ACD9-4B48-91ED-4A1A4683AB34}.Release|Any CPU.ActiveCfg = Release|Any CPU
          		{FA6AC8C4-ACD9-4B48-91ED-4A1A4683AB34}.Release|Any CPU.Build.0 = Release|Any CPU
          		{24C4ABC3-20D3-4C73-9543-C94E8467EB76}.Debug|Any CPU.ActiveCfg = Debug|Any CPU
          		{24C4ABC3-20D3-4C73-9543-C94E8467EB76}.Debug|Any CPU.Build.0 = Debug|Any CPU
          		{24C4ABC3-20D3-4C73-9543-C94E8467EB76}.Release|Any CPU.ActiveCfg = Release|Any CPU
          		{24C4ABC3-20D3-4C73-9543-C94E8467EB76}.Release|Any CPU.Build.0 = Release|Any CPU
          		{C2B1BCCC-8CDE-46E3-B135-D911430C4696}.Debug|Any CPU.ActiveCfg = Debug|Any CPU
          		{C2B1BCCC-8CDE-46E3-B135-D911430C4696}.Debug|Any CPU.Build.0 = Debug|Any CPU
          		{C2B1BCCC-8CDE-46E3-B135-D911430C4696}.Release|Any CPU.ActiveCfg = Release|Any CPU
          		{C2B1BCCC-8CDE-46E3-B135-D911430C4696}.Release|Any CPU.Build.0 = Release|Any CPU
          		{0134FF52-D9DD-4109-95A3-30C434B2A35D}.Debug|Any CPU.ActiveCfg = Debug|Any CPU
          		{0134FF52-D9DD-4109-95A3-30C434B2A35D}.Debug|Any CPU.Build.0 = Debug|Any CPU
          		{0134FF52-D9DD-4109-95A3-30C434B2A35D}.Release|Any CPU.ActiveCfg = Release|Any CPU
          		{0134FF52-D9DD-4109-95A3-30C434B2A35D}.Release|Any CPU.Build.0 = Release|Any CPU
          		{1ED80402-DA13-4409-9170-55C50261E97A}.Debug|Any CPU.ActiveCfg = Debug|Any CPU
          		{1ED80402-DA13-4409-9170-55C50261E97A}.Debug|Any CPU.Build.0 = Debug|Any CPU
          		{1ED80402-DA13-4409-9170-55C50261E97A}.Release|Any CPU.ActiveCfg = Release|Any CPU
          		{1ED80402-DA13-4409-9170-55C50261E97A}.Release|Any CPU.Build.0 = Release|Any CPU
          		{5AF7A63F-01AE-4BB1-A7FA-D5177AF8FA2D}.Debug|Any CPU.ActiveCfg = Debug|Any CPU
          		{5AF7A63F-01AE-4BB1-A7FA-D5177AF8FA2D}.Debug|Any CPU.Build.0 = Debug|Any CPU
          		{5AF7A63F-01AE-4BB1-A7FA-D5177AF8FA2D}.Release|Any CPU.ActiveCfg = Release|Any CPU
          		{5AF7A63F-01AE-4BB1-A7FA-D5177AF8FA2D}.Release|Any CPU.Build.0 = Release|Any CPU
          		{39D43940-DFD3-4266-AD2B-E823C65C5483}.Debug|Any CPU.ActiveCfg = Debug|Any CPU
          		{39D43940-DFD3-4266-AD2B-E823C65C5483}.Debug|Any CPU.Build.0 = Debug|Any CPU
          		{39D43940-DFD3-4266-AD2B-E823C65C5483}.Release|Any CPU.ActiveCfg = Release|Any CPU
          		{39D43940-DFD3-4266-AD2B-E823C65C5483}.Release|Any CPU.Build.0 = Release|Any CPU
          		{BF07A16F-0116-4553-B085-E7CF12C8C475}.Debug|Any CPU.ActiveCfg = Debug|Any CPU
          		{BF07A16F-0116-4553-B085-E7CF12C8C475}.Debug|Any CPU.Build.0 = Debug|Any CPU
          		{BF07A16F-0116-4553-B085-E7CF12C8C475}.Release|Any CPU.ActiveCfg = Release|Any CPU
          		{BF07A16F-0116-4553-B085-E7CF12C8C475}.Release|Any CPU.Build.0 = Release|Any CPU
          		{2DB069D5-7CF5-438A-AAD5-3C4E47C52C19}.Debug|Any CPU.ActiveCfg = Debug|Any CPU
          		{2DB069D5-7CF5-438A-AAD5-3C4E47C52C19}.Debug|Any CPU.Build.0 = Debug|Any CPU
          		{2DB069D5-7CF5-438A-AAD5-3C4E47C52C19}.Release|Any CPU.ActiveCfg = Release|Any CPU
          		{2DB069D5-7CF5-438A-AAD5-3C4E47C52C19}.Release|Any CPU.Build.0 = Release|Any CPU
          		{3398FEF9-F2C1-43CB-919B-2D804AA1ABF9}.Debug|Any CPU.ActiveCfg = Debug|Any CPU
          		{3398FEF9-F2C1-43CB-919B-2D804AA1ABF9}.Debug|Any CPU.Build.0 = Debug|Any CPU
          		{3398FEF9-F2C1-43CB-919B-2D804AA1ABF9}.Release|Any CPU.ActiveCfg = Release|Any CPU
          		{3398FEF9-F2C1-43CB-919B-2D804AA1ABF9}.Release|Any CPU.Build.0 = Release|Any CPU
          		{5BAB9716-23EF-42B2-BC0B-2D2F541D56DE}.Debug|Any CPU.ActiveCfg = Debug|Any CPU
          		{5BAB9716-23EF-42B2-BC0B-2D2F541D56DE}.Debug|Any CPU.Build.0 = Debug|Any CPU
          		{5BAB9716-23EF-42B2-BC0B-2D2F541D56DE}.Release|Any CPU.ActiveCfg = Release|Any CPU
          		{5BAB9716-23EF-42B2-BC0B-2D2F541D56DE}.Release|Any CPU.Build.0 = Release|Any CPU
          		{EFA9EE8E-9B8E-4B8A-96C4-3D99CC95A8C1}.Debug|Any CPU.ActiveCfg = Debug|Any CPU
          		{EFA9EE8E-9B8E-4B8A-96C4-3D99CC95A8C1}.Debug|Any CPU.Build.0 = Debug|Any CPU
          		{EFA9EE8E-9B8E-4B8A-96C4-3D99CC95A8C1}.Release|Any CPU.ActiveCfg = Release|Any CPU
          		{EFA9EE8E-9B8E-4B8A-96C4-3D99CC95A8C1}.Release|Any CPU.Build.0 = Release|Any CPU
          		{EA48E529-EFCC-4827-9300-1757DB6F186A}.Debug|Any CPU.ActiveCfg = Debug|Any CPU
          		{EA48E529-EFCC-4827-9300-1757DB6F186A}.Debug|Any CPU.Build.0 = Debug|Any CPU
          		{EA48E529-EFCC-4827-9300-1757DB6F186A}.Release|Any CPU.ActiveCfg = Release|Any CPU
          		{EA48E529-EFCC-4827-9300-1757DB6F186A}.Release|Any CPU.Build.0 = Release|Any CPU
          		{7E991522-8BED-4BBF-BDA4-C20101F822B4}.Debug|Any CPU.ActiveCfg = Debug|Any CPU
          		{7E991522-8BED-4BBF-BDA4-C20101F822B4}.Debug|Any CPU.Build.0 = Debug|Any CPU
          		{7E991522-8BED-4BBF-BDA4-C20101F822B4}.Release|Any CPU.ActiveCfg = Release|Any CPU
          		{7E991522-8BED-4BBF-BDA4-C20101F822B4}.Release|Any CPU.Build.0 = Release|Any CPU
          		{53BFFE96-C81E-480D-9A3E-A74556F28228}.Debug|Any CPU.ActiveCfg = Debug|Any CPU
          		{53BFFE96-C81E-480D-9A3E-A74556F28228}.Debug|Any CPU.Build.0 = Debug|Any CPU
          		{53BFFE96-C81E-480D-9A3E-A74556F28228}.Release|Any CPU.ActiveCfg = Release|Any CPU
          		{53BFFE96-C81E-480D-9A3E-A74556F28228}.Release|Any CPU.Build.0 = Release|Any CPU
          		{9BD18DE5-BF09-4089-BD25-52E481B4CD16}.Debug|Any CPU.ActiveCfg = Debug|Any CPU
          		{9BD18DE5-BF09-4089-BD25-52E481B4CD16}.Debug|Any CPU.Build.0 = Debug|Any CPU
          		{9BD18DE5-BF09-4089-BD25-52E481B4CD16}.Release|Any CPU.ActiveCfg = Release|Any CPU
          		{9BD18DE5-BF09-4089-BD25-52E481B4CD16}.Release|Any CPU.Build.0 = Release|Any CPU
          		{B585B325-BB7B-4D38-AFBB-73056779FDB0}.Debug|Any CPU.ActiveCfg = Debug|Any CPU
          		{B585B325-BB7B-4D38-AFBB-73056779FDB0}.Debug|Any CPU.Build.0 = Debug|Any CPU
          		{B585B325-BB7B-4D38-AFBB-73056779FDB0}.Release|Any CPU.ActiveCfg = Release|Any CPU
          		{B585B325-BB7B-4D38-AFBB-73056779FDB0}.Release|Any CPU.Build.0 = Release|Any CPU
          		{F25D88DF-ABE5-40AD-B9C9-BE15D8ED8C95}.Debug|Any CPU.ActiveCfg = Debug|Any CPU
          		{F25D88DF-ABE5-40AD-B9C9-BE15D8ED8C95}.Debug|Any CPU.Build.0 = Debug|Any CPU
          		{F25D88DF-ABE5-40AD-B9C9-BE15D8ED8C95}.Release|Any CPU.ActiveCfg = Release|Any CPU
          		{F25D88DF-ABE5-40AD-B9C9-BE15D8ED8C95}.Release|Any CPU.Build.0 = Release|Any CPU
          		{43273F3B-32F4-402C-9F24-A65EC40D7DD6}.Debug|Any CPU.ActiveCfg = Debug|Any CPU
          		{43273F3B-32F4-402C-9F24-A65EC40D7DD6}.Debug|Any CPU.Build.0 = Debug|Any CPU
          		{43273F3B-32F4-402C-9F24-A65EC40D7DD6}.Release|Any CPU.ActiveCfg = Release|Any CPU
          		{43273F3B-32F4-402C-9F24-A65EC40D7DD6}.Release|Any CPU.Build.0 = Release|Any CPU
          		{7A7478A6-80E8-4D7F-81A7-BD31003179C5}.Debug|Any CPU.ActiveCfg = Debug|Any CPU
          		{7A7478A6-80E8-4D7F-81A7-BD31003179C5}.Debug|Any CPU.Build.0 = Debug|Any CPU
          		{7A7478A6-80E8-4D7F-81A7-BD31003179C5}.Release|Any CPU.ActiveCfg = Release|Any CPU
          		{7A7478A6-80E8-4D7F-81A7-BD31003179C5}.Release|Any CPU.Build.0 = Release|Any CPU
          		{9A2037BB-8048-443C-9975-74EF4BE10EE0}.Debug|Any CPU.ActiveCfg = Debug|Any CPU
          		{9A2037BB-8048-443C-9975-74EF4BE10EE0}.Debug|Any CPU.Build.0 = Debug|Any CPU
          		{9A2037BB-8048-443C-9975-74EF4BE10EE0}.Release|Any CPU.ActiveCfg = Release|Any CPU
          		{9A2037BB-8048-443C-9975-74EF4BE10EE0}.Release|Any CPU.Build.0 = Release|Any CPU
          		{D02E42FF-5780-4B04-A9B6-6C4B303C980A}.Debug|Any CPU.ActiveCfg = Debug|Any CPU
          		{D02E42FF-5780-4B04-A9B6-6C4B303C980A}.Debug|Any CPU.Build.0 = Debug|Any CPU
          		{D02E42FF-5780-4B04-A9B6-6C4B303C980A}.Release|Any CPU.ActiveCfg = Release|Any CPU
          		{D02E42FF-5780-4B04-A9B6-6C4B303C980A}.Release|Any CPU.Build.0 = Release|Any CPU
          		{11E44CF0-24C0-41B3-9011-95CF71694BB0}.Debug|Any CPU.ActiveCfg = Debug|Any CPU
          		{11E44CF0-24C0-41B3-9011-95CF71694BB0}.Debug|Any CPU.Build.0 = Debug|Any CPU
          		{11E44CF0-24C0-41B3-9011-95CF71694BB0}.Release|Any CPU.ActiveCfg = Release|Any CPU
          		{11E44CF0-24C0-41B3-9011-95CF71694BB0}.Release|Any CPU.Build.0 = Release|Any CPU
          		{D4B5D509-A233-471D-B7B8-38B51CE44CD9}.Debug|Any CPU.ActiveCfg = Debug|Any CPU
          		{D4B5D509-A233-471D-B7B8-38B51CE44CD9}.Debug|Any CPU.Build.0 = Debug|Any CPU
          		{D4B5D509-A233-471D-B7B8-38B51CE44CD9}.Release|Any CPU.ActiveCfg = Release|Any CPU
          		{D4B5D509-A233-471D-B7B8-38B51CE44CD9}.Release|Any CPU.Build.0 = Release|Any CPU
          		{F3CBF083-D0F5-469F-A80F-76377FE86E61}.Debug|Any CPU.ActiveCfg = Debug|Any CPU
          		{F3CBF083-D0F5-469F-A80F-76377FE86E61}.Debug|Any CPU.Build.0 = Debug|Any CPU
          		{F3CBF083-D0F5-469F-A80F-76377FE86E61}.Release|Any CPU.ActiveCfg = Release|Any CPU
          		{F3CBF083-D0F5-469F-A80F-76377FE86E61}.Release|Any CPU.Build.0 = Release|Any CPU
          		{6E8171A4-6545-443E-B716-52E695142837}.Debug|Any CPU.ActiveCfg = Debug|Any CPU
          		{6E8171A4-6545-443E-B716-52E695142837}.Debug|Any CPU.Build.0 = Debug|Any CPU
          		{6E8171A4-6545-443E-B716-52E695142837}.Release|Any CPU.ActiveCfg = Release|Any CPU
          		{6E8171A4-6545-443E-B716-52E695142837}.Release|Any CPU.Build.0 = Release|Any CPU
          		{4F8CBF12-1E42-47CA-85A1-286FE455B1D3}.Debug|Any CPU.ActiveCfg = Debug|Any CPU
          		{4F8CBF12-1E42-47CA-85A1-286FE455B1D3}.Debug|Any CPU.Build.0 = Debug|Any CPU
          		{4F8CBF12-1E42-47CA-85A1-286FE455B1D3}.Release|Any CPU.ActiveCfg = Release|Any CPU
          		{4F8CBF12-1E42-47CA-85A1-286FE455B1D3}.Release|Any CPU.Build.0 = Release|Any CPU
          		{1834042A-B1D5-4FF3-8459-8BA57A18E9D7}.Debug|Any CPU.ActiveCfg = Debug|Any CPU
          		{1834042A-B1D5-4FF3-8459-8BA57A18E9D7}.Debug|Any CPU.Build.0 = Debug|Any CPU
          		{1834042A-B1D5-4FF3-8459-8BA57A18E9D7}.Release|Any CPU.ActiveCfg = Release|Any CPU
          		{1834042A-B1D5-4FF3-8459-8BA57A18E9D7}.Release|Any CPU.Build.0 = Release|Any CPU
          		{1468A021-9F1A-4F89-8BAA-D9D2D9830785}.Debug|Any CPU.ActiveCfg = Debug|Any CPU
          		{1468A021-9F1A-4F89-8BAA-D9D2D9830785}.Debug|Any CPU.Build.0 = Debug|Any CPU
          		{1468A021-9F1A-4F89-8BAA-D9D2D9830785}.Release|Any CPU.ActiveCfg = Release|Any CPU
          		{1468A021-9F1A-4F89-8BAA-D9D2D9830785}.Release|Any CPU.Build.0 = Release|Any CPU
          		{8391174B-5E64-4475-A066-18CFFDD58209}.Debug|Any CPU.ActiveCfg = Debug|Any CPU
          		{8391174B-5E64-4475-A066-18CFFDD58209}.Debug|Any CPU.Build.0 = Debug|Any CPU
          		{8391174B-5E64-4475-A066-18CFFDD58209}.Release|Any CPU.ActiveCfg = Release|Any CPU
          		{8391174B-5E64-4475-A066-18CFFDD58209}.Release|Any CPU.Build.0 = Release|Any CPU
          		{DC1C3CA6-C3EC-432D-8CA3-166D5824DF27}.Debug|Any CPU.ActiveCfg = Debug|Any CPU
          		{DC1C3CA6-C3EC-432D-8CA3-166D5824DF27}.Debug|Any CPU.Build.0 = Debug|Any CPU
          		{DC1C3CA6-C3EC-432D-8CA3-166D5824DF27}.Release|Any CPU.ActiveCfg = Release|Any CPU
          		{DC1C3CA6-C3EC-432D-8CA3-166D5824DF27}.Release|Any CPU.Build.0 = Release|Any CPU
          		{942D5489-CF3B-45E2-A694-5711B4066602}.Debug|Any CPU.ActiveCfg = Debug|Any CPU
          		{942D5489-CF3B-45E2-A694-5711B4066602}.Debug|Any CPU.Build.0 = Debug|Any CPU
          		{942D5489-CF3B-45E2-A694-5711B4066602}.Release|Any CPU.ActiveCfg = Release|Any CPU
          		{942D5489-CF3B-45E2-A694-5711B4066602}.Release|Any CPU.Build.0 = Release|Any CPU
          		{9FA55AF4-E6F7-DFA3-7787-C4619E2227C0}.Debug|Any CPU.ActiveCfg = Debug|Any CPU
          		{9FA55AF4-E6F7-DFA3-7787-C4619E2227C0}.Debug|Any CPU.Build.0 = Debug|Any CPU
          		{9FA55AF4-E6F7-DFA3-7787-C4619E2227C0}.Release|Any CPU.ActiveCfg = Release|Any CPU
          		{9FA55AF4-E6F7-DFA3-7787-C4619E2227C0}.Release|Any CPU.Build.0 = Release|Any CPU
          		{1D9D4740-82B3-4DDE-8361-FA49B297337D}.Debug|Any CPU.ActiveCfg = Debug|Any CPU
          		{1D9D4740-82B3-4DDE-8361-FA49B297337D}.Debug|Any CPU.Build.0 = Debug|Any CPU
          		{1D9D4740-82B3-4DDE-8361-FA49B297337D}.Release|Any CPU.ActiveCfg = Release|Any CPU
          		{1D9D4740-82B3-4DDE-8361-FA49B297337D}.Release|Any CPU.Build.0 = Release|Any CPU
          		{2E03F246-ECCF-479F-BCE3-D2E6C0E50F47}.Debug|Any CPU.ActiveCfg = Debug|Any CPU
          		{2E03F246-ECCF-479F-BCE3-D2E6C0E50F47}.Debug|Any CPU.Build.0 = Debug|Any CPU
          		{2E03F246-ECCF-479F-BCE3-D2E6C0E50F47}.Release|Any CPU.ActiveCfg = Release|Any CPU
          		{2E03F246-ECCF-479F-BCE3-D2E6C0E50F47}.Release|Any CPU.Build.0 = Release|Any CPU
          		{D8B95EF6-8198-1851-D350-2DEC5CA9A7EF}.Debug|Any CPU.ActiveCfg = Debug|Any CPU
          		{D8B95EF6-8198-1851-D350-2DEC5CA9A7EF}.Debug|Any CPU.Build.0 = Debug|Any CPU
          		{D8B95EF6-8198-1851-D350-2DEC5CA9A7EF}.Release|Any CPU.ActiveCfg = Release|Any CPU
          		{D8B95EF6-8198-1851-D350-2DEC5CA9A7EF}.Release|Any CPU.Build.0 = Release|Any CPU
          		{B386CABF-E864-C0B2-76E1-EA61F9FD3418}.Debug|Any CPU.ActiveCfg = Debug|Any CPU
          		{B386CABF-E864-C0B2-76E1-EA61F9FD3418}.Debug|Any CPU.Build.0 = Debug|Any CPU
          		{B386CABF-E864-C0B2-76E1-EA61F9FD3418}.Release|Any CPU.ActiveCfg = Release|Any CPU
          		{B386CABF-E864-C0B2-76E1-EA61F9FD3418}.Release|Any CPU.Build.0 = Release|Any CPU
          		{4A5656DE-1F3F-45CD-AD25-91B328035E33}.Debug|Any CPU.ActiveCfg = Debug|Any CPU
          		{4A5656DE-1F3F-45CD-AD25-91B328035E33}.Debug|Any CPU.Build.0 = Debug|Any CPU
          		{4A5656DE-1F3F-45CD-AD25-91B328035E33}.Release|Any CPU.ActiveCfg = Release|Any CPU
          		{4A5656DE-1F3F-45CD-AD25-91B328035E33}.Release|Any CPU.Build.0 = Release|Any CPU
          		{3344B8FD-D780-4109-A2AC-C0BDEC64408F}.Debug|Any CPU.ActiveCfg = Debug|Any CPU
          		{3344B8FD-D780-4109-A2AC-C0BDEC64408F}.Debug|Any CPU.Build.0 = Debug|Any CPU
          		{3344B8FD-D780-4109-A2AC-C0BDEC64408F}.Release|Any CPU.ActiveCfg = Release|Any CPU
          		{3344B8FD-D780-4109-A2AC-C0BDEC64408F}.Release|Any CPU.Build.0 = Release|Any CPU
          	EndGlobalSection
          	GlobalSection(SolutionProperties) = preSolution
          		HideSolutionNode = FALSE
          	EndGlobalSection
          	GlobalSection(NestedProjects) = preSolution
          		{6016AAE7-6775-4DEB-9EF1-468975575705} = {89504F29-1D94-4565-A145-EE3EF35EC397}
          		{EC19DF8E-D99A-42FD-99E8-68E3578139F3} = {89504F29-1D94-4565-A145-EE3EF35EC397}
          		{76A5436E-C08C-44F7-9FBD-8879A069BC29} = {FD028703-F68E-4DF4-B980-ECDCD6B98272}
          		{738859B7-CE24-47EB-A50E-7F5BDD7E9855} = {FD028703-F68E-4DF4-B980-ECDCD6B98272}
          		{EF220141-1ED5-4991-9213-FC41EB034C42} = {FD028703-F68E-4DF4-B980-ECDCD6B98272}
          		{78CDE71B-267F-411B-9665-923A11CAB6E7} = {FD028703-F68E-4DF4-B980-ECDCD6B98272}
          		{C7EDD1BE-FB9B-4D14-AF9A-2B666526A0C3} = {FD028703-F68E-4DF4-B980-ECDCD6B98272}
          		{F88704EB-EBE7-438E-9DC8-C8A1A1035409} = {B09A448F-399B-430F-8918-881E1255A3D8}
          		{F707E03F-98B9-4F4E-A956-BFE53B14E6AE} = {79F52185-0D84-4D03-AD20-AFE0AC36A2DC}
          		{9FCB3D87-0EC8-424D-B649-C8B066E1B46A} = {79F52185-0D84-4D03-AD20-AFE0AC36A2DC}
          		{7AB09DAD-7878-4C92-B1ED-E41060C9D6D5} = {79F52185-0D84-4D03-AD20-AFE0AC36A2DC}
          		{35341761-B87D-475E-AB08-7AD94D057302} = {79F52185-0D84-4D03-AD20-AFE0AC36A2DC}
          		{FA6AC8C4-ACD9-4B48-91ED-4A1A4683AB34} = {79F52185-0D84-4D03-AD20-AFE0AC36A2DC}
          		{24C4ABC3-20D3-4C73-9543-C94E8467EB76} = {89960A29-7440-402F-8A9A-237EF084578D}
          		{C2B1BCCC-8CDE-46E3-B135-D911430C4696} = {89960A29-7440-402F-8A9A-237EF084578D}
          		{0134FF52-D9DD-4109-95A3-30C434B2A35D} = {7B07B7C3-9509-47BF-ACA9-E6BD82FD40E7}
          		{1ED80402-DA13-4409-9170-55C50261E97A} = {7B07B7C3-9509-47BF-ACA9-E6BD82FD40E7}
          		{5AF7A63F-01AE-4BB1-A7FA-D5177AF8FA2D} = {7B07B7C3-9509-47BF-ACA9-E6BD82FD40E7}
          		{39D43940-DFD3-4266-AD2B-E823C65C5483} = {7B07B7C3-9509-47BF-ACA9-E6BD82FD40E7}
          		{BF07A16F-0116-4553-B085-E7CF12C8C475} = {AD9B660B-589A-4FE5-9891-ED04AECFE232}
          		{2DB069D5-7CF5-438A-AAD5-3C4E47C52C19} = {AD9B660B-589A-4FE5-9891-ED04AECFE232}
          		{3398FEF9-F2C1-43CB-919B-2D804AA1ABF9} = {AD9B660B-589A-4FE5-9891-ED04AECFE232}
          		{5BAB9716-23EF-42B2-BC0B-2D2F541D56DE} = {AD9B660B-589A-4FE5-9891-ED04AECFE232}
          		{EFA9EE8E-9B8E-4B8A-96C4-3D99CC95A8C1} = {C3BD3AE4-FA31-4C94-A585-5C09DD2288A5}
          		{EA48E529-EFCC-4827-9300-1757DB6F186A} = {C3BD3AE4-FA31-4C94-A585-5C09DD2288A5}
          		{7E991522-8BED-4BBF-BDA4-C20101F822B4} = {C3BD3AE4-FA31-4C94-A585-5C09DD2288A5}
          		{53BFFE96-C81E-480D-9A3E-A74556F28228} = {C3BD3AE4-FA31-4C94-A585-5C09DD2288A5}
          		{9BD18DE5-BF09-4089-BD25-52E481B4CD16} = {C3BD3AE4-FA31-4C94-A585-5C09DD2288A5}
          		{B585B325-BB7B-4D38-AFBB-73056779FDB0} = {AF32442F-C14C-4000-8D33-9D7695DB6E59}
          		{F25D88DF-ABE5-40AD-B9C9-BE15D8ED8C95} = {AF32442F-C14C-4000-8D33-9D7695DB6E59}
          		{43273F3B-32F4-402C-9F24-A65EC40D7DD6} = {81A6F2A5-AA3F-417F-BBE3-C6353CC18548}
          		{7A7478A6-80E8-4D7F-81A7-BD31003179C5} = {81A6F2A5-AA3F-417F-BBE3-C6353CC18548}
          		{9A2037BB-8048-443C-9975-74EF4BE10EE0} = {81A6F2A5-AA3F-417F-BBE3-C6353CC18548}
          		{D02E42FF-5780-4B04-A9B6-6C4B303C980A} = {81A6F2A5-AA3F-417F-BBE3-C6353CC18548}
          		{11E44CF0-24C0-41B3-9011-95CF71694BB0} = {81A6F2A5-AA3F-417F-BBE3-C6353CC18548}
          		{D4B5D509-A233-471D-B7B8-38B51CE44CD9} = {7BEB06B9-8E76-4CAE-8A65-B562B3907E02}
          		{F3CBF083-D0F5-469F-A80F-76377FE86E61} = {7BEB06B9-8E76-4CAE-8A65-B562B3907E02}
          		{6E8171A4-6545-443E-B716-52E695142837} = {A671E38D-1C7E-4BE9-A940-41C3F6FC8C16}
          		{4F8CBF12-1E42-47CA-85A1-286FE455B1D3} = {A671E38D-1C7E-4BE9-A940-41C3F6FC8C16}
          		{1834042A-B1D5-4FF3-8459-8BA57A18E9D7} = {A671E38D-1C7E-4BE9-A940-41C3F6FC8C16}
          		{1468A021-9F1A-4F89-8BAA-D9D2D9830785} = {A671E38D-1C7E-4BE9-A940-41C3F6FC8C16}
          		{8391174B-5E64-4475-A066-18CFFDD58209} = {A671E38D-1C7E-4BE9-A940-41C3F6FC8C16}
          		{6025D545-6A88-437E-A251-53E74A2A1904} = {323C84A9-4776-4DB2-A89A-3D4A7E88079D}
          		{89504F29-1D94-4565-A145-EE3EF35EC397} = {6025D545-6A88-437E-A251-53E74A2A1904}
          		{FD028703-F68E-4DF4-B980-ECDCD6B98272} = {6025D545-6A88-437E-A251-53E74A2A1904}
          		{B09A448F-399B-430F-8918-881E1255A3D8} = {6025D545-6A88-437E-A251-53E74A2A1904}
          		{79F52185-0D84-4D03-AD20-AFE0AC36A2DC} = {6025D545-6A88-437E-A251-53E74A2A1904}
          		{89960A29-7440-402F-8A9A-237EF084578D} = {6025D545-6A88-437E-A251-53E74A2A1904}
          		{7B07B7C3-9509-47BF-ACA9-E6BD82FD40E7} = {6025D545-6A88-437E-A251-53E74A2A1904}
          		{B96B327A-7BA5-461B-B35D-5B1EFAEADA96} = {48B8C347-B383-47F7-8216-56AFB3CE0962}
          		{AD9B660B-589A-4FE5-9891-ED04AECFE232} = {B96B327A-7BA5-461B-B35D-5B1EFAEADA96}
          		{C3BD3AE4-FA31-4C94-A585-5C09DD2288A5} = {B96B327A-7BA5-461B-B35D-5B1EFAEADA96}
          		{AF32442F-C14C-4000-8D33-9D7695DB6E59} = {B96B327A-7BA5-461B-B35D-5B1EFAEADA96}
          		{81A6F2A5-AA3F-417F-BBE3-C6353CC18548} = {B96B327A-7BA5-461B-B35D-5B1EFAEADA96}
          		{7BEB06B9-8E76-4CAE-8A65-B562B3907E02} = {B96B327A-7BA5-461B-B35D-5B1EFAEADA96}
          		{A671E38D-1C7E-4BE9-A940-41C3F6FC8C16} = {B96B327A-7BA5-461B-B35D-5B1EFAEADA96}
          		{6C83A596-D32D-B35F-00DD-F0C99B673980} = {B96B327A-7BA5-461B-B35D-5B1EFAEADA96}
          		{DC1C3CA6-C3EC-432D-8CA3-166D5824DF27} = {A671E38D-1C7E-4BE9-A940-41C3F6FC8C16}
          		{942D5489-CF3B-45E2-A694-5711B4066602} = {7B07B7C3-9509-47BF-ACA9-E6BD82FD40E7}
          		{9FA55AF4-E6F7-DFA3-7787-C4619E2227C0} = {7B07B7C3-9509-47BF-ACA9-E6BD82FD40E7}
          		{1D9D4740-82B3-4DDE-8361-FA49B297337D} = {89504F29-1D94-4565-A145-EE3EF35EC397}
          		{2E03F246-ECCF-479F-BCE3-D2E6C0E50F47} = {89504F29-1D94-4565-A145-EE3EF35EC397}
          		{D8B95EF6-8198-1851-D350-2DEC5CA9A7EF} = {AD9B660B-589A-4FE5-9891-ED04AECFE232}
          		{B386CABF-E864-C0B2-76E1-EA61F9FD3418} = {89504F29-1D94-4565-A145-EE3EF35EC397}
          		{4A5656DE-1F3F-45CD-AD25-91B328035E33} = {6C83A596-D32D-B35F-00DD-F0C99B673980}
          		{3344B8FD-D780-4109-A2AC-C0BDEC64408F} = {920B7032-53EE-47C0-B59F-E0C0BCB6F661}
          		{920B7032-53EE-47C0-B59F-E0C0BCB6F661} = {6025D545-6A88-437E-A251-53E74A2A1904}
          	EndGlobalSection
          	GlobalSection(ExtensibilityGlobals) = postSolution
          		SolutionGuid = {5D75F05F-2182-46C8-B043-72ACD0DE4F5B}
          	EndGlobalSection
          EndGlobal
        </File>
      </Folder>
      <Folder Name="Tests">
        <Folder Name="Libraries">
          <Folder Name="Caching">
            <Folder Name="FlexCore.Caching.Common.Tests">
              <File Name="CacheExceptionHandlerTests.cs" MIME="text/plain" Encoding="utf_8" BOM="True">
                ﻿using Xunit;
                using FlexCore.Caching.Common.Handlers;
                using FlexCore.Caching.Common.Exceptions;
                using System;
                
                namespace FlexCore.Caching.Common.Tests;
                
                public class CacheExceptionHandlerTests
                {
                    [Fact]
                    public void HandleException_ThrowsCacheException_ForGenericException()
                    {
                        var exception = new Exception("Generic error");
                        Assert.Throws&lt;CacheException&gt;(() =&gt; CacheExceptionHandler.HandleException(exception, "operation"));
                    }
                
                    [Fact]
                    public void HandleException_ThrowsCacheException_ForRedisCacheException()
                    {
                        var exception = new RedisCacheException("Redis error");
                        var ex = Assert.Throws&lt;CacheException&gt;(() =&gt; CacheExceptionHandler.HandleException(exception, "operation"));
                        Assert.Contains("Redis", ex.Message);
                    }
                
                    [Fact]
                    public void HandleException_ThrowsCacheException_ForMemoryCacheException()
                    {
                        var exception = new MemoryCacheException("Memory error");
                        var ex = Assert.Throws&lt;CacheException&gt;(() =&gt; CacheExceptionHandler.HandleException(exception, "operation"));
                        Assert.Contains("memoria", ex.Message);
                    }
                }
              </File>
              <File Name="CacheExceptionTests.cs" MIME="text/plain" Encoding="utf_8" BOM="True">
                ﻿namespace FlexCore.Caching.Common.Tests;
                
                using FlexCore.Caching.Common.Exceptions;
                using System;
                using Xunit;
                
                public class CacheExceptionTests
                {
                    [Fact]
                    public void CacheException_Constructor_WithMessage()
                    {
                        var message = "Test exception";
                        var exception = new CacheException(message);
                        Assert.Equal(message, exception.Message);
                    }
                
                    [Fact]
                    public void CacheException_Constructor_WithMessageAndInnerException()
                    {
                        var message = "Test exception";
                        var innerException = new Exception("Inner exception");
                        var exception = new CacheException(message, innerException);
                        Assert.Equal(message, exception.Message);
                        Assert.Equal(innerException, exception.InnerException);
                    }
                }
              </File>
              <File Name="CacheKeyValidatorTests.cs" MIME="text/plain" Encoding="utf_8" BOM="True">
                ﻿using Xunit;
                using System;
                using FlexCore.Caching.Common.Validators;
                using FlexCore.Caching.Factory;
                using FlexCore.Caching.Interfaces;
                
                namespace FlexCore.Caching.Common.Tests;
                
                public class CacheKeyValidatorTests
                {
                    [Fact]
                    public void ValidateKey_ThrowsArgumentException_WhenKeyIsNullOrEmpty()
                    {
                        Assert.Throws&lt;ArgumentException&gt;(() =&gt; CacheKeyValidator.ValidateKey(null!));
                        Assert.Throws&lt;ArgumentException&gt;(() =&gt; CacheKeyValidator.ValidateKey(""));
                        Assert.Throws&lt;ArgumentException&gt;(() =&gt; CacheKeyValidator.ValidateKey("   "));
                    }
                
                    [Fact]
                    public void ValidateKey_DoesNotThrow_WhenKeyIsValid()
                    {
                        var exception = Record.Exception(() =&gt; CacheKeyValidator.ValidateKey("valid_key"));
                        Assert.Null(exception);
                    }
                
                    [Fact]
                    public void RegisterProvider_ThrowsArgumentNullException_WhenProviderFactoryIsNull()
                    {
                        var factory = new CacheProviderFactory();
                        Func&lt;ICacheProvider&gt;? providerFactory = null!;
                        Assert.Throws&lt;ArgumentNullException&gt;(() =&gt; factory.RegisterProvider("test", providerFactory!));
                    }
                }
              </File>
              <File Name="FlexCore.Caching.Common.Tests.csproj" MIME="application/xml" Encoding="utf_8" BOM="True">
                ﻿&lt;?xml version="1.0" encoding="utf-8"?&gt;
                &lt;Project Sdk="Microsoft.NET.Sdk"&gt;
                
                	&lt;PropertyGroup&gt;
                		&lt;TargetFramework&gt;net9.0&lt;/TargetFramework&gt;
                		&lt;ImplicitUsings&gt;enable&lt;/ImplicitUsings&gt;
                		&lt;Nullable&gt;enable&lt;/Nullable&gt;
                		&lt;IsPackable&gt;false&lt;/IsPackable&gt;
                	&lt;/PropertyGroup&gt;
                
                	&lt;ItemGroup&gt;
                		&lt;PackageReference Include="coverlet.collector" Version="6.0.4"&gt;
                			&lt;PrivateAssets&gt;all&lt;/PrivateAssets&gt;
                			&lt;IncludeAssets&gt;runtime; build; native; contentfiles; analyzers; buildtransitive&lt;/IncludeAssets&gt;
                		&lt;/PackageReference&gt;
                		&lt;PackageReference Include="Microsoft.NET.Test.Sdk" Version="17.13.0" /&gt;
                		&lt;PackageReference Include="xunit" Version="2.9.3" /&gt;
                		&lt;PackageReference Include="xunit.runner.visualstudio" Version="3.0.2"&gt;
                			&lt;PrivateAssets&gt;all&lt;/PrivateAssets&gt;
                			&lt;IncludeAssets&gt;runtime; build; native; contentfiles; analyzers; buildtransitive&lt;/IncludeAssets&gt;
                		&lt;/PackageReference&gt;
                	&lt;/ItemGroup&gt;
                
                	&lt;ItemGroup&gt;
                	  &lt;ProjectReference Include="..\..\..\..\Projects\Libraries\Caching\FlexCore.Caching.Common\FlexCore.Caching.Common.csproj" /&gt;
                	  &lt;ProjectReference Include="..\..\..\..\Projects\Libraries\Caching\FlexCore.Caching.Factory\FlexCore.Caching.Factory.csproj" /&gt;
                	&lt;/ItemGroup&gt;
                
                	&lt;ItemGroup&gt;
                		&lt;Using Include="Xunit" /&gt;
                	&lt;/ItemGroup&gt;
                
                &lt;/Project&gt;
              </File>
            </Folder>
            <Folder Name="FlexCore.Caching.Core.Tests">
              <File Name="BaseCacheManagerTests.cs" MIME="text/plain" Encoding="utf_8" BOM="True">
                ﻿namespace FlexCore.Caching.Core.Tests;
                
                using Xunit;
                using FlexCore.Caching.Core;
                using FlexCore.Caching.Interfaces;
                using System;
                using System.Collections.Generic;
                
                public class BaseCacheManagerTests
                {
                    [Fact]
                    public void Get_ReturnsDefault_WhenKeyNotExists()
                    {
                        var cacheManager = new TestCacheManager();
                        var result = cacheManager.Get&lt;string&gt;("nonexistent_key");
                        Assert.Null(result);
                    }
                
                    [Fact]
                    public void Set_AddsValueToCache()
                    {
                        var cacheManager = new TestCacheManager();
                        cacheManager.Set("key", "value", TimeSpan.FromMinutes(1));
                        var result = cacheManager.Get&lt;string&gt;("key");
                        Assert.Equal("value", result);
                    }
                
                    [Fact]
                    public void Remove_DeletesValueFromCache()
                    {
                        var cacheManager = new TestCacheManager();
                        cacheManager.Set("key", "value", TimeSpan.FromMinutes(1));
                        cacheManager.Remove("key");
                        var result = cacheManager.Get&lt;string&gt;("key");
                        Assert.Null(result);
                    }
                
                    [Fact]
                    public void Exists_ReturnsTrue_WhenKeyExists()
                    {
                        var cacheManager = new TestCacheManager();
                        cacheManager.Set("key", "value", TimeSpan.FromMinutes(1));
                        Assert.True(cacheManager.Exists("key"));
                    }
                
                    private class TestCacheManager : BaseCacheManager
                    {
                        private readonly Dictionary&lt;string, object&gt; _cache = new();
                
                        public override T Get&lt;T&gt;(string key) =&gt; _cache.ContainsKey(key) ? (T)_cache[key] : default!;
                
                        public override void Set&lt;T&gt;(string key, T value, TimeSpan expiration)
                        {
                            if (value is null) throw new ArgumentNullException(nameof(value), "Il valore non può essere null.");
                            _cache[key] = value;
                        }
                
                        public override void Remove(string key) =&gt; _cache.Remove(key);
                
                        public override bool Exists(string key) =&gt; _cache.ContainsKey(key);
                    }
                }
              </File>
              <File Name="CacheExceptionTests.cs" MIME="text/plain" Encoding="utf_8" BOM="True">
                ﻿using Xunit;
                using FlexCore.Caching.Common.Exceptions;
                
                namespace FlexCore.Caching.Common.Tests;
                
                public class CacheExceptionTests
                {
                    [Fact]
                    public void CacheException_InitializesWithMessage()
                    {
                        var exception = new CacheException("Test message");
                        Assert.Equal("Test message", exception.Message);
                    }
                
                    [Fact]
                    public void CacheException_InitializesWithMessageAndInnerException()
                    {
                        var innerException = new Exception("Inner exception");
                        var exception = new CacheException("Test message", innerException);
                        Assert.Equal("Test message", exception.Message);
                        Assert.Equal(innerException, exception.InnerException);
                    }
                
                    [Fact]
                    public void MemoryCacheException_InitializesWithMessage()
                    {
                        var exception = new MemoryCacheException("Test message");
                        Assert.Equal("Test message", exception.Message);
                    }
                
                    [Fact]
                    public void MemoryCacheException_InitializesWithMessageAndInnerException()
                    {
                        var innerException = new Exception("Inner exception");
                        var exception = new MemoryCacheException("Test message", innerException);
                        Assert.Equal("Test message", exception.Message);
                        Assert.Equal(innerException, exception.InnerException);
                    }
                
                    [Fact]
                    public void RedisCacheException_InitializesWithMessage()
                    {
                        var exception = new RedisCacheException("Test message");
                        Assert.Equal("Test message", exception.Message);
                    }
                
                    [Fact]
                    public void RedisCacheException_InitializesWithMessageAndInnerException()
                    {
                        var innerException = new Exception("Inner exception");
                        var exception = new RedisCacheException("Test message", innerException);
                        Assert.Equal("Test message", exception.Message);
                        Assert.Equal(innerException, exception.InnerException);
                    }
                }
              </File>
              <File Name="FlexCore.Caching.Core.Tests.csproj" MIME="application/xml" Encoding="utf_8">
                &lt;?xml version='1.0' encoding='utf-8'?&gt;
                &lt;Project Sdk="Microsoft.NET.Sdk"&gt;
                
                  &lt;PropertyGroup&gt;
                    &lt;TargetFramework&gt;net9.0&lt;/TargetFramework&gt;
                    &lt;ImplicitUsings&gt;enable&lt;/ImplicitUsings&gt;
                    &lt;Nullable&gt;enable&lt;/Nullable&gt;
                    &lt;IsPackable&gt;false&lt;/IsPackable&gt;
                  &lt;/PropertyGroup&gt;
                
                  &lt;ItemGroup&gt;
                    &lt;PackageReference Include="coverlet.collector" Version="6.0.4"&gt;
                      &lt;PrivateAssets&gt;all&lt;/PrivateAssets&gt;
                      &lt;IncludeAssets&gt;runtime; build; native; contentfiles; analyzers; buildtransitive&lt;/IncludeAssets&gt;
                    &lt;/PackageReference&gt;
                    &lt;PackageReference Include="Microsoft.NET.Test.Sdk" Version="17.13.0" /&gt;
                    &lt;PackageReference Include="xunit" Version="2.9.3" /&gt;
                    &lt;PackageReference Include="xunit.runner.visualstudio" Version="3.0.2"&gt;
                      &lt;PrivateAssets&gt;all&lt;/PrivateAssets&gt;
                      &lt;IncludeAssets&gt;runtime; build; native; contentfiles; analyzers; buildtransitive&lt;/IncludeAssets&gt;
                    &lt;/PackageReference&gt;
                  &lt;/ItemGroup&gt;
                
                  &lt;ItemGroup&gt;
                    &lt;ProjectReference Include="../../../../Projects/Libraries/Caching/FlexCore.Caching.Core/FlexCore.Caching.Core.csproj" /&gt;
                    &lt;ProjectReference Include="../../../../Projects/Libraries/Caching/FlexCore.Caching.Interfaces/FlexCore.Caching.Interfaces.csproj" /&gt;
                  &lt;/ItemGroup&gt;
                
                  &lt;ItemGroup&gt;
                    &lt;Using Include="Xunit" /&gt;
                  &lt;/ItemGroup&gt;
                
                &lt;/Project&gt;
              </File>
            </Folder>
            <Folder Name="FlexCore.Caching.Factory.Tests">
              <File Name="CacheProviderFactoryTests.cs" MIME="text/plain" Encoding="utf_8" BOM="True">
                ﻿namespace FlexCore.Caching.Factory.Tests
                {
                    using Xunit;
                    using FlexCore.Caching.Factory;
                    using FlexCore.Caching.Interfaces;
                    using System;
                    using System.Collections.Generic;
                
                    public class CacheProviderFactoryTests
                    {
                        [Fact]
                        public void RegisterProvider_ThrowsArgumentException_WhenNameIsNullOrEmpty()
                        {
                            var factory = new CacheProviderFactory();
                            Assert.Throws&lt;ArgumentException&gt;(() =&gt; factory.RegisterProvider("", () =&gt; null!));
                            Assert.Throws&lt;ArgumentException&gt;(() =&gt; factory.RegisterProvider(null!, () =&gt; new TestCacheProvider()));
                        }
                
                        [Fact]
                        public void RegisterProvider_ThrowsArgumentNullException_WhenProviderFactoryIsNull()
                        {
                            var factory = new CacheProviderFactory();
                            Assert.Throws&lt;ArgumentNullException&gt;(() =&gt; factory.RegisterProvider("test", null!));
                        }
                
                        [Fact]
                        public void CreateProvider_ReturnsSameInstance_WhenProviderIsRegistered()
                        {
                            var factory = new CacheProviderFactory();
                            var expectedProvider = new TestCacheProvider();
                            factory.RegisterProvider("test", () =&gt; expectedProvider);
                
                            var provider1 = factory.CreateProvider("test");
                            var provider2 = factory.CreateProvider("test");
                
                            Assert.Same(expectedProvider, provider1);
                            Assert.Same(expectedProvider, provider2);
                        }
                
                        [Fact]
                        public void CreateProvider_ThrowsArgumentNullException_WhenProviderNameIsNull()
                        {
                            var factory = new CacheProviderFactory();
                            Assert.Throws&lt;ArgumentNullException&gt;(() =&gt; factory.CreateProvider(null!));
                        }
                
                        [Fact]
                        public void CreateProvider_ThrowsNotSupportedException_WhenProviderIsNotRegistered()
                        {
                            var factory = new CacheProviderFactory();
                            Assert.Throws&lt;NotSupportedException&gt;(() =&gt; factory.CreateProvider(""));
                            Assert.Throws&lt;NotSupportedException&gt;(() =&gt; factory.CreateProvider("nonexistent"));
                        }
                
                        [Fact]
                        public void Remove_RemovesKeyFromCache()
                        {
                            var cache = new TestCacheProvider();
                            cache.Set("key", "value", TimeSpan.FromMinutes(1));
                            cache.Remove("key");
                            var result = cache.Get&lt;string&gt;("key");
                            Assert.Null(result);
                        }
                
                        private class TestCacheProvider : ICacheProvider
                        {
                            private readonly Dictionary&lt;string, object&gt; _cache = new();
                
                            public T Get&lt;T&gt;(string key) =&gt; string.IsNullOrEmpty(key) ? throw new ArgumentNullException(nameof(key)) : _cache.TryGetValue(key, out var value) ? (T)value! : default!;
                
                            public void Set&lt;T&gt;(string key, T value, TimeSpan expiration)
                            {
                                if (string.IsNullOrEmpty(key))
                                    throw new ArgumentNullException(nameof(key), "La chiave non può essere null o vuota.");
                                if (value is null)
                                    throw new ArgumentNullException(nameof(value), "Il valore non può essere null.");
                                _cache[key] = value;
                            }
                
                            public void Remove(string key)
                            {
                                if (string.IsNullOrEmpty(key))
                                    throw new ArgumentNullException(nameof(key), "La chiave non può essere null o vuota.");
                                _cache.Remove(key);
                            }
                
                            public bool Exists(string key) =&gt; !string.IsNullOrEmpty(key) &amp;&amp; _cache.TryGetValue(key, out _);
                        }
                    }
                }
              </File>
              <File Name="FlexCore.Caching.Factory.Tests.csproj" MIME="application/xml" Encoding="utf_8">
                &lt;?xml version='1.0' encoding='utf-8'?&gt;
                &lt;Project Sdk="Microsoft.NET.Sdk"&gt;
                
                  &lt;PropertyGroup&gt;
                    &lt;TargetFramework&gt;net9.0&lt;/TargetFramework&gt;
                    &lt;ImplicitUsings&gt;enable&lt;/ImplicitUsings&gt;
                    &lt;Nullable&gt;enable&lt;/Nullable&gt;
                    &lt;IsPackable&gt;false&lt;/IsPackable&gt;
                  &lt;/PropertyGroup&gt;
                
                  &lt;ItemGroup&gt;
                    &lt;PackageReference Include="coverlet.collector" Version="6.0.4"&gt;
                      &lt;PrivateAssets&gt;all&lt;/PrivateAssets&gt;
                      &lt;IncludeAssets&gt;runtime; build; native; contentfiles; analyzers; buildtransitive&lt;/IncludeAssets&gt;
                    &lt;/PackageReference&gt;
                    &lt;PackageReference Include="Microsoft.NET.Test.Sdk" Version="17.13.0" /&gt;
                    &lt;PackageReference Include="xunit" Version="2.9.3" /&gt;
                    &lt;PackageReference Include="xunit.runner.visualstudio" Version="3.0.2"&gt;
                      &lt;PrivateAssets&gt;all&lt;/PrivateAssets&gt;
                      &lt;IncludeAssets&gt;runtime; build; native; contentfiles; analyzers; buildtransitive&lt;/IncludeAssets&gt;
                    &lt;/PackageReference&gt;
                  &lt;/ItemGroup&gt;
                
                  &lt;ItemGroup&gt;
                    &lt;ProjectReference Include="../../../../Projects/Libraries/Caching/FlexCore.Caching.Factory/FlexCore.Caching.Factory.csproj" /&gt;
                    &lt;ProjectReference Include="../../../../Projects/Libraries/Caching/FlexCore.Caching.Interfaces/FlexCore.Caching.Interfaces.csproj" /&gt;
                  &lt;/ItemGroup&gt;
                
                  &lt;ItemGroup&gt;
                    &lt;Using Include="Xunit" /&gt;
                  &lt;/ItemGroup&gt;
                
                &lt;/Project&gt;
              </File>
            </Folder>
            <Folder Name="FlexCore.Caching.Interfaces.Tests">
              <File Name="CacheInterfacesTests.cs" MIME="text/plain" Encoding="utf_8" BOM="True">
                ﻿using Xunit;
                using FlexCore.Caching.Interfaces;
                using System;
                using System.Collections.Generic;
                
                public class CacheInterfacesTests
                {
                    [Fact]
                    public void ICacheProvider_Set_AddsValueToCache()
                    {
                        var cacheProvider = new TestCacheProvider();
                        cacheProvider.Set("key", "value", TimeSpan.FromMinutes(1));
                        var result = cacheProvider.Get&lt;string&gt;("key");
                        Assert.NotNull(result);
                        Assert.Equal("value", result);
                    }
                
                    private class TestCacheProvider : ICacheProvider
                    {
                        private readonly Dictionary&lt;string, object&gt; _cache = new();
                
                        public T Get&lt;T&gt;(string key) =&gt; _cache.ContainsKey(key) ? (T)_cache[key] : default!;
                
                        public void Set&lt;T&gt;(string key, T value, TimeSpan expiration)
                        {
                            _cache[key] = value ?? throw new ArgumentNullException(nameof(value));
                        }
                
                        public void Remove(string key) =&gt; _cache.Remove(key);
                
                        public bool Exists(string key) =&gt; _cache.ContainsKey(key);
                    }
                }
              </File>
              <File Name="FlexCore.Caching.Interfaces.Tests.csproj" MIME="application/xml" Encoding="utf_8">
                &lt;?xml version='1.0' encoding='utf-8'?&gt;
                &lt;Project Sdk="Microsoft.NET.Sdk"&gt;
                
                  &lt;PropertyGroup&gt;
                    &lt;TargetFramework&gt;net9.0&lt;/TargetFramework&gt;
                    &lt;ImplicitUsings&gt;enable&lt;/ImplicitUsings&gt;
                    &lt;Nullable&gt;enable&lt;/Nullable&gt;
                    &lt;IsPackable&gt;false&lt;/IsPackable&gt;
                  &lt;/PropertyGroup&gt;
                
                  &lt;ItemGroup&gt;
                    &lt;PackageReference Include="coverlet.collector" Version="6.0.4"&gt;
                      &lt;PrivateAssets&gt;all&lt;/PrivateAssets&gt;
                      &lt;IncludeAssets&gt;runtime; build; native; contentfiles; analyzers; buildtransitive&lt;/IncludeAssets&gt;
                    &lt;/PackageReference&gt;
                    &lt;PackageReference Include="Microsoft.NET.Test.Sdk" Version="17.13.0" /&gt;
                    &lt;PackageReference Include="xunit" Version="2.9.3" /&gt;
                    &lt;PackageReference Include="xunit.runner.visualstudio" Version="3.0.2"&gt;
                      &lt;PrivateAssets&gt;all&lt;/PrivateAssets&gt;
                      &lt;IncludeAssets&gt;runtime; build; native; contentfiles; analyzers; buildtransitive&lt;/IncludeAssets&gt;
                    &lt;/PackageReference&gt;
                  &lt;/ItemGroup&gt;
                
                  &lt;ItemGroup&gt;
                    &lt;ProjectReference Include="../../../../Projects/Libraries/Caching/FlexCore.Caching.Interfaces/FlexCore.Caching.Interfaces.csproj" /&gt;
                  &lt;/ItemGroup&gt;
                
                  &lt;ItemGroup&gt;
                    &lt;Using Include="Xunit" /&gt;
                  &lt;/ItemGroup&gt;
                
                &lt;/Project&gt;
              </File>
            </Folder>
            <Folder Name="FlexCore.Caching.Memory.Tests">
              <File Name="FlexCore.Caching.Memory.Tests.csproj" MIME="application/xml" Encoding="utf_8">
                &lt;?xml version='1.0' encoding='utf-8'?&gt;
                &lt;Project Sdk="Microsoft.NET.Sdk"&gt;
                
                  &lt;PropertyGroup&gt;
                    &lt;TargetFramework&gt;net9.0&lt;/TargetFramework&gt;
                    &lt;ImplicitUsings&gt;enable&lt;/ImplicitUsings&gt;
                    &lt;Nullable&gt;enable&lt;/Nullable&gt;
                    &lt;IsPackable&gt;false&lt;/IsPackable&gt;
                  &lt;/PropertyGroup&gt;
                
                  &lt;ItemGroup&gt;
                    &lt;PackageReference Include="coverlet.collector" Version="6.0.4"&gt;
                      &lt;PrivateAssets&gt;all&lt;/PrivateAssets&gt;
                      &lt;IncludeAssets&gt;runtime; build; native; contentfiles; analyzers; buildtransitive&lt;/IncludeAssets&gt;
                    &lt;/PackageReference&gt;
                    &lt;PackageReference Include="Microsoft.Extensions.Caching.Memory" Version="9.0.3" /&gt;
                    &lt;PackageReference Include="Microsoft.NET.Test.Sdk" Version="17.13.0" /&gt;
                    &lt;PackageReference Include="xunit" Version="2.9.3" /&gt;
                    &lt;PackageReference Include="xunit.runner.visualstudio" Version="3.0.2"&gt;
                      &lt;PrivateAssets&gt;all&lt;/PrivateAssets&gt;
                      &lt;IncludeAssets&gt;runtime; build; native; contentfiles; analyzers; buildtransitive&lt;/IncludeAssets&gt;
                    &lt;/PackageReference&gt;
                  &lt;/ItemGroup&gt;
                
                  &lt;ItemGroup&gt;
                    &lt;ProjectReference Include="../../../../Projects/Libraries/Caching/FlexCore.Caching.Memory/FlexCore.Caching.Memory.csproj" /&gt;
                  &lt;/ItemGroup&gt;
                
                  &lt;ItemGroup&gt;
                    &lt;Using Include="Xunit" /&gt;
                  &lt;/ItemGroup&gt;
                
                &lt;/Project&gt;
              </File>
              <File Name="MemoryCacheProviderTests.cs" MIME="text/plain" Encoding="utf_8" BOM="True">
                ﻿using Xunit;
                using FlexCore.Caching.Memory;
                using FlexCore.Caching.Interfaces;
                using Microsoft.Extensions.Caching.Memory;
                using System;
                
                public class MemoryCacheProviderTests
                {
                    [Fact]
                    public void Get_ReturnsDefault_WhenKeyNotExists()
                    {
                        var memoryCache = new MemoryCache(new MemoryCacheOptions());
                        var provider = new MemoryCacheProvider(memoryCache);
                        var result = provider.Get&lt;string&gt;("nonexistent_key");
                        Assert.Null(result);
                    }
                
                    [Fact]
                    public void Set_AddsValueToCache()
                    {
                        var memoryCache = new MemoryCache(new MemoryCacheOptions());
                        var provider = new MemoryCacheProvider(memoryCache);
                        provider.Set("key", "value", TimeSpan.FromMinutes(1));
                        var result = provider.Get&lt;string&gt;("key");
                        Assert.Equal("value", result);
                    }
                
                    [Fact]
                    public void Remove_DeletesValueFromCache()
                    {
                        var memoryCache = new MemoryCache(new MemoryCacheOptions());
                        var provider = new MemoryCacheProvider(memoryCache);
                        provider.Set("key", "value", TimeSpan.FromMinutes(1));
                        provider.Remove("key");
                        var result = provider.Get&lt;string&gt;("key");
                        Assert.Null(result);
                    }
                
                    [Fact]
                    public void Exists_ReturnsTrue_WhenKeyExists()
                    {
                        var memoryCache = new MemoryCache(new MemoryCacheOptions());
                        var provider = new MemoryCacheProvider(memoryCache);
                        provider.Set("key", "value", TimeSpan.FromMinutes(1));
                        Assert.True(provider.Exists("key"));
                    }
                
                    [Fact]
                    public void ClearAll_RemovesAllValuesFromCache()
                    {
                        var memoryCache = new MemoryCache(new MemoryCacheOptions());
                        var provider = new MemoryCacheProvider(memoryCache);
                        provider.Set("key1", "value1", TimeSpan.FromMinutes(1));
                        provider.Set("key2", "value2", TimeSpan.FromMinutes(1));
                        provider.ClearAll();
                        Assert.False(provider.Exists("key1"));
                        Assert.False(provider.Exists("key2"));
                    }
                }
              </File>
            </Folder>
            <Folder Name="FlexCore.Caching.Redis.Tests">
              <File Name="FlexCore.Caching.Redis.Tests.csproj" MIME="application/xml" Encoding="utf_8">
                &lt;?xml version='1.0' encoding='utf-8'?&gt;
                &lt;Project Sdk="Microsoft.NET.Sdk"&gt;
                
                  &lt;PropertyGroup&gt;
                    &lt;TargetFramework&gt;net9.0&lt;/TargetFramework&gt;
                    &lt;ImplicitUsings&gt;enable&lt;/ImplicitUsings&gt;
                    &lt;Nullable&gt;enable&lt;/Nullable&gt;
                    &lt;IsPackable&gt;false&lt;/IsPackable&gt;
                  &lt;/PropertyGroup&gt;
                
                  &lt;ItemGroup&gt;
                    &lt;PackageReference Include="coverlet.collector" Version="6.0.4"&gt;
                      &lt;PrivateAssets&gt;all&lt;/PrivateAssets&gt;
                      &lt;IncludeAssets&gt;runtime; build; native; contentfiles; analyzers; buildtransitive&lt;/IncludeAssets&gt;
                    &lt;/PackageReference&gt;
                    &lt;PackageReference Include="Microsoft.NET.Test.Sdk" Version="17.13.0" /&gt;
                    &lt;PackageReference Include="Moq" Version="4.20.72" /&gt;
                    &lt;PackageReference Include="StackExchange.Redis" Version="2.8.31" /&gt;
                    &lt;PackageReference Include="xunit" Version="2.9.3" /&gt;
                    &lt;PackageReference Include="xunit.runner.visualstudio" Version="3.0.2"&gt;
                      &lt;PrivateAssets&gt;all&lt;/PrivateAssets&gt;
                      &lt;IncludeAssets&gt;runtime; build; native; contentfiles; analyzers; buildtransitive&lt;/IncludeAssets&gt;
                    &lt;/PackageReference&gt;
                  &lt;/ItemGroup&gt;
                
                  &lt;ItemGroup&gt;
                    &lt;ProjectReference Include="../../../../Projects/Libraries/Caching/FlexCore.Caching.Interfaces/FlexCore.Caching.Interfaces.csproj" /&gt;
                    &lt;ProjectReference Include="../../../../Projects/Libraries/Caching/FlexCore.Caching.Redis/FlexCore.Caching.Redis.csproj" /&gt;
                  &lt;/ItemGroup&gt;
                
                  &lt;ItemGroup&gt;
                    &lt;Using Include="Xunit" /&gt;
                  &lt;/ItemGroup&gt;
                
                &lt;/Project&gt;
              </File>
              <File Name="RedisCacheProviderTests.cs" MIME="text/plain" Encoding="utf_8" BOM="True">
                ﻿using Xunit;
                using FlexCore.Caching.Redis;
                using FlexCore.Caching.Interfaces;
                using StackExchange.Redis;
                using System;
                using System.Text.Json;
                
                public class RedisCacheProviderTests
                {
                    [Fact(Skip = "Redis non installato, test disabilitato temporaneamente")]
                    public void Get_ReturnsDefault_WhenKeyNotExists()
                    {
                        var connection = ConnectionMultiplexer.Connect("localhost");
                        var provider = new RedisCacheProvider(connection);
                        var result = provider.Get&lt;string&gt;("nonexistent_key");
                        Assert.Null(result);
                    }
                
                    [Fact(Skip = "Redis non installato, test disabilitato temporaneamente")]
                    public void Set_AddsValueToCache()
                    {
                        var connection = ConnectionMultiplexer.Connect("localhost");
                        var provider = new RedisCacheProvider(connection);
                        provider.Set("key", "value", TimeSpan.FromMinutes(1));
                        var result = provider.Get&lt;string&gt;("key");
                        Assert.Equal("value", result);
                    }
                
                    [Fact(Skip = "Redis non installato, test disabilitato temporaneamente")]
                    public void Remove_DeletesValueFromCache()
                    {
                        var connection = ConnectionMultiplexer.Connect("localhost");
                        var provider = new RedisCacheProvider(connection);
                        provider.Set("key", "value", TimeSpan.FromMinutes(1));
                        provider.Remove("key");
                        var result = provider.Get&lt;string&gt;("key");
                        Assert.Null(result);
                    }
                
                    [Fact(Skip = "Redis non installato, test disabilitato temporaneamente")]
                    public void Exists_ReturnsTrue_WhenKeyExists()
                    {
                        var connection = ConnectionMultiplexer.Connect("localhost");
                        var provider = new RedisCacheProvider(connection);
                        provider.Set("key", "value", TimeSpan.FromMinutes(1));
                        Assert.True(provider.Exists("key"));
                    }
                }
              </File>
            </Folder>
          </Folder>
          <Folder Name="Core">
            <Folder Name="FlexCore.Core.Configuration.Tests">
              <File Name="AppSettingsTests.cs" MIME="text/plain" Encoding="utf_8" BOM="True">
                ﻿using Xunit;
                using FlexCore.Core.Configuration.Models;
                
                namespace FlexCore.Core.Configuration.Models.Tests;
                
                public class AppSettingsTests
                {
                    [Fact]
                    public void AppSettings_Should_Initialize_Correctly()
                    {
                        var settings = new AppSettings
                        {
                            ConnectionStrings = new ConnectionStringsSettings { DefaultDatabase = "TestDB", SQLiteDatabase = "TestSQLite", Redis = "TestRedis" },
                            DatabaseSettings = new DatabaseSettings { DefaultProvider = "SQLServer", SQLite = new SQLiteSettings { CacheSize = 100, Synchronous = "Full" }, SQLServer = new SQLServerSettings { EnableRetryOnFailure = true, MaxRetryCount = 5, MaxRetryDelay = TimeSpan.FromSeconds(30) } },
                            ORMSettings = new ORMSettings { DefaultProvider = "EFCore", ADO = new ADOSettings { ConnectionTimeout = 30 }, Dapper = new DapperSettings { CommandTimeout = 60 }, EFCore = new EFCoreSettings { EnableLazyLoading = true, EnableSensitiveDataLogging = false } },
                            CacheSettings = new CacheSettings { DefaultProvider = "MemoryCache", MemoryCache = new MemoryCacheSettings { SizeLimit = 1024, CompactionPercentage = 0.2, ExpirationScanFrequency = TimeSpan.FromMinutes(5) }, Redis = new RedisSettings { ConnectionString = "localhost", InstanceName = "TestInstance", DefaultDatabase = 0, AbortOnConnectFail = false, ConnectTimeout = 5000, SyncTimeout = 5000 } },
                            Logging = new LoggingSettings { Enabled = true, Level = "Information", Console = new ConsoleLoggingSettings { IncludeScopes = false, LogLevel = new LogLevelSettings { Default = "Warning", System = "Error", Microsoft = "Error" } }, Log4Net = new Log4NetSettings { ConfigFile = "log4net.config", LogLevel = new LogLevelSettings { Default = "Debug", System = "Error", Microsoft = "Error" } }, Serilog = new SerilogSettings { MinimumLevel = new MinimumLevelSettings { Default = "Information", Override = new Dictionary&lt;string, string&gt; { { "Microsoft", "Warning" } } } } }
                        };
                
                        Assert.NotNull(settings.ConnectionStrings);
                        Assert.Equal("TestDB", settings.ConnectionStrings.DefaultDatabase);
                        Assert.True(settings.Logging.Enabled);
                    }
                }
              </File>
              <File Name="CacheSettingsTests.cs" MIME="text/plain" Encoding="utf_8" BOM="True">
                ﻿using Xunit;
                using FlexCore.Core.Configuration.Models;
                
                namespace FlexCore.Core.Configuration.Models.Tests;
                
                public class CacheSettingsTests
                {
                    [Fact]
                    public void CacheSettings_Should_Initialize_Correctly()
                    {
                        var settings = new CacheSettings
                        {
                            DefaultProvider = "MemoryCache",
                            MemoryCache = new MemoryCacheSettings { SizeLimit = 1024, CompactionPercentage = 0.2, ExpirationScanFrequency = TimeSpan.FromMinutes(5) },
                            Redis = new RedisSettings { ConnectionString = "localhost", InstanceName = "TestInstance", DefaultDatabase = 0, AbortOnConnectFail = false, ConnectTimeout = 5000, SyncTimeout = 5000 }
                        };
                
                        Assert.Equal("MemoryCache", settings.DefaultProvider);
                    }
                }
              </File>
              <File Name="ConfigurationAdapterTests.cs" MIME="text/plain" Encoding="utf_8" BOM="True">
                ﻿using Microsoft.Extensions.Configuration;
                using Xunit;
                using FlexCore.Core.Configuration.Adapter;
                using FlexCore.Core.Configuration.Models;
                using System;
                using System.Collections.Generic;
                
                namespace FlexCore.Core.Configuration.Tests
                {
                    /// &lt;summary&gt;
                    /// Classe di test per verificare il corretto funzionamento di &lt;see cref="ConfigurationAdapter"/&gt;.
                    /// &lt;/summary&gt;
                    public class ConfigurationAdapterTests
                    {
                        /// &lt;summary&gt;
                        /// Verifica che le impostazioni del database vengano caricate correttamente.
                        /// &lt;/summary&gt;
                        [Fact]
                        public void GetDatabaseSettings_ShouldReturnValidSettings()
                        {
                            // Arrange
                            var inMemorySettings = new Dictionary&lt;string, string?&gt; // ✅ Aggiunto string?
                            {
                                ["DatabaseSettings:DefaultProvider"] = "SQLServer",
                                ["DatabaseSettings:Providers:0"] = "SQLServer",
                                ["DatabaseSettings:Providers:1"] = "SQLite",
                                ["DatabaseSettings:SQLServer:EnableRetryOnFailure"] = "true",
                                ["DatabaseSettings:SQLServer:MaxRetryCount"] = "5",
                                ["DatabaseSettings:SQLServer:MaxRetryDelay"] = "00:00:30",
                                ["DatabaseSettings:SQLite:CacheSize"] = "1000",
                                ["DatabaseSettings:SQLite:Synchronous"] = "Normal"
                            };
                
                            IConfiguration configuration = new ConfigurationBuilder()
                                .AddInMemoryCollection(inMemorySettings) // ✅ Ora compatibile
                                .Build();
                
                            var adapter = new ConfigurationAdapter(configuration);
                
                            // Act
                            DatabaseSettings result = adapter.GetDatabaseSettings();
                
                            // Assert
                            Assert.Equal("SQLServer", result.DefaultProvider);
                            Assert.Equal(["SQLServer", "SQLite"], result.Providers);
                            Assert.True(result.SQLServer.EnableRetryOnFailure);
                            Assert.Equal(5, result.SQLServer.MaxRetryCount);
                            Assert.Equal(TimeSpan.FromSeconds(30), result.SQLServer.MaxRetryDelay);
                            Assert.Equal(1000, result.SQLite.CacheSize);
                            Assert.Equal("Normal", result.SQLite.Synchronous);
                        }
                
                        /// &lt;summary&gt;
                        /// Verifica che le impostazioni ORM vengano caricate correttamente.
                        /// &lt;/summary&gt;
                        [Fact]
                        public void GetORMSettings_ShouldReturnValidSettings()
                        {
                            // Arrange
                            var inMemorySettings = new Dictionary&lt;string, string?&gt; // ✅ Aggiunto string?
                            {
                                ["ORMSettings:DefaultProvider"] = "EFCore",
                                ["ORMSettings:Providers:0"] = "EFCore",
                                ["ORMSettings:Providers:1"] = "Dapper",
                                ["ORMSettings:Providers:2"] = "ADO",
                                ["ORMSettings:EFCore:EnableLazyLoading"] = "true",
                                ["ORMSettings:EFCore:EnableSensitiveDataLogging"] = "false",
                                ["ORMSettings:Dapper:CommandTimeout"] = "30",
                                ["ORMSettings:ADO:ConnectionTimeout"] = "15"
                            };
                
                            IConfiguration configuration = new ConfigurationBuilder()
                                .AddInMemoryCollection(inMemorySettings) // ✅ Ora compatibile
                                .Build();
                
                            var adapter = new ConfigurationAdapter(configuration);
                
                            // Act
                            ORMSettings result = adapter.GetORMSettings();
                
                            // Assert
                            Assert.Equal("EFCore", result.DefaultProvider);
                            Assert.Equal(["EFCore", "Dapper", "ADO"], result.Providers);
                            Assert.True(result.EFCore.EnableLazyLoading);
                            Assert.False(result.EFCore.EnableSensitiveDataLogging);
                            Assert.Equal(30, result.Dapper.CommandTimeout);
                            Assert.Equal(15, result.ADO.ConnectionTimeout);
                        }
                
                        /// &lt;summary&gt;
                        /// Verifica che le impostazioni della cache vengano caricate correttamente.
                        /// &lt;/summary&gt;
                        [Fact]
                        public void GetCacheSettings_ShouldReturnValidSettings()
                        {
                            // Arrange
                            var inMemorySettings = new Dictionary&lt;string, string?&gt; // ✅ Aggiunto string?
                            {
                                ["CacheSettings:DefaultProvider"] = "MemoryCache",
                                ["CacheSettings:Providers:0"] = "MemoryCache",
                                ["CacheSettings:Providers:1"] = "Redis",
                                ["CacheSettings:MemoryCache:SizeLimit"] = "1000",
                                ["CacheSettings:MemoryCache:CompactionPercentage"] = "0.5",
                                ["CacheSettings:MemoryCache:ExpirationScanFrequency"] = "00:01:00",
                                ["CacheSettings:Redis:ConnectionString"] = "localhost:6379",
                                ["CacheSettings:Redis:InstanceName"] = "RedisInstance",
                                ["CacheSettings:Redis:DefaultDatabase"] = "0",
                                ["CacheSettings:Redis:AbortOnConnectFail"] = "false",
                                ["CacheSettings:Redis:ConnectTimeout"] = "5000",
                                ["CacheSettings:Redis:SyncTimeout"] = "1000"
                            };
                
                            IConfiguration configuration = new ConfigurationBuilder()
                                .AddInMemoryCollection(inMemorySettings) // ✅ Ora compatibile
                                .Build();
                
                            var adapter = new ConfigurationAdapter(configuration);
                
                            // Act
                            CacheSettings result = adapter.GetCacheSettings();
                
                            // Assert
                            Assert.Equal("MemoryCache", result.DefaultProvider);
                            Assert.Equal(["MemoryCache", "Redis"], result.Providers);
                            Assert.Equal(1000, result.MemoryCache.SizeLimit);
                            Assert.Equal(0.5, result.MemoryCache.CompactionPercentage);
                            Assert.Equal(TimeSpan.FromMinutes(1), result.MemoryCache.ExpirationScanFrequency);
                            Assert.Equal("localhost:6379", result.Redis.ConnectionString);
                            Assert.Equal("RedisInstance", result.Redis.InstanceName);
                        }
                
                        /// &lt;summary&gt;
                        /// Verifica che le impostazioni di logging vengano caricate correttamente.
                        /// &lt;/summary&gt;
                        [Fact]
                        public void GetLoggingSettings_ShouldReturnValidSettings()
                        {
                            // Arrange
                            var inMemorySettings = new Dictionary&lt;string, string?&gt; // ✅ Aggiunto string?
                            {
                                ["Logging:Enabled"] = "true",
                                ["Logging:Level"] = "Information",
                                ["Logging:Providers:0"] = "Console",
                                ["Logging:Providers:1"] = "Log4Net",
                                ["Logging:Console:IncludeScopes"] = "true",
                                ["Logging:Console:LogLevel:Default"] = "Information",
                                ["Logging:Console:LogLevel:System"] = "Warning",
                                ["Logging:Console:LogLevel:Microsoft"] = "Warning",
                                ["Logging:Log4Net:ConfigFile"] = "log4net.config",
                                ["Logging:Log4Net:LogLevel:Default"] = "Warning",
                                ["Logging:Log4Net:LogLevel:System"] = "Error",
                                ["Logging:Log4Net:LogLevel:Microsoft"] = "Error",
                                ["Logging:Serilog:MinimumLevel:Default"] = "Information",
                                ["Logging:Serilog:WriteTo:0:Name"] = "Console"
                            };
                
                            IConfiguration configuration = new ConfigurationBuilder()
                                .AddInMemoryCollection(inMemorySettings) // ✅ Ora compatibile
                                .Build();
                
                            var adapter = new ConfigurationAdapter(configuration);
                
                            // Act
                            LoggingSettings result = adapter.GetLoggingSettings();
                
                            // Assert
                            Assert.True(result.Enabled);
                            Assert.Equal("Information", result.Level);
                            Assert.Equal(["Console", "Log4Net"], result.Providers);
                            Assert.True(result.Console.IncludeScopes);
                            Assert.Equal("log4net.config", result.Log4Net.ConfigFile);
                            Assert.Equal("Information", result.Serilog.MinimumLevel.Default);
                        }
                
                        /// &lt;summary&gt;
                        /// Verifica il caricamento completo delle impostazioni dell'applicazione.
                        /// &lt;/summary&gt;
                        [Fact]
                        public void GetAppSettings_ShouldReturnCompleteConfiguration()
                        {
                            // Arrange
                            var inMemorySettings = new Dictionary&lt;string, string?&gt; // ✅ Aggiunto string?
                            {
                                // ConnectionStrings
                                ["ConnectionStrings:DefaultDatabase"] = "Server=test;Database=TestDB",
                                ["ConnectionStrings:SQLiteDatabase"] = "Data Source=test.db",
                                ["ConnectionStrings:Redis"] = "localhost:6379",
                
                                // DatabaseSettings
                                ["DatabaseSettings:DefaultProvider"] = "SQLServer",
                                ["DatabaseSettings:Providers:0"] = "SQLServer",
                                ["DatabaseSettings:Providers:1"] = "SQLite",
                                ["DatabaseSettings:SQLServer:EnableRetryOnFailure"] = "true",
                                ["DatabaseSettings:SQLServer:MaxRetryCount"] = "5",
                                ["DatabaseSettings:SQLServer:MaxRetryDelay"] = "00:00:30",
                                ["DatabaseSettings:SQLite:CacheSize"] = "1000",
                                ["DatabaseSettings:SQLite:Synchronous"] = "Normal",
                
                                // ORMSettings
                                ["ORMSettings:DefaultProvider"] = "EFCore",
                                ["ORMSettings:Providers:0"] = "EFCore",
                                ["ORMSettings:Providers:1"] = "Dapper",
                                ["ORMSettings:Providers:2"] = "ADO",
                                ["ORMSettings:EFCore:EnableLazyLoading"] = "true",
                                ["ORMSettings:EFCore:EnableSensitiveDataLogging"] = "false",
                                ["ORMSettings:Dapper:CommandTimeout"] = "30",
                                ["ORMSettings:ADO:ConnectionTimeout"] = "15",
                
                                // CacheSettings
                                ["CacheSettings:DefaultProvider"] = "MemoryCache",
                                ["CacheSettings:Providers:0"] = "MemoryCache",
                                ["CacheSettings:Providers:1"] = "Redis",
                                ["CacheSettings:MemoryCache:SizeLimit"] = "1000",
                                ["CacheSettings:MemoryCache:CompactionPercentage"] = "0.5",
                                ["CacheSettings:MemoryCache:ExpirationScanFrequency"] = "00:01:00",
                                ["CacheSettings:Redis:ConnectionString"] = "localhost:6379",
                                ["CacheSettings:Redis:InstanceName"] = "RedisInstance",
                                ["CacheSettings:Redis:DefaultDatabase"] = "0",
                                ["CacheSettings:Redis:AbortOnConnectFail"] = "false",
                                ["CacheSettings:Redis:ConnectTimeout"] = "5000",
                                ["CacheSettings:Redis:SyncTimeout"] = "1000",
                
                                // LoggingSettings
                                ["Logging:Enabled"] = "true",
                                ["Logging:Level"] = "Information",
                                ["Logging:Providers:0"] = "Console",
                                ["Logging:Providers:1"] = "Log4Net",
                                ["Logging:Providers:2"] = "Serilog",
                                ["Logging:Console:IncludeScopes"] = "true",
                                ["Logging:Console:LogLevel:Default"] = "Information",
                                ["Logging:Console:LogLevel:System"] = "Warning",
                                ["Logging:Console:LogLevel:Microsoft"] = "Warning",
                                ["Logging:Log4Net:ConfigFile"] = "log4net.config",
                                ["Logging:Log4Net:LogLevel:Default"] = "Warning",
                                ["Logging:Log4Net:LogLevel:System"] = "Error",
                                ["Logging:Log4Net:LogLevel:Microsoft"] = "Error",
                                ["Logging:Serilog:Using:0"] = "Console",
                                ["Logging:Serilog:Using:1"] = "File",
                                ["Logging:Serilog:MinimumLevel:Default"] = "Information",
                                ["Logging:Serilog:WriteTo:0:Name"] = "Console"
                            };
                
                            IConfiguration configuration = new ConfigurationBuilder()
                                .AddInMemoryCollection(inMemorySettings) // ✅ Ora compatibile
                                .Build();
                
                            var adapter = new ConfigurationAdapter(configuration);
                
                            // Act
                            AppSettings result = adapter.GetAppSettings();
                
                            // Assert
                            Assert.NotNull(result.ConnectionStrings);
                            Assert.NotNull(result.DatabaseSettings);
                            Assert.NotNull(result.ORMSettings);
                            Assert.NotNull(result.CacheSettings);
                            Assert.NotNull(result.Logging);
                        }
                    }
                }
              </File>
              <File Name="ConfigurationValidatorTests.cs" MIME="text/plain" Encoding="utf_8" BOM="True">
                ﻿using FlexCore.Core.Configuration.Validators;
                using Xunit;
                
                namespace FlexCore.Core.Configuration.Tests
                {
                    public class ConfigurationValidatorTests
                    {
                        [Theory]
                        [InlineData(null)]
                        [InlineData("")]
                        [InlineData("   ")]
                        public void ValidateKey_InvalidKey_ThrowsException(string? key)
                        {
                            Assert.ThrowsAny&lt;ArgumentException&gt;(() =&gt; ConfigurationValidator.ValidateKey(key!));
                        }
                
                        [Fact]
                        public void ValidateKey_ValidKey_NoException()
                        {
                            ConfigurationValidator.ValidateKey("ValidKey");
                        }
                    }
                }
              </File>
              <File Name="ConnectionStringsSettingsTests.cs" MIME="text/plain" Encoding="utf_8" BOM="True">
                ﻿using Xunit;
                using FlexCore.Core.Configuration.Models;
                
                namespace FlexCore.Core.Configuration.Models.Tests;
                
                public class ConnectionStringsSettingsTests
                {
                    [Fact]
                    public void ConnectionStringsSettings_Should_Initialize_Correctly()
                    {
                        var settings = new ConnectionStringsSettings { DefaultDatabase = "TestDB", SQLiteDatabase = "TestSQLite", Redis = "TestRedis" };
                
                        Assert.Equal("TestDB", settings.DefaultDatabase);
                        Assert.Equal("TestSQLite", settings.SQLiteDatabase);
                        Assert.Equal("TestRedis", settings.Redis);
                    }
                }
              </File>
              <File Name="DatabaseSettingsTests.cs" MIME="text/plain" Encoding="utf_8" BOM="True">
                ﻿using Xunit;
                using FlexCore.Core.Configuration.Models;
                
                namespace FlexCore.Core.Configuration.Models.Tests;
                
                public class DatabaseSettingsTests
                {
                    [Fact]
                    public void DatabaseSettings_Should_Initialize_Correctly()
                    {
                        var settings = new DatabaseSettings
                        {
                            DefaultProvider = "SQLServer",
                            SQLite = new SQLiteSettings { CacheSize = 100, Synchronous = "Full" },
                            SQLServer = new SQLServerSettings { EnableRetryOnFailure = true, MaxRetryCount = 5, MaxRetryDelay = TimeSpan.FromSeconds(30) }
                        };
                
                        Assert.Equal("SQLServer", settings.DefaultProvider);
                    }
                }
              </File>
              <File Name="FlexCore.Core.Configuration.Tests.csproj" MIME="application/xml" Encoding="utf_8" BOM="True">
                ﻿&lt;Project Sdk="Microsoft.NET.Sdk"&gt;
                	&lt;PropertyGroup&gt;
                		&lt;TargetFramework&gt;net9.0&lt;/TargetFramework&gt;
                		&lt;ImplicitUsings&gt;enable&lt;/ImplicitUsings&gt;
                		&lt;Nullable&gt;enable&lt;/Nullable&gt;
                	&lt;/PropertyGroup&gt;
                
                	&lt;ItemGroup&gt;
                		&lt;PackageReference Include="Microsoft.NET.Test.Sdk" Version="17.13.0" /&gt;
                		&lt;PackageReference Include="xunit" Version="2.9.3" /&gt;
                		&lt;PackageReference Include="xunit.runner.visualstudio" Version="3.0.2"&gt;
                		  &lt;PrivateAssets&gt;all&lt;/PrivateAssets&gt;
                		  &lt;IncludeAssets&gt;runtime; build; native; contentfiles; analyzers; buildtransitive&lt;/IncludeAssets&gt;
                		&lt;/PackageReference&gt;
                		&lt;PackageReference Include="Moq" Version="4.20.72" /&gt;
                		&lt;PackageReference Include="Microsoft.Extensions.Configuration" Version="9.0.3" /&gt;
                		&lt;PackageReference Include="Microsoft.Extensions.Configuration.Binder" Version="9.0.3" /&gt;
                		&lt;PackageReference Include="Microsoft.Extensions.DependencyInjection" Version="9.0.3" /&gt;
                		&lt;PackageReference Include="Microsoft.Extensions.Logging" Version="9.0.3" /&gt;
                	&lt;/ItemGroup&gt;
                
                	&lt;ItemGroup&gt;
                	  &lt;ProjectReference Include="..\..\..\..\Projects\Libraries\Core\FlexCore.Core.Configuration\FlexCore.Core.Configuration.csproj" /&gt;
                	&lt;/ItemGroup&gt;
                &lt;/Project&gt;
              </File>
              <File Name="LoggingSettingsTests.cs" MIME="text/plain" Encoding="utf_8" BOM="True">
                ﻿using Xunit;
                using FlexCore.Core.Configuration.Models;
                
                namespace FlexCore.Core.Configuration.Models.Tests;
                
                public class LoggingSettingsTests
                {
                    [Fact]
                    public void LoggingSettings_Should_Initialize_Correctly()
                    {
                        var settings = new LoggingSettings
                        {
                            Enabled = true,
                            Level = "Information",
                            Console = new ConsoleLoggingSettings { IncludeScopes = false, LogLevel = new LogLevelSettings { Default = "Warning", System = "Error", Microsoft = "Error" } },
                            Log4Net = new Log4NetSettings { ConfigFile = "log4net.config", LogLevel = new LogLevelSettings { Default = "Debug", System = "Error", Microsoft = "Error" } },
                            Serilog = new SerilogSettings { MinimumLevel = new MinimumLevelSettings { Default = "Information", Override = new Dictionary&lt;string, string&gt; { { "Microsoft", "Warning" } } } }
                        };
                
                        Assert.True(settings.Enabled);
                    }
                }
              </File>
              <File Name="ORMSettingsTests.cs" MIME="text/plain" Encoding="utf_8" BOM="True">
                ﻿using Xunit;
                using FlexCore.Core.Configuration.Models;
                
                namespace FlexCore.Core.Configuration.Models.Tests;
                
                public class ORMSettingsTests
                {
                    [Fact]
                    public void ORMSettings_Should_Initialize_Correctly()
                    {
                        var settings = new ORMSettings
                        {
                            DefaultProvider = "EFCore",
                            ADO = new ADOSettings { ConnectionTimeout = 30 },
                            Dapper = new DapperSettings { CommandTimeout = 60 },
                            EFCore = new EFCoreSettings { EnableLazyLoading = true, EnableSensitiveDataLogging = false }
                        };
                
                        Assert.Equal("EFCore", settings.DefaultProvider);
                    }
                }
              </File>
              <File Name="ServiceCollectionExtensionsTests.cs" MIME="text/plain" Encoding="utf_8" BOM="True">
                ﻿using System.Collections.Generic;
                using Microsoft.Extensions.Configuration;
                using Microsoft.Extensions.DependencyInjection;
                using Microsoft.Extensions.Logging;
                using Microsoft.Extensions.Options;
                using Xunit;
                using Moq;
                using FlexCore.Core.Configuration.Models;
                using FlexCore.Core.Configuration.Extensions;
                
                namespace FlexCore.Core.Configuration.Tests
                {
                    public class ServiceCollectionExtensionsTests
                    {
                        [Fact]
                        public void AddAppSettings_RegistersAllSettings()
                        {
                            // Arrange
                            var services = new ServiceCollection();
                
                            var configuration = new ConfigurationBuilder()
                                .AddInMemoryCollection(new Dictionary&lt;string, string?&gt; // &lt;-- Nullable fix
                                {
                                    {"AppSettings:ConnectionStrings:DefaultDatabase", "TestDB_Connection"},
                                    {"ConnectionStrings:DefaultDatabase", "TestDB_Connection"},
                                    {"DatabaseSettings:DefaultProvider", "SQLServer"},
                                    {"ORMSettings:DefaultProvider", "EntityFramework"},
                                    {"CacheSettings:DefaultProvider", "MemoryCache"}
                                })
                                .Build();
                
                            var loggerMock = new Mock&lt;ILogger&gt;();
                
                            // Act
                            services.AddAppSettings(configuration, loggerMock.Object);
                
                            // Assert
                            var serviceProvider = services.BuildServiceProvider();
                
                            // 1. Verifica AppSettings
                            var appSettingsOptions = serviceProvider.GetService&lt;IOptions&lt;AppSettings&gt;&gt;();
                            Assert.NotNull(appSettingsOptions);
                            Assert.NotNull(appSettingsOptions.Value);
                            Assert.Equal("TestDB_Connection", appSettingsOptions.Value.ConnectionStrings.DefaultDatabase);
                
                            // 2. Verifica ConnectionStrings
                            var connStringsOptions = serviceProvider.GetService&lt;IOptions&lt;ConnectionStringsSettings&gt;&gt;();
                            Assert.NotNull(connStringsOptions);
                            Assert.NotNull(connStringsOptions.Value);
                            Assert.Equal("TestDB_Connection", connStringsOptions.Value.DefaultDatabase);
                
                            // 3. Verifica DatabaseSettings
                            var dbSettingsOptions = serviceProvider.GetService&lt;IOptions&lt;DatabaseSettings&gt;&gt;();
                            Assert.NotNull(dbSettingsOptions);
                            Assert.Equal("SQLServer", dbSettingsOptions.Value.DefaultProvider);
                
                            // 4. Verifica ORMSettings
                            var ormSettingsOptions = serviceProvider.GetService&lt;IOptions&lt;ORMSettings&gt;&gt;();
                            Assert.NotNull(ormSettingsOptions);
                            Assert.Equal("EntityFramework", ormSettingsOptions.Value.DefaultProvider);
                
                            // 5. Verifica CacheSettings
                            var cacheSettingsOptions = serviceProvider.GetService&lt;IOptions&lt;CacheSettings&gt;&gt;();
                            Assert.NotNull(cacheSettingsOptions);
                            Assert.Equal("MemoryCache", cacheSettingsOptions.Value.DefaultProvider);
                        }
                    }
                }
              </File>
            </Folder>
            <Folder Name="FlexCore.Core.Utilities.Tests">
              <File Name="AppSettingsTests.cs" MIME="text/plain" Encoding="utf_8" BOM="True">
                ﻿using System;
                using System.Collections.Generic;
                using System.Linq;
                using System.Text;
                using System.Threading.Tasks;
                
                namespace FlexCore.Core.Utilities.Tests
                {
                    internal class AppSettingsTests
                    {
                    }
                }
              </File>
              <File Name="DependencyValidatorTests.cs" MIME="text/plain" Encoding="utf_8" BOM="True">
                ﻿namespace FlexCore.Core.Utilities.Tests;
                
                using FlexCore.Core.Utilities;
                using System;
                using System.Collections.Generic;
                using Xunit;
                
                public class DependencyValidatorTests
                {
                    [Fact]
                    public void ValidateDependencies_ThrowsException_WhenCircularDependencyExists()
                    {
                        var projectDependencies = new Dictionary&lt;string, List&lt;string&gt;&gt;
                        {
                            { "ProjectA", new List&lt;string&gt; { "ProjectB" } },
                            { "ProjectB", new List&lt;string&gt; { "ProjectA" } }
                        };
                
                        Assert.Throws&lt;InvalidOperationException&gt;(() =&gt; DependencyValidator.ValidateDependencies(projectDependencies));
                    }
                
                    [Fact]
                    public void ValidateDependencies_DoesNotThrow_WhenNoCircularDependencyExists()
                    {
                        var projectDependencies = new Dictionary&lt;string, List&lt;string&gt;&gt;
                        {
                            { "ProjectA", new List&lt;string&gt; { "ProjectB" } },
                            { "ProjectB", new List&lt;string&gt; { "ProjectC" } },
                            { "ProjectC", new List&lt;string&gt;() }
                        };
                
                        var exception = Record.Exception(() =&gt; DependencyValidator.ValidateDependencies(projectDependencies));
                        Assert.Null(exception);
                    }
                
                    [Fact]
                    public void ResolveCircularDependencies_ThrowsException_WhenCircularDependencyExists()
                    {
                        var projectDependencies = new Dictionary&lt;string, List&lt;string&gt;&gt;
                        {
                            { "ProjectA", new List&lt;string&gt; { "ProjectB" } },
                            { "ProjectB", new List&lt;string&gt; { "ProjectA" } }
                        };
                
                        Assert.Throws&lt;InvalidOperationException&gt;(() =&gt; DependencyValidator.ResolveCircularDependencies(projectDependencies));
                    }
                
                    [Fact]
                    public void ResolveCircularDependencies_DoesNotThrow_WhenNoCircularDependencyExists()
                    {
                        var projectDependencies = new Dictionary&lt;string, List&lt;string&gt;&gt;
                        {
                            { "ProjectA", new List&lt;string&gt; { "ProjectB" } },
                            { "ProjectB", new List&lt;string&gt; { "ProjectC" } },
                            { "ProjectC", new List&lt;string&gt;() }
                        };
                
                        var exception = Record.Exception(() =&gt; DependencyValidator.ResolveCircularDependencies(projectDependencies));
                        Assert.Null(exception);
                    }
                }
              </File>
              <File Name="ExceptionHandlerTests.cs" MIME="text/plain" Encoding="utf_8" BOM="True">
                ﻿namespace FlexCore.Core.Utilities.Tests;
                
                using FlexCore.Core.Utilities;
                using System;
                using Xunit;
                
                public class ExceptionHandlerTests
                {
                    [Fact]
                    public void HandleException_ThrowsCustomException_WhenExceptionOccurs()
                    {
                        var ex = new Exception("Test exception");
                        const string operation = "Test operation";
                
                        Func&lt;Exception, string, Exception&gt; customExceptionFactory = (e, op) =&gt;
                            new InvalidOperationException($"Errore durante {op}: {e.Message}");
                
                        Assert.Throws&lt;InvalidOperationException&gt;(() =&gt;
                            ExceptionHandler.HandleException(ex, operation, customExceptionFactory));
                    }
                
                    [Fact]
                    public void HandleException_ThrowsCorrectExceptionMessage_WhenExceptionOccurs()
                    {
                        var ex = new Exception("Test exception");
                        const string operation = "Test operation";
                
                        Func&lt;Exception, string, Exception&gt; customExceptionFactory = (e, op) =&gt;
                            new InvalidOperationException($"Errore durante {op}: {e.Message}");
                
                        var exception = Assert.Throws&lt;InvalidOperationException&gt;(() =&gt;
                            ExceptionHandler.HandleException(ex, operation, customExceptionFactory));
                
                        Assert.Equal("Errore durante Test operation: Test exception", exception.Message);
                    }
                }
              </File>
              <File Name="FlexCore.Core.Utilities.Tests.csproj" MIME="application/xml" Encoding="utf_8">
                &lt;?xml version="1.0" encoding="utf-8"?&gt;
                &lt;Project Sdk="Microsoft.NET.Sdk"&gt;
                
                  &lt;PropertyGroup&gt;
                    &lt;TargetFramework&gt;net9.0&lt;/TargetFramework&gt;
                    &lt;ImplicitUsings&gt;enable&lt;/ImplicitUsings&gt;
                    &lt;Nullable&gt;enable&lt;/Nullable&gt;
                    &lt;IsPackable&gt;false&lt;/IsPackable&gt;
                  &lt;/PropertyGroup&gt;
                
                  &lt;ItemGroup&gt;
                    &lt;PackageReference Include="coverlet.collector" Version="6.0.4"&gt;
                      &lt;PrivateAssets&gt;all&lt;/PrivateAssets&gt;
                      &lt;IncludeAssets&gt;runtime; build; native; contentfiles; analyzers; buildtransitive&lt;/IncludeAssets&gt;
                    &lt;/PackageReference&gt;
                    &lt;PackageReference Include="Microsoft.NET.Test.Sdk" Version="17.13.0" /&gt;
                    &lt;PackageReference Include="xunit" Version="2.9.3" /&gt;
                    &lt;PackageReference Include="xunit.runner.visualstudio" Version="3.0.2"&gt;
                      &lt;PrivateAssets&gt;all&lt;/PrivateAssets&gt;
                      &lt;IncludeAssets&gt;runtime; build; native; contentfiles; analyzers; buildtransitive&lt;/IncludeAssets&gt;
                    &lt;/PackageReference&gt;
                  &lt;/ItemGroup&gt;
                
                  &lt;ItemGroup&gt;
                    &lt;ProjectReference Include="../../../../Projects/Libraries/Core/FlexCore.Core.Utilities/FlexCore.Core.Utilities.csproj" /&gt;
                  &lt;/ItemGroup&gt;
                
                  &lt;ItemGroup&gt;
                    &lt;Using Include="Xunit" /&gt;
                  &lt;/ItemGroup&gt;
                
                &lt;/Project&gt;
              </File>
            </Folder>
          </Folder>
          <Folder Name="Database">
            <Folder Name="FlexCore.Database.Core.Tests">
              <File Name="ApplicationDbContextTests.cs" MIME="text/plain" Encoding="utf_8" BOM="True">
                ﻿namespace FlexCore.Database.Core.Tests
                {
                    using Microsoft.EntityFrameworkCore;
                    using System;
                
                    public class ApplicationDbContextTest : DbContext
                    {
                        public ApplicationDbContextTest(DbContextOptions&lt;ApplicationDbContextTest&gt; options) : base(options) { }
                
                        public void BeginTransaction() =&gt; Database.BeginTransaction();
                
                        public void CommitTransaction()
                        {
                            if (Database.CurrentTransaction != null)
                            {
                                Database.CurrentTransaction.Commit();
                                Database.CurrentTransaction.Dispose();
                            }
                        }
                
                        public void RollbackTransaction()
                        {
                            if (Database.CurrentTransaction != null)
                            {
                                Database.CurrentTransaction.Rollback();
                                Database.CurrentTransaction.Dispose();
                            }
                        }
                
                        public override void Dispose()
                        {
                            base.Dispose();
                            GC.SuppressFinalize(this);
                        }
                    }
                }
              </File>
              <File Name="DbConnectionFactoryTests.cs" MIME="text/plain" Encoding="utf_8" BOM="True">
                ﻿using Xunit;
                using FlexCore.Database.Core;
                using System.Data;
                using Moq;
                
                public class DbConnectionFactoryTests
                {
                    [Fact]
                    public void CreateConnection_ShouldReturnOpenConnection()
                    {
                        // Arrange
                        var connectionString = "Data Source=:memory:";
                        var factory = new Mock&lt;DbConnectionFactory&gt;(connectionString) { CallBase = true };
                        factory.Setup(f =&gt; f.CreateConnection()).Returns(new Mock&lt;IDbConnection&gt;().Object);
                
                        // Act
                        var connection = factory.Object.CreateConnection();
                
                        // Assert
                        Assert.NotNull(connection);
                    }
                }
              </File>
              <File Name="FlexCore.Database.Core.Tests.csproj" MIME="application/xml" Encoding="utf_8">
                &lt;?xml version='1.0' encoding='utf-8'?&gt;
                &lt;Project Sdk="Microsoft.NET.Sdk"&gt;
                
                  &lt;PropertyGroup&gt;
                    &lt;TargetFramework&gt;net9.0&lt;/TargetFramework&gt;
                    &lt;ImplicitUsings&gt;enable&lt;/ImplicitUsings&gt;
                    &lt;Nullable&gt;enable&lt;/Nullable&gt;
                    &lt;IsPackable&gt;false&lt;/IsPackable&gt;
                  &lt;/PropertyGroup&gt;
                
                  &lt;ItemGroup&gt;
                    &lt;PackageReference Include="coverlet.collector" Version="6.0.4"&gt;
                      &lt;PrivateAssets&gt;all&lt;/PrivateAssets&gt;
                      &lt;IncludeAssets&gt;runtime; build; native; contentfiles; analyzers; buildtransitive&lt;/IncludeAssets&gt;
                    &lt;/PackageReference&gt;
                    &lt;PackageReference Include="Microsoft.Data.Sqlite" Version="9.0.3" /&gt;
                    &lt;PackageReference Include="Microsoft.EntityFrameworkCore.InMemory" Version="9.0.3" /&gt;
                    &lt;PackageReference Include="Microsoft.EntityFrameworkCore.Sqlite" Version="9.0.3" /&gt;
                    &lt;PackageReference Include="Microsoft.Extensions.Logging" Version="9.0.3" /&gt;
                    &lt;PackageReference Include="Microsoft.NET.Test.Sdk" Version="17.13.0" /&gt;
                    &lt;PackageReference Include="Moq" Version="4.20.72" /&gt;
                    &lt;PackageReference Include="xunit" Version="2.9.3" /&gt;
                    &lt;PackageReference Include="xunit.runner.visualstudio" Version="3.0.2"&gt;
                      &lt;PrivateAssets&gt;all&lt;/PrivateAssets&gt;
                      &lt;IncludeAssets&gt;runtime; build; native; contentfiles; analyzers; buildtransitive&lt;/IncludeAssets&gt;
                    &lt;/PackageReference&gt;
                  &lt;/ItemGroup&gt;
                
                  &lt;ItemGroup&gt;
                    &lt;ProjectReference Include="../../../../Projects/Libraries/Database/FlexCore.Database.Core/FlexCore.Database.Core.csproj" /&gt;
                    &lt;ProjectReference Include="../../../../Projects/Libraries/Database/FlexCore.Database.Factory/FlexCore.Database.Factory.csproj" /&gt;
                  &lt;/ItemGroup&gt;
                
                  &lt;ItemGroup&gt;
                    &lt;Using Include="Xunit" /&gt;
                  &lt;/ItemGroup&gt;
                
                &lt;/Project&gt;
              </File>
              <File Name="TransactionManagerTests.cs" MIME="text/plain" Encoding="utf_8" BOM="True">
                ﻿using Xunit;
                using FlexCore.Database.Core;
                using System;
                using System.Transactions;
                using System.Threading.Tasks;
                
                namespace FlexCore.Database.Core.Tests
                {
                    public class TransactionManagerTests
                    {
                        [Fact]
                        public async Task BeginTransactionAsync_ShouldNotThrowException()
                        {
                            var manager = new TransactionManager();
                            var exception = await Record.ExceptionAsync(() =&gt; manager.BeginTransactionAsync());
                            Assert.Null(exception);
                        }
                
                        [Fact]
                        public async Task CommitTransactionAsync_ShouldNotThrowException()
                        {
                            var manager = new TransactionManager();
                            await manager.BeginTransactionAsync();
                            var exception = await Record.ExceptionAsync(() =&gt; manager.CommitTransactionAsync());
                            Assert.Null(exception);
                        }
                
                        [Fact]
                        public async Task RollbackTransactionAsync_ShouldNotThrowException()
                        {
                            var manager = new TransactionManager();
                            await manager.BeginTransactionAsync();
                            var exception = await Record.ExceptionAsync(() =&gt; manager.RollbackTransactionAsync());
                            Assert.Null(exception);
                        }
                
                        [Fact]
                        public async Task BeginDistributedTransactionAsync_ShouldNotThrowException()
                        {
                            var manager = new TransactionManager();
                            var exception = await Record.ExceptionAsync(() =&gt; manager.BeginDistributedTransactionAsync());
                            Assert.Null(exception);
                        }
                    }
                }
              </File>
              <File Name="UnitOfWorkBaseTests.cs" MIME="text/plain" Encoding="utf_8" BOM="True">
                ﻿using Xunit;
                using Moq;
                using FlexCore.Database.Interfaces;
                
                namespace FlexCore.Database.Core.Tests
                {
                    /// &lt;summary&gt;
                    /// Test per verificare il corretto funzionamento della classe UnitOfWorkBase.
                    /// &lt;/summary&gt;
                    public class UnitOfWorkBaseTests
                    {
                        /// &lt;summary&gt;
                        /// Verifica che il metodo Dispose() elimini correttamente il contesto dati.
                        /// &lt;/summary&gt;
                        [Fact]
                        public void Dispose_ShouldDisposeDataContext()
                        {
                            // Arrange: Crea un mock del contesto dati e un'istanza di UnitOfWork
                            var mockDataContext = new Mock&lt;IDataContext&gt;();
                            var unitOfWork = new ConcreteUnitOfWork(mockDataContext.Object);
                
                            // Act: Chiama Dispose() sull'UnitOfWork
                            unitOfWork.Dispose();
                
                            // Assert: Verifica che Dispose() del contesto dati sia stato chiamato una volta
                            mockDataContext.Verify(c =&gt; c.Dispose(), Times.Once);
                        }
                
                        /// &lt;summary&gt;
                        /// Verifica che CommitTransaction() deleghi correttamente l'operazione al contesto dati.
                        /// &lt;/summary&gt;
                        [Fact]
                        public void CommitTransaction_ShouldCallDataContext()
                        {
                            // Arrange: Crea un mock del contesto dati e un'istanza di UnitOfWork
                            var mockDataContext = new Mock&lt;IDataContext&gt;();
                            var unitOfWork = new ConcreteUnitOfWork(mockDataContext.Object);
                
                            // Act: Esegui CommitTransaction()
                            unitOfWork.CommitTransaction();
                
                            // Assert: Verifica che CommitTransaction() del contesto dati sia stato chiamato
                            mockDataContext.Verify(c =&gt; c.CommitTransaction(), Times.Once);
                        }
                
                        // Implementazione concreta di UnitOfWorkBase per i test
                        private class ConcreteUnitOfWork : UnitOfWorkBase
                        {
                            public ConcreteUnitOfWork(IDataContext dataContext) : base(dataContext) { }
                        }
                    }
                }
              </File>
            </Folder>
            <Folder Name="FlexCore.Database.Factory.Tests">
              <File Name="DatabaseProviderFactoryTests.cs" MIME="text/plain" Encoding="utf_8" BOM="True">
                ﻿using Xunit;
                using Moq;
                using FlexCore.Database.Interfaces;
                using System;
                using System.Threading.Tasks;
                
                namespace FlexCore.Database.Factory.Tests
                {
                    /// &lt;summary&gt;
                    /// Test per verificare il corretto funzionamento della classe &lt;see cref="DatabaseProviderFactory"/&gt;.
                    /// &lt;/summary&gt;
                    public class DatabaseProviderFactoryTests
                    {
                        /// &lt;summary&gt;
                        /// Verifica che la factory restituisca un provider registrato correttamente.
                        /// &lt;/summary&gt;
                        [Fact]
                        public void CreateProvider_ShouldReturnRegisteredProvider()
                        {
                            var factory = new DatabaseProviderFactory();
                            factory.RegisterProvider("SQLServer", (conn) =&gt; new Mock&lt;IDbConnectionFactory&gt;().Object);
                            var provider = factory.CreateProvider("SQLServer", "dummy_connection");
                            Assert.NotNull(provider);
                        }
                
                        /// &lt;summary&gt;
                        /// Verifica che la factory sollevi un'eccezione per provider non registrati.
                        /// &lt;/summary&gt;
                        [Fact]
                        public void CreateProvider_ShouldThrowIfNotRegistered()
                        {
                            var factory = new DatabaseProviderFactory();
                            Assert.Throws&lt;NotSupportedException&gt;(() =&gt;
                                factory.CreateProvider("InvalidProvider", "dummy_connection"));
                        }
                    }
                }
              </File>
              <File Name="FlexCore.Database.Factory.Tests.csproj" MIME="application/xml" Encoding="utf_8">
                &lt;?xml version="1.0" encoding="utf-8"?&gt;
                &lt;Project Sdk="Microsoft.NET.Sdk"&gt;
                
                  &lt;PropertyGroup&gt;
                    &lt;TargetFramework&gt;net9.0&lt;/TargetFramework&gt;
                    &lt;ImplicitUsings&gt;enable&lt;/ImplicitUsings&gt;
                    &lt;Nullable&gt;enable&lt;/Nullable&gt;
                    &lt;IsPackable&gt;false&lt;/IsPackable&gt;
                  &lt;/PropertyGroup&gt;
                
                  &lt;ItemGroup&gt;
                    &lt;PackageReference Include="coverlet.collector" Version="6.0.4"&gt;
                      &lt;PrivateAssets&gt;all&lt;/PrivateAssets&gt;
                      &lt;IncludeAssets&gt;runtime; build; native; contentfiles; analyzers; buildtransitive&lt;/IncludeAssets&gt;
                    &lt;/PackageReference&gt;
                    &lt;PackageReference Include="Microsoft.NET.Test.Sdk" Version="17.13.0" /&gt;
                    &lt;PackageReference Include="Moq" Version="4.20.72" /&gt;
                    &lt;PackageReference Include="xunit" Version="2.9.3" /&gt;
                    &lt;PackageReference Include="xunit.runner.visualstudio" Version="3.0.2"&gt;
                      &lt;PrivateAssets&gt;all&lt;/PrivateAssets&gt;
                      &lt;IncludeAssets&gt;runtime; build; native; contentfiles; analyzers; buildtransitive&lt;/IncludeAssets&gt;
                    &lt;/PackageReference&gt;
                  &lt;/ItemGroup&gt;
                
                  &lt;ItemGroup&gt;
                    &lt;ProjectReference Include="../../../../Projects/Libraries/Database/FlexCore.Database.Factory/FlexCore.Database.Factory.csproj" /&gt;
                  &lt;/ItemGroup&gt;
                
                  &lt;ItemGroup&gt;
                    &lt;Using Include="Xunit" /&gt;
                  &lt;/ItemGroup&gt;
                
                &lt;/Project&gt;
              </File>
            </Folder>
            <Folder Name="FlexCore.Database.MariaDB.Tests">
              <File Name="FlexCore.Database.MariaDB.Tests.csproj" MIME="application/xml" Encoding="utf_8">
                &lt;?xml version='1.0' encoding='utf-8'?&gt;
                &lt;Project Sdk="Microsoft.NET.Sdk"&gt;
                	&lt;PropertyGroup&gt;
                		&lt;TargetFramework&gt;net9.0&lt;/TargetFramework&gt;
                		&lt;ImplicitUsings&gt;enable&lt;/ImplicitUsings&gt;
                		&lt;Nullable&gt;enable&lt;/Nullable&gt;
                		&lt;IsPackable&gt;false&lt;/IsPackable&gt;
                	&lt;/PropertyGroup&gt;
                	&lt;ItemGroup&gt;
                		&lt;PackageReference Include="coverlet.collector" Version="6.0.4"&gt;
                			&lt;PrivateAssets&gt;all&lt;/PrivateAssets&gt;
                			&lt;IncludeAssets&gt;runtime; build; native; contentfiles; analyzers; buildtransitive&lt;/IncludeAssets&gt;
                		&lt;/PackageReference&gt;
                		&lt;PackageReference Include="Microsoft.NET.Test.Sdk" Version="17.13.0" /&gt;
                		&lt;PackageReference Include="Moq" Version="4.20.72" /&gt;
                		&lt;PackageReference Include="xunit" Version="2.9.3" /&gt;
                		&lt;PackageReference Include="xunit.runner.visualstudio" Version="3.0.2"&gt;
                			&lt;PrivateAssets&gt;all&lt;/PrivateAssets&gt;
                			&lt;IncludeAssets&gt;runtime; build; native; contentfiles; analyzers; buildtransitive&lt;/IncludeAssets&gt;
                		&lt;/PackageReference&gt;
                	&lt;/ItemGroup&gt;
                	&lt;ItemGroup&gt;
                		&lt;ProjectReference Include="../../../../Projects/Libraries/Database/FlexCore.Database.Core/FlexCore.Database.Core.csproj" /&gt;
                		&lt;ProjectReference Include="../../../../Projects/Libraries/Database/FlexCore.Database.MariaDB/FlexCore.Database.MariaDB.csproj" /&gt;
                	&lt;/ItemGroup&gt;
                &lt;/Project&gt;
              </File>
              <File Name="MariaDBProviderTests.cs" MIME="text/plain" Encoding="utf_8" BOM="True">
                ﻿namespace FlexCore.Database.MariaDB.Tests;
                
                using Xunit;
                using FlexCore.Database.MariaDB;
                using System;
                using System.Data;
                using System.Threading.Tasks;
                using MySqlConnector;
                
                /// &lt;summary&gt;
                /// Test per la classe &lt;see cref="MariaDBProvider"/&gt;.
                /// &lt;/summary&gt;
                public class MariaDBProviderTests
                {
                    private const string TestConnectionString = "Server=localhost;Database=TestDb;User=root;Password=4321;";
                
                    /// &lt;summary&gt;
                    /// Verifica che il costruttore sollevi un'eccezione se la stringa di connessione è nulla o vuota.
                    /// &lt;/summary&gt;
                    [Fact]
                    public void Constructor_ThrowsOnNullOrEmptyConnectionString()
                    {
                        Assert.Throws&lt;ArgumentNullException&gt;(() =&gt; new MariaDBProvider(null!));
                        Assert.Throws&lt;ArgumentNullException&gt;(() =&gt; new MariaDBProvider(""));
                    }
                
                    /// &lt;summary&gt;
                    /// Verifica che CreateConnection restituisca una connessione aperta.
                    /// &lt;/summary&gt;
                    [Fact]
                    public void CreateConnection_ReturnsOpenConnection()
                    {
                        var provider = new MariaDBProvider(TestConnectionString);
                        using var connection = provider.CreateConnection();
                
                        Assert.Equal(ConnectionState.Open, connection.State);
                        Assert.IsType&lt;MySqlConnection&gt;(connection);
                    }
                
                    /// &lt;summary&gt;
                    /// Verifica che CreateConnectionAsync restituisca una connessione aperta.
                    /// &lt;/summary&gt;
                    [Fact]
                    public async Task CreateConnectionAsync_ReturnsOpenConnection()
                    {
                        var provider = new MariaDBProvider(TestConnectionString);
                        using var connection = await provider.CreateConnectionAsync();
                
                        Assert.Equal(ConnectionState.Open, connection.State);
                        Assert.IsType&lt;MySqlConnection&gt;(connection);
                    }
                
                    /// &lt;summary&gt;
                    /// Verifica che CreateConnection sollevi un'eccezione per una stringa di connessione non valida.
                    /// &lt;/summary&gt;
                    [Fact]
                    public void CreateConnection_ThrowsOnInvalidConnectionString()
                    {
                        Assert.Throws&lt;ArgumentException&gt;(() =&gt; new MariaDBProvider("invalid_connection_string").CreateConnection());
                    }
                }
              </File>
            </Folder>
            <Folder Name="FlexCore.Database.SQLite.Tests">
              <File Name="DatabaseProviderFactoryTests.cs" MIME="text/plain" Encoding="utf_8" BOM="True">
                ﻿namespace FlexCore.Database.SQLite.Tests
                {
                    using Xunit;
                    using FlexCore.Database.Factory;
                    using FlexCore.Database.Interfaces;
                    using Moq;
                
                    public class DatabaseProviderFactoryTests
                    {
                        [Fact]
                        public void CreateProvider_ShouldReturnProvider()
                        {
                            // Arrange
                            var factory = new DatabaseProviderFactory();
                            var providerName = "SQLite";
                            var connectionString = "Data Source=:memory:";
                            var mockFactory = new Mock&lt;Func&lt;string, IDbConnectionFactory&gt;&gt;();
                            mockFactory.Setup(f =&gt; f(connectionString)).Returns(new Mock&lt;IDbConnectionFactory&gt;().Object);
                
                            factory.RegisterProvider(providerName, mockFactory.Object);
                
                            // Act
                            var provider = factory.CreateProvider(providerName, connectionString);
                
                            // Assert
                            Assert.NotNull(provider);
                        }
                
                        [Fact]
                        public void CreateProvider_WithUnsupportedProvider_ShouldThrowException()
                        {
                            // Arrange
                            var factory = new DatabaseProviderFactory();
                            var providerName = "UnsupportedProvider";
                            var connectionString = "Data Source=:memory:";
                
                            // Act &amp; Assert
                            Assert.Throws&lt;NotSupportedException&gt;(() =&gt; factory.CreateProvider(providerName, connectionString));
                        }
                    }
                }
              </File>
              <File Name="DbConnectionFactoryTests.cs" MIME="text/plain" Encoding="utf_8" BOM="True">
                ﻿namespace FlexCore.Database.SQLite.Tests
                {
                    using Xunit;
                    using FlexCore.Database.Core;
                    using System.Data;
                    using Moq;
                
                    public class DbConnectionFactoryTests
                    {
                        [Fact]
                        public void CreateConnection_ShouldReturnOpenConnection()
                        {
                            // Arrange
                            var connectionString = "Data Source=:memory:";
                            var factory = new Mock&lt;DbConnectionFactory&gt;(connectionString) { CallBase = true };
                            factory.Setup(f =&gt; f.CreateConnection()).Returns(new Mock&lt;IDbConnection&gt;().Object);
                
                            // Act
                            var connection = factory.Object.CreateConnection();
                
                            // Assert
                            Assert.NotNull(connection);
                        }
                    }
                }
              </File>
              <File Name="FlexCore.Database.SQLite.Tests.csproj" MIME="application/xml" Encoding="utf_8">
                &lt;?xml version="1.0" encoding="utf-8"?&gt;
                &lt;Project Sdk="Microsoft.NET.Sdk"&gt;
                
                  &lt;PropertyGroup&gt;
                    &lt;TargetFramework&gt;net9.0&lt;/TargetFramework&gt;
                    &lt;ImplicitUsings&gt;enable&lt;/ImplicitUsings&gt;
                    &lt;Nullable&gt;enable&lt;/Nullable&gt;
                    &lt;IsPackable&gt;false&lt;/IsPackable&gt;
                  &lt;/PropertyGroup&gt;
                
                  &lt;ItemGroup&gt;
                    &lt;PackageReference Include="coverlet.collector" Version="6.0.4"&gt;
                      &lt;PrivateAssets&gt;all&lt;/PrivateAssets&gt;
                      &lt;IncludeAssets&gt;runtime; build; native; contentfiles; analyzers; buildtransitive&lt;/IncludeAssets&gt;
                    &lt;/PackageReference&gt;
                    &lt;PackageReference Include="Microsoft.Data.Sqlite" Version="9.0.3" /&gt;
                    &lt;PackageReference Include="Microsoft.NET.Test.Sdk" Version="17.13.0" /&gt;
                    &lt;PackageReference Include="Moq" Version="4.20.72" /&gt;
                    &lt;PackageReference Include="xunit" Version="2.9.3" /&gt;
                    &lt;PackageReference Include="xunit.runner.visualstudio" Version="3.0.2"&gt;
                      &lt;PrivateAssets&gt;all&lt;/PrivateAssets&gt;
                      &lt;IncludeAssets&gt;runtime; build; native; contentfiles; analyzers; buildtransitive&lt;/IncludeAssets&gt;
                    &lt;/PackageReference&gt;
                  &lt;/ItemGroup&gt;
                
                  &lt;ItemGroup&gt;
                    &lt;ProjectReference Include="../../../../Projects/Libraries/Database/FlexCore.Database.Core/FlexCore.Database.Core.csproj" /&gt;
                    &lt;ProjectReference Include="../../../../Projects/Libraries/Database/FlexCore.Database.Factory/FlexCore.Database.Factory.csproj" /&gt;
                    &lt;ProjectReference Include="../../../../Projects/Libraries/Database/FlexCore.Database.SQLite/FlexCore.Database.SQLite.csproj" /&gt;
                  &lt;/ItemGroup&gt;
                
                  &lt;ItemGroup&gt;
                    &lt;Using Include="Xunit" /&gt;
                  &lt;/ItemGroup&gt;
                
                &lt;/Project&gt;
              </File>
              <File Name="SQLiteProviderTests.cs" MIME="text/plain" Encoding="utf_8" BOM="True">
                ﻿using Xunit;
                using FlexCore.Database.SQLite;
                using System;
                using System.Data;
                using System.Threading.Tasks;
                using Microsoft.Data.Sqlite;
                
                namespace FlexCore.Database.SQLite.Tests
                {
                    public class SQLiteProviderTests
                    {
                        private const string ConnectionString = "Data Source=:memory:";
                
                        [Fact]
                        public void CreateConnection_ShouldReturnOpenConnection()
                        {
                            var provider = new SQLiteProvider(ConnectionString);
                            using var connection = provider.CreateConnection();
                            Assert.Equal(ConnectionState.Open, connection.State);
                        }
                
                        [Fact]
                        public async Task CreateConnectionAsync_ShouldReturnOpenConnection()
                        {
                            var provider = new SQLiteProvider(ConnectionString);
                            using var connection = await provider.CreateConnectionAsync();
                            Assert.Equal(ConnectionState.Open, connection.State);
                        }
                
                        [Fact]
                        public void Constructor_ShouldThrowException_WhenConnectionStringIsNull()
                        {
                            Assert.Throws&lt;ArgumentNullException&gt;(() =&gt; new SQLiteProvider(null));
                        }
                
                        [Fact]
                        public void Constructor_ShouldThrowException_WhenConnectionStringIsEmpty()
                        {
                            Assert.Throws&lt;ArgumentNullException&gt;(() =&gt; new SQLiteProvider(""));
                        }
                    }
                }
              </File>
            </Folder>
            <Folder Name="FlexCore.Database.SQLServer.Tests">
              <File Name="DatabaseProviderFactoryTests.cs" MIME="text/plain" Encoding="utf_8" BOM="True">
                ﻿namespace FlexCore.Database.SQLServer.Tests
                {
                    using Xunit;
                    using FlexCore.Database.Factory;
                    using FlexCore.Database.Interfaces;
                    using Moq;
                
                    public class DatabaseProviderFactoryTests
                    {
                        [Fact]
                        public void CreateProvider_ShouldReturnProvider()
                        {
                            // Arrange
                            var factory = new DatabaseProviderFactory();
                            var providerName = "SQLServer";
                            var connectionString = "Server=localhost;Database=TestDB;Trusted_Connection=True;";
                            var mockFactory = new Mock&lt;Func&lt;string, IDbConnectionFactory&gt;&gt;();
                            mockFactory.Setup(f =&gt; f(connectionString)).Returns(new Mock&lt;IDbConnectionFactory&gt;().Object);
                
                            factory.RegisterProvider(providerName, mockFactory.Object);
                
                            // Act
                            var provider = factory.CreateProvider(providerName, connectionString);
                
                            // Assert
                            Assert.NotNull(provider);
                        }
                
                        [Fact]
                        public void CreateProvider_WithUnsupportedProvider_ShouldThrowException()
                        {
                            // Arrange
                            var factory = new DatabaseProviderFactory();
                            var providerName = "UnknownProvider";
                            var connectionString = "Server=localhost;Database=TestDB;Trusted_Connection=True;";
                
                            // Act &amp; Assert
                            Assert.Throws&lt;NotSupportedException&gt;(() =&gt; factory.CreateProvider(providerName, connectionString));
                        }
                    }
                }
              </File>
              <File Name="DbConnectionFactoryTests.cs" MIME="text/plain" Encoding="utf_8" BOM="True">
                ﻿namespace FlexCore.Database.SQLServer.Tests
                {
                    using Xunit;
                    using FlexCore.Database.Core;
                    using System.Data;
                    using Moq;
                
                    public class DbConnectionFactoryTests
                    {
                        [Fact]
                        public void CreateConnection_ShouldReturnOpenConnection()
                        {
                            // Arrange
                            var connectionString = "Server=localhost;Database=TestDB;Trusted_Connection=True;";
                            var factory = new Mock&lt;DbConnectionFactory&gt;(connectionString) { CallBase = true };
                            factory.Setup(f =&gt; f.CreateConnection()).Returns(new Mock&lt;IDbConnection&gt;().Object);
                
                            // Act
                            var connection = factory.Object.CreateConnection();
                
                            // Assert
                            Assert.NotNull(connection);
                        }
                    }
                }
              </File>
              <File Name="FlexCore.Database.SQLServer.Tests.csproj" MIME="application/xml" Encoding="utf_8">
                &lt;?xml version="1.0" encoding="utf-8"?&gt;
                &lt;Project Sdk="Microsoft.NET.Sdk"&gt;
                
                  &lt;PropertyGroup&gt;
                    &lt;TargetFramework&gt;net9.0&lt;/TargetFramework&gt;
                    &lt;ImplicitUsings&gt;enable&lt;/ImplicitUsings&gt;
                    &lt;Nullable&gt;enable&lt;/Nullable&gt;
                    &lt;IsPackable&gt;false&lt;/IsPackable&gt;
                  &lt;/PropertyGroup&gt;
                
                  &lt;ItemGroup&gt;
                    &lt;PackageReference Include="coverlet.collector" Version="6.0.4"&gt;
                      &lt;PrivateAssets&gt;all&lt;/PrivateAssets&gt;
                      &lt;IncludeAssets&gt;runtime; build; native; contentfiles; analyzers; buildtransitive&lt;/IncludeAssets&gt;
                    &lt;/PackageReference&gt;
                    &lt;PackageReference Include="Microsoft.Data.SqlClient" Version="6.0.1" /&gt;
                    &lt;PackageReference Include="Microsoft.NET.Test.Sdk" Version="17.13.0" /&gt;
                    &lt;PackageReference Include="Moq" Version="4.20.72" /&gt;
                    &lt;PackageReference Include="xunit" Version="2.9.3" /&gt;
                    &lt;PackageReference Include="xunit.runner.visualstudio" Version="3.0.2"&gt;
                      &lt;PrivateAssets&gt;all&lt;/PrivateAssets&gt;
                      &lt;IncludeAssets&gt;runtime; build; native; contentfiles; analyzers; buildtransitive&lt;/IncludeAssets&gt;
                    &lt;/PackageReference&gt;
                  &lt;/ItemGroup&gt;
                
                  &lt;ItemGroup&gt;
                    &lt;ProjectReference Include="../../../../Projects/Libraries/Database/FlexCore.Database.Core/FlexCore.Database.Core.csproj" /&gt;
                    &lt;ProjectReference Include="../../../../Projects/Libraries/Database/FlexCore.Database.Factory/FlexCore.Database.Factory.csproj" /&gt;
                    &lt;ProjectReference Include="../../../../Projects/Libraries/Database/FlexCore.Database.SQLServer/FlexCore.Database.SQLServer.csproj" /&gt;
                  &lt;/ItemGroup&gt;
                
                  &lt;ItemGroup&gt;
                    &lt;Using Include="Xunit" /&gt;
                  &lt;/ItemGroup&gt;
                
                &lt;/Project&gt;
              </File>
              <File Name="SQLServerProviderTests.cs" MIME="text/plain" Encoding="utf_8" BOM="True">
                ﻿using Xunit;
                using FlexCore.Database.SQLServer;
                using System;
                using System.Data;
                using System.Threading.Tasks;
                using Microsoft.Data.SqlClient;
                using Moq;
                
                namespace FlexCore.Database.SQLServer.Tests
                {
                    public class SQLServerProviderTests
                    {
                        private const string ConnectionString = "Server=localhost;Database=TestDB;Trusted_Connection=True;TrustServerCertificate=True;";
                
                        [Fact]
                        public void CreateConnection_ShouldReturnOpenConnection()
                        {
                            var provider = new SQLServerProvider(ConnectionString);
                            using var connection = provider.CreateConnection();
                            Assert.NotNull(connection);
                        }
                
                        [Fact]
                        public async Task CreateConnectionAsync_ShouldReturnOpenConnection()
                        {
                            var provider = new SQLServerProvider(ConnectionString);
                            using var connection = await provider.CreateConnectionAsync();
                            Assert.NotNull(connection);
                        }
                
                        [Fact]
                        public void Constructor_ShouldThrowException_WhenConnectionStringIsNull()
                        {
                            Assert.Throws&lt;ArgumentNullException&gt;(() =&gt; new SQLServerProvider(null));
                        }
                
                        [Fact]
                        public void Constructor_ShouldThrowException_WhenConnectionStringIsEmpty()
                        {
                            Assert.Throws&lt;ArgumentNullException&gt;(() =&gt; new SQLServerProvider(""));
                        }
                
                        [Fact]
                        public void CreateConnection_ShouldUseMockedConnection()
                        {
                            var mockConnection = new Mock&lt;IDbConnection&gt;();
                            mockConnection.Setup(c =&gt; c.State).Returns(ConnectionState.Open);
                            var provider = new SQLServerProvider(ConnectionString);
                            var connection = provider.CreateConnection();
                            Assert.Equal(ConnectionState.Open, connection.State);
                        }
                    }
                }
              </File>
            </Folder>
          </Folder>
          <Folder Name="Infrastructure">
            <Folder Name="FlexCore.Infrastructure.Commands.Tests">
              <File Name="CommandBaseTests.cs" MIME="text/plain" Encoding="utf_8" BOM="True">
                ﻿using Xunit;
                using FlexCore.Infrastructure.Commands;
                
                namespace FlexCore.Infrastructure.Commands.Tests
                {
                    public class CommandBaseTests
                    {
                        private class TestCommand : CommandBase
                        {
                            public bool Executed { get; private set; }
                            public override void Execute() =&gt; Executed = true;
                        }
                
                        [Fact]
                        public void Execute_ShouldSetExecutedToTrue()
                        {
                            var command = new TestCommand();
                            command.Execute();
                            Assert.True(command.Executed);
                        }
                    }
                }
              </File>
              <File Name="EventBusTests.cs" MIME="text/plain" Encoding="utf_8" BOM="True">
                ﻿namespace FlexCore.Infrastructure.Commands.Tests;
                
                using Xunit;
                using Moq;
                using FlexCore.Infrastructure.Events;
                using System;
                using System.Threading.Tasks;
                using Microsoft.Extensions.DependencyInjection;
                
                /// &lt;summary&gt;
                /// Test per l'EventBus.
                /// &lt;/summary&gt;
                public class EventBusTests
                {
                    private readonly EventBus _eventBus;
                    private readonly Mock&lt;IServiceProvider&gt; _serviceProviderMock;
                
                    /// &lt;summary&gt;
                    /// Inizializza una nuova istanza di &lt;see cref="EventBusTests"/&gt;.
                    /// &lt;/summary&gt;
                    public EventBusTests()
                    {
                        _serviceProviderMock = new Mock&lt;IServiceProvider&gt;();
                        _eventBus = new EventBus(_serviceProviderMock.Object);
                    }
                
                    /// &lt;summary&gt;
                    /// Evento di test.
                    /// &lt;/summary&gt;
                    public class TestEvent : IEvent { }
                
                    /// &lt;summary&gt;
                    /// Verifica che PublishAsync notifichi l'handler corretto.
                    /// &lt;/summary&gt;
                    [Fact]
                    public async Task PublishAsync_ShouldNotifyHandler()
                    {
                        var mockHandler = new Mock&lt;IEventHandler&lt;TestEvent&gt;&gt;();
                        _eventBus.Subscribe(mockHandler.Object);
                        var testEvent = new TestEvent();
                
                        await _eventBus.PublishAsync(testEvent);
                
                        mockHandler.Verify(h =&gt; h.HandleAsync(testEvent), Times.Once);
                    }
                }
              </File>
              <File Name="FlexCore.Infrastructure.Commands.Tests.csproj" MIME="application/xml" Encoding="utf_8">
                &lt;?xml version='1.0' encoding='utf-8'?&gt;
                &lt;Project Sdk="Microsoft.NET.Sdk"&gt;
                	&lt;PropertyGroup&gt;
                		&lt;TargetFramework&gt;net9.0&lt;/TargetFramework&gt;
                		&lt;ImplicitUsings&gt;enable&lt;/ImplicitUsings&gt;
                		&lt;Nullable&gt;enable&lt;/Nullable&gt;
                		&lt;IsPackable&gt;false&lt;/IsPackable&gt;
                	&lt;/PropertyGroup&gt;
                
                	&lt;ItemGroup&gt;
                		&lt;PackageReference Include="Microsoft.NET.Test.Sdk" Version="17.13.0" /&gt;
                		&lt;PackageReference Include="Moq" Version="4.20.72" /&gt;
                		&lt;PackageReference Include="xunit" Version="2.9.3" /&gt;
                		&lt;PackageReference Include="xunit.runner.visualstudio" Version="3.0.2"&gt;
                		  &lt;PrivateAssets&gt;all&lt;/PrivateAssets&gt;
                		  &lt;IncludeAssets&gt;runtime; build; native; contentfiles; analyzers; buildtransitive&lt;/IncludeAssets&gt;
                		&lt;/PackageReference&gt;
                	&lt;/ItemGroup&gt;
                
                	&lt;ItemGroup&gt;
                		&lt;ProjectReference Include="../../../../Projects/Libraries/Infrastructure/FlexCore.Infrastructure.Commands/FlexCore.Infrastructure.Commands.csproj" /&gt;
                		&lt;ProjectReference Include="../../../../Projects/Libraries/Infrastructure/FlexCore.Infrastructure.Events/FlexCore.Infrastructure.Events.csproj" /&gt;
                	&lt;/ItemGroup&gt;
                &lt;/Project&gt;
              </File>
            </Folder>
          </Folder>
          <Folder Name="Logging">
            <Folder Name="FlexCore.Logging.Console.Tests">
              <File Name="ConsoleLoggerTests.cs" MIME="text/plain" Encoding="utf_8" BOM="True">
                ﻿using Xunit;
                using System;
                using System.IO;
                using FlexCore.Logging.Console;
                
                namespace FlexCore.Logging.Console.Tests;
                
                /// &lt;summary&gt;
                /// Test unitari per la classe &lt;see cref="ConsoleLogger"/&gt;.
                /// &lt;/summary&gt;
                public class ConsoleLoggerTests
                {
                    /// &lt;summary&gt;
                    /// Verifica che il logger scriva correttamente su console.
                    /// &lt;/summary&gt;
                    [Fact]
                    public void ConsoleLogger_Should_Log_Correctly()
                    {
                        // Reindirizza l'output della console
                        using var sw = new StringWriter();
                        System.Console.SetOut(sw);
                
                        var logger = new ConsoleLogger();
                
                        // Esegue il log di prova
                        logger.Debug("Test Debug");
                        logger.Info("Test Info");
                        logger.Warn("Test Warn");
                        logger.Error("Test Error");
                        logger.Fatal("Test Fatal");
                
                        // Legge l'output e verifica
                        var output = sw.ToString();
                        Assert.Contains("[DEBUG] Test Debug", output);
                        Assert.Contains("[INFO] Test Info", output);
                        Assert.Contains("[WARN] Test Warn", output);
                        Assert.Contains("[ERROR] Test Error", output);
                        Assert.Contains("[FATAL] Test Fatal", output);
                    }
                }
              </File>
              <File Name="FlexCore.Logging.Console.Tests.csproj" MIME="application/xml" Encoding="utf_8">
                &lt;?xml version="1.0" encoding="utf-8"?&gt;
                &lt;Project Sdk="Microsoft.NET.Sdk"&gt;
                
                  &lt;PropertyGroup&gt;
                    &lt;TargetFramework&gt;net9.0&lt;/TargetFramework&gt;
                    &lt;ImplicitUsings&gt;enable&lt;/ImplicitUsings&gt;
                    &lt;Nullable&gt;enable&lt;/Nullable&gt;
                    &lt;IsPackable&gt;false&lt;/IsPackable&gt;
                  &lt;/PropertyGroup&gt;
                
                  &lt;ItemGroup&gt;
                    &lt;PackageReference Include="coverlet.collector" Version="6.0.4"&gt;
                      &lt;PrivateAssets&gt;all&lt;/PrivateAssets&gt;
                      &lt;IncludeAssets&gt;runtime; build; native; contentfiles; analyzers; buildtransitive&lt;/IncludeAssets&gt;
                    &lt;/PackageReference&gt;
                    &lt;PackageReference Include="Microsoft.NET.Test.Sdk" Version="17.13.0" /&gt;
                    &lt;PackageReference Include="xunit" Version="2.9.3" /&gt;
                    &lt;PackageReference Include="xunit.runner.visualstudio" Version="3.0.2"&gt;
                      &lt;PrivateAssets&gt;all&lt;/PrivateAssets&gt;
                      &lt;IncludeAssets&gt;runtime; build; native; contentfiles; analyzers; buildtransitive&lt;/IncludeAssets&gt;
                    &lt;/PackageReference&gt;
                  &lt;/ItemGroup&gt;
                
                  &lt;ItemGroup&gt;
                    &lt;ProjectReference Include="../../../../Projects/Libraries/Logging/FlexCore.Logging.Console/FlexCore.Logging.Console.csproj" /&gt;
                  &lt;/ItemGroup&gt;
                
                  &lt;ItemGroup&gt;
                    &lt;Using Include="Xunit" /&gt;
                  &lt;/ItemGroup&gt;
                
                &lt;/Project&gt;
              </File>
            </Folder>
            <Folder Name="FlexCore.Logging.Core.Tests">
              <File Name="BaseLoggerTests.cs" MIME="text/plain" Encoding="utf_8" BOM="True">
                ﻿using Xunit;
                using System;
                using FleFlexCore.Logging.Core.Base;
                
                namespace FlexCore.Logging.Core.Tests
                {
                    /// &lt;summary&gt;
                    /// Test per la classe BaseLogger
                    /// &lt;/summary&gt;
                    public class BaseLoggerTests
                    {
                        /// &lt;summary&gt;
                        /// Verifica che il logger chiami il metodo Log con il livello e il messaggio corretti.
                        /// &lt;/summary&gt;
                        [Fact]
                        public void Log_ShouldStoreMessageWithLevel()
                        {
                            var logger = new TestLogger();
                            logger.PublicLog("INFO", "Test message");
                
                            Assert.Equal("[INFO] Test message", logger.LastMessage);
                        }
                
                        /// &lt;summary&gt;
                        /// Verifica che il logger gestisca correttamente i messaggi null.
                        /// &lt;/summary&gt;
                        [Fact]
                        public void Log_NullMessage_ShouldNotThrow()
                        {
                            var logger = new TestLogger();
                
                            var exception = Record.Exception(() =&gt; logger.PublicLog("ERROR", null));
                
                            Assert.Null(exception);
                            Assert.Equal("[ERROR] ", logger.LastMessage);
                        }
                
                        /// &lt;summary&gt;
                        /// Implementazione di test per BaseLogger
                        /// &lt;/summary&gt;
                        private class TestLogger : BaseLogger
                        {
                            public string LastMessage { get; private set; } = string.Empty;
                
                            /// &lt;summary&gt;
                            /// Metodo pubblico per chiamare Log nei test.
                            /// &lt;/summary&gt;
                            public void PublicLog(string level, string? message)
                            {
                                Log(level, message ?? string.Empty);
                            }
                
                            protected override void Log(string level, string message)
                            {
                                LastMessage = $"[{level}] {message}";
                            }
                        }
                    }
                }
              </File>
              <File Name="FlexCore.Logging.Core.Tests.csproj" MIME="application/xml" Encoding="utf_8">
                &lt;?xml version="1.0" encoding="utf-8"?&gt;
                &lt;Project Sdk="Microsoft.NET.Sdk"&gt;
                
                  &lt;PropertyGroup&gt;
                    &lt;TargetFramework&gt;net9.0&lt;/TargetFramework&gt;
                    &lt;ImplicitUsings&gt;enable&lt;/ImplicitUsings&gt;
                    &lt;Nullable&gt;enable&lt;/Nullable&gt;
                    &lt;IsPackable&gt;false&lt;/IsPackable&gt;
                  &lt;/PropertyGroup&gt;
                
                  &lt;ItemGroup&gt;
                    &lt;PackageReference Include="coverlet.collector" Version="6.0.4"&gt;
                      &lt;PrivateAssets&gt;all&lt;/PrivateAssets&gt;
                      &lt;IncludeAssets&gt;runtime; build; native; contentfiles; analyzers; buildtransitive&lt;/IncludeAssets&gt;
                    &lt;/PackageReference&gt;
                    &lt;PackageReference Include="Microsoft.Extensions.DependencyInjection" Version="9.0.3" /&gt;
                    &lt;PackageReference Include="Microsoft.NET.Test.Sdk" Version="17.13.0" /&gt;
                    &lt;PackageReference Include="xunit" Version="2.9.3" /&gt;
                    &lt;PackageReference Include="xunit.runner.visualstudio" Version="3.0.2"&gt;
                      &lt;IncludeAssets&gt;runtime; build; native; contentfiles; analyzers; buildtransitive&lt;/IncludeAssets&gt;
                      &lt;PrivateAssets&gt;all&lt;/PrivateAssets&gt;
                    &lt;/PackageReference&gt;
                  &lt;/ItemGroup&gt;
                
                  &lt;ItemGroup&gt;
                    &lt;Using Include="Xunit" /&gt;
                  &lt;/ItemGroup&gt;
                
                  &lt;ItemGroup&gt;
                    &lt;ProjectReference Include="../../../../Projects/Libraries/Logging/FlexCore.Logging.Core/FlexCore.Logging.Core.csproj" /&gt;
                    &lt;ProjectReference Include="../../../../Projects/Libraries/Logging/FlexCore.Logging.Factory/FlexCore.Logging.Factory.csproj" /&gt;
                    &lt;ProjectReference Include="..\..\..\..\Projects\Libraries\Core\FlexCore.Core.Configuration\FlexCore.Core.Configuration.csproj" /&gt;
                	&lt;/ItemGroup&gt;
                
                &lt;/Project&gt;
              </File>
              <File Name="ILoggerTests.cs" MIME="text/plain" Encoding="utf_8" BOM="True">
                ﻿// File: Tests/FlexCore.Logging.Interfaces.Tests/ILoggerTests.cs
                using Xunit;
                using FlexCore.Logging.Core;
                using FlexCore.Logging.Interfaces;
                
                namespace FlexCore.Logging.Core.Tests;
                
                /// &lt;summary&gt;
                /// Test per l'interfaccia &lt;see cref="ILogger"/&gt;
                /// &lt;/summary&gt;
                public class ILoggerTests
                {
                    private class TestLogger : ILogger
                    {
                        public string LastMessage { get; private set; } = string.Empty;
                        public string LastLevel { get; private set; } = string.Empty;
                
                        public void Debug(string message)
                        {
                            LastLevel = "DEBUG";
                            LastMessage = message;
                        }
                
                        public void Info(string message)
                        {
                            LastLevel = "INFO";
                            LastMessage = message;
                        }
                
                        public void Warn(string message)
                        {
                            LastLevel = "WARN";
                            LastMessage = message;
                        }
                
                        public void Error(string message)
                        {
                            LastLevel = "ERROR";
                            LastMessage = message;
                        }
                
                        public void Fatal(string message)
                        {
                            LastLevel = "FATAL";
                            LastMessage = message;
                        }
                    }
                
                    /// &lt;summary&gt;
                    /// Verifica che Debug registri correttamente il messaggio
                    /// &lt;/summary&gt;
                    [Fact]
                    public void Debug_ShouldLogMessage()
                    {
                        var logger = new TestLogger();
                        logger.Debug("Test debug");
                        Assert.Equal("DEBUG", logger.LastLevel);
                        Assert.Equal("Test debug", logger.LastMessage);
                    }
                
                    /// &lt;summary&gt;
                    /// Verifica che Info registri correttamente il messaggio
                    /// &lt;/summary&gt;
                    [Fact]
                    public void Info_ShouldLogMessage()
                    {
                        var logger = new TestLogger();
                        logger.Info("Test info");
                        Assert.Equal("INFO", logger.LastLevel);
                        Assert.Equal("Test info", logger.LastMessage);
                    }
                
                    /// &lt;summary&gt;
                    /// Verifica che Warn registri correttamente il messaggio
                    /// &lt;/summary&gt;
                    [Fact]
                    public void Warn_ShouldLogMessage()
                    {
                        var logger = new TestLogger();
                        logger.Warn("Test warn");
                        Assert.Equal("WARN", logger.LastLevel);
                        Assert.Equal("Test warn", logger.LastMessage);
                    }
                
                    /// &lt;summary&gt;
                    /// Verifica che Error registri correttamente il messaggio
                    /// &lt;/summary&gt;
                    [Fact]
                    public void Error_ShouldLogMessage()
                    {
                        var logger = new TestLogger();
                        logger.Error("Test error");
                        Assert.Equal("ERROR", logger.LastLevel);
                        Assert.Equal("Test error", logger.LastMessage);
                    }
                
                    /// &lt;summary&gt;
                    /// Verifica che Fatal registri correttamente il messaggio
                    /// &lt;/summary&gt;
                    [Fact]
                    public void Fatal_ShouldLogMessage()
                    {
                        var logger = new TestLogger();
                        logger.Fatal("Test fatal");
                        Assert.Equal("FATAL", logger.LastLevel);
                        Assert.Equal("Test fatal", logger.LastMessage);
                    }
                }
              </File>
              <File Name="ILoggingFactoryTests.cs" MIME="text/plain" Encoding="utf_8" BOM="True">
                ﻿// File: Tests/FlexCore.Logging.Interfaces.Tests/ILoggingFactoryTests.cs
                using Xunit;
                using FlexCore.Logging.Interfaces;
                
                namespace FlexCore.Logging.Core.Tests;
                
                /// &lt;summary&gt;
                /// Test per l'interfaccia &lt;see cref="ILoggingFactory"/&gt; 
                /// &lt;/summary&gt;
                public class ILoggingFactoryTests
                {
                    private class TestProvider : ILoggingProvider
                    {
                        public void Debug(string message) { }
                        public void Info(string message) { }
                        public void Warn(string message) { }
                        public void Error(string message) { }
                        public void Fatal(string message) { }
                    }
                
                    private class TestFactory : ILoggingFactory
                    {
                        public ILoggingProvider CreateProvider(string providerName) =&gt; new TestProvider();
                    }
                
                    /// &lt;summary&gt;
                    /// Verifica che CreateProvider restituisca un'istanza valida
                    /// &lt;/summary&gt;
                    [Fact]
                    public void CreateProvider_ShouldReturnProvider()
                    {
                        var factory = new TestFactory();
                        var provider = factory.CreateProvider("test");
                        Assert.NotNull(provider);
                        Assert.IsAssignableFrom&lt;ILoggingProvider&gt;(provider);
                    }
                }
              </File>
              <File Name="ILoggingProviderExtensionsTests.cs" MIME="text/plain" Encoding="utf_8" BOM="True">
                ﻿// File: Tests/FlexCore.Logging.Interfaces.Tests/ILoggingProviderExtensionsTests.cs
                using Xunit;
                using FlexCore.Logging.Interfaces;
                
                namespace FlexCore.Logging.Core.Tests;
                
                /// &lt;summary&gt;
                /// Test per gli extension methods di &lt;see cref="ILoggingProvider"/&gt;
                /// &lt;/summary&gt;
                public class ILoggingProviderExtensionsTests
                {
                    private class TestProvider : ILoggingProvider
                    {
                        public string LastLevel { get; private set; } = string.Empty;
                        public string LastMessage { get; private set; } = string.Empty;
                
                        public void Debug(string message)
                        {
                            LastLevel = "DEBUG";
                            LastMessage = message;
                        }
                
                        public void Info(string message)
                        {
                            LastLevel = "INFO";
                            LastMessage = message;
                        }
                
                        public void Warn(string message)
                        {
                            LastLevel = "WARN";
                            LastMessage = message;
                        }
                
                        public void Error(string message)
                        {
                            LastLevel = "ERROR";
                            LastMessage = message;
                        }
                
                        public void Fatal(string message)
                        {
                            LastLevel = "FATAL";
                            LastMessage = message;
                        }
                    }
                
                    /// &lt;summary&gt;
                    /// Verifica che Debug invochi il metodo corretto
                    /// &lt;/summary&gt;
                    [Fact]
                    public void Debug_ShouldCallDebugMethod()
                    {
                        var provider = new TestProvider();
                        provider.Debug("test message");
                        Assert.Equal("DEBUG", provider.LastLevel);
                        Assert.Equal("test message", provider.LastMessage);
                    }
                
                    /// &lt;summary&gt;
                    /// Verifica che Info invochi il metodo corretto
                    /// &lt;/summary&gt;
                    [Fact]
                    public void Info_ShouldCallInfoMethod()
                    {
                        var provider = new TestProvider();
                        provider.Info("test message");
                        Assert.Equal("INFO", provider.LastLevel);
                        Assert.Equal("test message", provider.LastMessage);
                    }
                }
              </File>
              <File Name="ILoggingProviderTests.cs" MIME="text/plain" Encoding="utf_8" BOM="True">
                ﻿// File: Tests/FlexCore.Logging.Interfaces.Tests/ILoggingProviderTests.cs
                using Xunit;
                using FlexCore.Logging.Interfaces;
                
                namespace FlexCore.Logging.Core.Tests;
                
                /// &lt;summary&gt;
                /// Test per l'interfaccia &lt;see cref="ILoggingProvider"/&gt;
                /// &lt;/summary&gt;
                public class ILoggingProviderTests
                {
                    private class TestProvider : ILoggingProvider
                    {
                        public string LastMessage { get; private set; } = string.Empty;
                
                        public void Debug(string message) =&gt; LastMessage = $"DEBUG: {message}";
                        public void Info(string message) =&gt; LastMessage = $"INFO: {message}";
                        public void Warn(string message) =&gt; LastMessage = $"WARN: {message}";
                        public void Error(string message) =&gt; LastMessage = $"ERROR: {message}";
                        public void Fatal(string message) =&gt; LastMessage = $"FATAL: {message}";
                    }
                
                    /// &lt;summary&gt;
                    /// Verifica che ILoggingProvider implementi correttamente ILogger
                    /// &lt;/summary&gt;
                    [Fact]
                    public void ShouldImplementILoggerInterface()
                    {
                        ILoggingProvider provider = new TestProvider();
                        provider.Debug("Test");
                        Assert.StartsWith("DEBUG:", ((TestProvider)provider).LastMessage);
                    }
                }
              </File>
              <File Name="Log4NetExceptionTests.cs" MIME="text/plain" Encoding="utf_8" BOM="True">
                ﻿using Xunit;
                using System;
                using FlexCore.Logging.Core;
                using FleFlexCore.Logging.Core.Exceptions;
                
                namespace FlexCore.Logging.Core.Tests
                {
                    /// &lt;summary&gt;
                    /// Test per la classe Log4NetException
                    /// &lt;/summary&gt;
                    public class Log4NetExceptionTests
                    {
                        /// &lt;summary&gt;
                        /// Verifica che Log4NetException possa essere istanziata con un messaggio.
                        /// &lt;/summary&gt;
                        [Fact]
                        public void Constructor_WithMessage_ShouldSetMessage()
                        {
                            var ex = new Log4NetException("Test exception");
                
                            Assert.Equal("Test exception", ex.Message);
                        }
                
                        /// &lt;summary&gt;
                        /// Verifica che Log4NetException possa essere istanziata con un messaggio e un'inner exception.
                        /// &lt;/summary&gt;
                        [Fact]
                        public void Constructor_WithMessageAndInnerException_ShouldSetProperties()
                        {
                            var innerEx = new Exception("Inner exception");
                            var ex = new Log4NetException("Test exception", innerEx);
                
                            Assert.Equal("Test exception", ex.Message);
                            Assert.Equal(innerEx, ex.InnerException);
                        }
                    }
                }
              </File>
              <File Name="LoggingExceptionHandlerTests.cs" MIME="text/plain" Encoding="utf_8" BOM="True">
                ﻿using Xunit;
                using System;
                using FleFlexCore.Logging.Core.Base;
                using FleFlexCore.Logging.Core.Exceptions;
                
                namespace FlexCore.Logging.Core.Tests;
                
                public class LoggingExceptionHandlerTests
                {
                    [Fact]
                    public void HandleException_ShouldWrapGenericException()
                    {
                        var originalEx = new Exception("Test error");
                        const string operation = "TestOperation";
                
                        var resultEx = Assert.Throws&lt;LoggingException&gt;(
                            () =&gt; LoggingExceptionHandler.HandleException(originalEx, operation));
                
                        Assert.Equal(originalEx, resultEx.InnerException);
                        Assert.Contains(operation, resultEx.Message);
                    }
                
                    [Fact]
                    public void HandleException_ShouldAddLog4NetPrefix()
                    {
                        var originalEx = new Log4NetException("Config error");
                        const string operation = "Log4NetConfig";
                
                        var resultEx = Assert.Throws&lt;LoggingException&gt;(
                            () =&gt; LoggingExceptionHandler.HandleException(originalEx, operation));
                
                        Assert.Contains("Log4Net", resultEx.Message);
                        Assert.Equal(originalEx, resultEx.InnerException);
                    }
                
                    [Fact]
                    public void HandleException_ShouldHandleNullOperation()
                    {
                        var originalEx = new Exception("Test error");
                
                        var resultEx = Assert.Throws&lt;LoggingException&gt;(
                            () =&gt; LoggingExceptionHandler.HandleException(originalEx, null!));
                
                        Assert.Contains("logging", resultEx.Message);
                    }
                }
              </File>
              <File Name="LoggingExceptionTests.cs" MIME="text/plain" Encoding="ascii">
                // File: Tests/FlexCore.Logging.Core.Tests/LoggingExceptionTests.cs
                using Xunit;
                using System;
                using FleFlexCore.Logging.Core.Exceptions;
                
                namespace FlexCore.Logging.Core.Tests;
                
                public class LoggingExceptionTests
                {
                    [Fact]
                    public void Constructor_WithMessageAndInnerException_ShouldSetBoth()
                    {
                        var innerEx = new Exception("Inner error");
                        var ex = new LoggingException("Test message", innerEx);
                        Assert.Equal("Test message", ex.Message);
                        Assert.Equal(innerEx, ex.InnerException);
                    }
                }
              </File>
              <File Name="LoggingProviderBaseTests.cs" MIME="text/plain" Encoding="utf_8" BOM="True">
                ﻿using Xunit;
                using System;
                using FleFlexCore.Logging.Core.Base;
                
                namespace FlexCore.Logging.Core.Tests
                {
                    /// &lt;summary&gt;
                    /// Test per la classe LoggingProviderBase
                    /// &lt;/summary&gt;
                    public class LoggingProviderBaseTests
                    {
                        /// &lt;summary&gt;
                        /// Verifica che il provider registri il messaggio corretto.
                        /// &lt;/summary&gt;
                        [Fact]
                        public void Log_ShouldStoreMessage()
                        {
                            var provider = new TestLoggingProvider();
                            provider.Info("Test message");
                
                            Assert.Equal("[INFO] Test message", provider.LastMessage);
                        }
                
                        /// &lt;summary&gt;
                        /// Verifica che il provider gestisca correttamente i messaggi null.
                        /// &lt;/summary&gt;
                        [Fact]
                        public void Log_NullMessage_ShouldNotThrow()
                        {
                            var provider = new TestLoggingProvider();
                
                            var exception = Record.Exception(() =&gt; provider.Error(null!));
                
                            Assert.Null(exception);
                            Assert.Equal("[ERROR] ", provider.LastMessage);
                        }
                
                        /// &lt;summary&gt;
                        /// Implementazione di test per LoggingProviderBase
                        /// &lt;/summary&gt;
                        private class TestLoggingProvider : LoggingProviderBase
                        {
                            public string LastMessage { get; private set; } = string.Empty;
                
                            public override void Debug(string message) =&gt; LastMessage = $"[DEBUG] {message}";
                            public override void Info(string message) =&gt; LastMessage = $"[INFO] {message}";
                            public override void Warn(string message) =&gt; LastMessage = $"[WARN] {message}";
                            public override void Error(string message) =&gt; LastMessage = $"[ERROR] {message}";
                            public override void Fatal(string message) =&gt; LastMessage = $"[FATAL] {message}";
                        }
                    }
                }
              </File>
              <File Name="LoggingProviderFactoryTests.cs" MIME="text/plain" Encoding="utf_8" BOM="True">
                ﻿using Xunit;
                using System;
                using FlexCore.Logging.Core;
                using FlexCore.Logging.Factory;
                using FlexCore.Logging.Interfaces;
                
                namespace FlexCore.Logging.Core.Tests
                {
                    /// &lt;summary&gt;
                    /// Test per la classe LoggingProviderFactory
                    /// &lt;/summary&gt;
                    public class LoggingProviderFactoryTests
                    {
                        /// &lt;summary&gt;
                        /// Verifica che il factory registri e restituisca correttamente un provider.
                        /// &lt;/summary&gt;
                        [Fact]
                        public void RegisterProvider_ShouldStoreAndReturnProvider()
                        {
                            var factory = new LoggingProviderFactory();
                            factory.RegisterProvider("TestProvider", () =&gt; new TestLoggingProvider());
                
                            var provider = factory.CreateProvider("TestProvider");
                
                            Assert.NotNull(provider);
                            Assert.IsType&lt;TestLoggingProvider&gt;(provider);
                        }
                
                        /// &lt;summary&gt;
                        /// Verifica che la creazione di un provider non registrato generi un'eccezione.
                        /// &lt;/summary&gt;
                        [Fact]
                        public void CreateProvider_UnregisteredProvider_ShouldThrowException()
                        {
                            var factory = new LoggingProviderFactory();
                
                            Assert.Throws&lt;NotSupportedException&gt;(() =&gt; factory.CreateProvider("NonExistent"));
                        }
                
                        /// &lt;summary&gt;
                        /// Implementazione di test per ILoggingProvider
                        /// &lt;/summary&gt;
                        private class TestLoggingProvider : ILoggingProvider
                        {
                            public void Debug(string message) { }
                            public void Info(string message) { }
                            public void Warn(string message) { }
                            public void Error(string message) { }
                            public void Fatal(string message) { }
                            public void Log(string message) { }
                        }
                    }
                }
              </File>
              <File Name="LoggingSettingsTests.cs" MIME="text/plain" Encoding="utf_8" BOM="True">
                ﻿using Xunit;
                using System.Collections.Generic;
                using FlexCore.Core.Configuration.Models;
                
                namespace FlexCore.Logging.Core.Tests
                {
                    /// &lt;summary&gt;
                    /// Test per la classe LoggingSettings
                    /// &lt;/summary&gt;
                    public class LoggingSettingsTests
                    {
                        /// &lt;summary&gt;
                        /// Verifica che i valori predefiniti delle impostazioni di logging siano corretti.
                        /// &lt;/summary&gt;
                        [Fact]
                        public void DefaultSettings_ShouldHaveExpectedValues()
                        {
                            var settings = new LoggingSettings
                            {
                                Enabled = true,
                                Level = "Information",
                                Console = new ConsoleLoggingSettings
                                {
                                    IncludeScopes = false,
                                    LogLevel = new LogLevelSettings
                                    {
                                        Default = "Warning",
                                        System = "Error",
                                        Microsoft = "Error"
                                    }
                                },
                                Log4Net = new Log4NetSettings
                                {
                                    ConfigFile = "log4net.config",
                                    LogLevel = new LogLevelSettings
                                    {
                                        Default = "Debug",
                                        System = "Error",
                                        Microsoft = "Error"
                                    }
                                },
                                Serilog = new SerilogSettings
                                {
                                    MinimumLevel = new MinimumLevelSettings
                                    {
                                        Default = "Information",
                                        Override = new Dictionary&lt;string, string&gt; { { "Microsoft", "Warning" } }
                                    }
                                }
                            };
                
                            Assert.True(settings.Enabled);
                            Assert.Equal("Information", settings.Level);
                            Assert.NotNull(settings.Console);
                            Assert.NotNull(settings.Log4Net);
                            Assert.NotNull(settings.Serilog);
                        }
                
                        /// &lt;summary&gt;
                        /// Verifica che sia possibile modificare le impostazioni di logging.
                        /// &lt;/summary&gt;
                        [Fact]
                        public void CanModifyLoggingSettings()
                        {
                            var settings = new LoggingSettings
                            {
                                Enabled = false,
                                Level = "Debug",
                                Console = new ConsoleLoggingSettings
                                {
                                    IncludeScopes = true,
                                    LogLevel = new LogLevelSettings
                                    {
                                        Default = "Error",
                                        System = "Warning",
                                        Microsoft = "Warning"
                                    }
                                },
                                Log4Net = new Log4NetSettings
                                {
                                    ConfigFile = "custom_log4net.config",
                                    LogLevel = new LogLevelSettings
                                    {
                                        Default = "Info",
                                        System = "Debug",
                                        Microsoft = "Debug"
                                    }
                                },
                                Serilog = new SerilogSettings
                                {
                                    MinimumLevel = new MinimumLevelSettings
                                    {
                                        Default = "Debug",
                                        Override = new Dictionary&lt;string, string&gt; { { "Microsoft", "Error" } }
                                    }
                                }
                            };
                
                            Assert.False(settings.Enabled);
                            Assert.Equal("Debug", settings.Level);
                            Assert.True(settings.Console.IncludeScopes);
                            Assert.Equal("Error", settings.Console.LogLevel.Default);
                            Assert.Equal("Debug", settings.Log4Net.LogLevel.System);
                            Assert.Equal("Debug", settings.Serilog.MinimumLevel.Default);
                        }
                    }
                }
              </File>
              <File Name="SerilogExceptionTests.cs" MIME="text/plain" Encoding="utf_8" BOM="True">
                ﻿using Xunit;
                using System;
                using FlexCore.Logging.Core;
                using FleFlexCore.Logging.Core.Exceptions;
                
                namespace FlexCore.Logging.Core.Tests
                {
                    /// &lt;summary&gt;
                    /// Test per la classe SerilogException
                    /// &lt;/summary&gt;
                    public class SerilogExceptionTests
                    {
                        /// &lt;summary&gt;
                        /// Verifica che SerilogException possa essere istanziata con un messaggio.
                        /// &lt;/summary&gt;
                        [Fact]
                        public void Constructor_WithMessage_ShouldSetMessage()
                        {
                            var ex = new SerilogException("Test exception");
                
                            Assert.Equal("Test exception", ex.Message);
                        }
                
                        /// &lt;summary&gt;
                        /// Verifica che SerilogException possa essere istanziata con un messaggio e un'inner exception.
                        /// &lt;/summary&gt;
                        [Fact]
                        public void Constructor_WithMessageAndInnerException_ShouldSetProperties()
                        {
                            var innerEx = new Exception("Inner exception");
                            var ex = new SerilogException("Test exception", innerEx);
                
                            Assert.Equal("Test exception", ex.Message);
                            Assert.Equal(innerEx, ex.InnerException);
                        }
                    }
                }
              </File>
            </Folder>
            <Folder Name="FlexCore.Logging.Factory.Tests">
              <File Name="FlexCore.Logging.Factory.Tests.csproj" MIME="application/xml" Encoding="utf_8">
                &lt;?xml version="1.0" encoding="utf-8"?&gt;
                &lt;Project Sdk="Microsoft.NET.Sdk"&gt;
                
                  &lt;PropertyGroup&gt;
                    &lt;TargetFramework&gt;net9.0&lt;/TargetFramework&gt;
                    &lt;ImplicitUsings&gt;enable&lt;/ImplicitUsings&gt;
                    &lt;Nullable&gt;enable&lt;/Nullable&gt;
                    &lt;IsPackable&gt;false&lt;/IsPackable&gt;
                  &lt;/PropertyGroup&gt;
                
                  &lt;ItemGroup&gt;
                    &lt;PackageReference Include="coverlet.collector" Version="6.0.4"&gt;
                      &lt;PrivateAssets&gt;all&lt;/PrivateAssets&gt;
                      &lt;IncludeAssets&gt;runtime; build; native; contentfiles; analyzers; buildtransitive&lt;/IncludeAssets&gt;
                    &lt;/PackageReference&gt;
                    &lt;PackageReference Include="Microsoft.Extensions.DependencyInjection" Version="9.0.3" /&gt;
                    &lt;PackageReference Include="Microsoft.NET.Test.Sdk" Version="17.13.0" /&gt;
                    &lt;PackageReference Include="Moq" Version="4.20.72" /&gt;
                    &lt;PackageReference Include="xunit" Version="2.9.3" /&gt;
                    &lt;PackageReference Include="xunit.runner.visualstudio" Version="3.0.2"&gt;
                      &lt;PrivateAssets&gt;all&lt;/PrivateAssets&gt;
                      &lt;IncludeAssets&gt;runtime; build; native; contentfiles; analyzers; buildtransitive&lt;/IncludeAssets&gt;
                    &lt;/PackageReference&gt;
                  &lt;/ItemGroup&gt;
                
                  &lt;ItemGroup&gt;
                    &lt;ProjectReference Include="../../../../Projects/Libraries/Logging/FlexCore.Logging.Console/FlexCore.Logging.Console.csproj" /&gt;
                    &lt;ProjectReference Include="../../../../Projects/Libraries/Logging/FlexCore.Logging.Factory/FlexCore.Logging.Factory.csproj" /&gt;
                  &lt;/ItemGroup&gt;
                
                  &lt;ItemGroup&gt;
                    &lt;Using Include="Xunit" /&gt;
                  &lt;/ItemGroup&gt;
                
                &lt;/Project&gt;
              </File>
              <File Name="LoggingProviderFactoryTests.cs" MIME="text/plain" Encoding="utf_8" BOM="True">
                ﻿// File: Tests/FlexCore.Logging.Factory.Tests/LoggingProviderFactoryTests.cs
                using Xunit;
                using FlexCore.Logging.Interfaces;
                using FlexCore.Logging.Factory;
                using FlexCore.Logging.Console;
                
                namespace FlexCore.Logging.Factory.Tests;
                
                /// &lt;summary&gt;
                /// Test per la classe &lt;see cref="LoggingProviderFactory"/&gt;
                /// &lt;/summary&gt;
                public class LoggingProviderFactoryTests
                {
                    /// &lt;summary&gt;
                    /// Verifica che il metodo RegisterProvider registri correttamente un provider
                    /// &lt;/summary&gt;
                    [Fact]
                    public void RegisterProvider_ShouldStoreProvider()
                    {
                        // Arrange
                        var factory = new LoggingProviderFactory();
                        var consoleProvider = new ConsoleLogger();
                
                        // Act
                        factory.RegisterProvider("console", () =&gt; consoleProvider);
                        var provider = factory.CreateProvider("console");
                
                        // Assert
                        Assert.Equal(consoleProvider, provider);
                    }
                
                    /// &lt;summary&gt;
                    /// Verifica che il metodo CreateProvider sollevi eccezione per provider non registrato
                    /// &lt;/summary&gt;
                    [Fact]
                    public void CreateProvider_ShouldThrowForUnknownProvider()
                    {
                        // Arrange
                        var factory = new LoggingProviderFactory();
                
                        // Act &amp; Assert
                        Assert.Throws&lt;NotSupportedException&gt;(() =&gt; factory.CreateProvider("unknown"));
                    }
                
                    /// &lt;summary&gt;
                    /// Verifica che il metodo RegisterProvider sollevi eccezione per factory nulla
                    /// &lt;/summary&gt;
                    [Fact]
                    public void RegisterProvider_ShouldThrowForNullFactory()
                    {
                        // Arrange
                        var factory = new LoggingProviderFactory();
                
                        // Act &amp; Assert
                        Assert.Throws&lt;ArgumentNullException&gt;(() =&gt; factory.RegisterProvider("test", null!));
                    }
                }
              </File>
              <File Name="LoggingServiceExtensionsTests.cs" MIME="text/plain" Encoding="utf_8" BOM="True">
                ﻿// File: Tests/FlexCore.Logging.Factory.Tests/LoggingServiceExtensionsTests.cs
                using Xunit;
                using Microsoft.Extensions.DependencyInjection;
                using FlexCore.Logging.Interfaces;
                using FlexCore.Logging.Factory;
                
                namespace FlexCore.Logging.Factory.Tests;
                
                /// &lt;summary&gt;
                /// Test per le estensioni DI &lt;see cref="LoggingServiceExtensions"/&gt;
                /// &lt;/summary&gt;
                public class LoggingServiceExtensionsTests
                {
                    private class TestProvider : ILoggingProvider
                    {
                        public void Debug(string message) { }
                        public void Info(string message) { }
                        public void Warn(string message) { }
                        public void Error(string message) { }
                        public void Fatal(string message) { }
                    }
                
                    /// &lt;summary&gt;
                    /// Verifica che il metodo AddLoggingProvider registri i servizi nel container DI
                    /// &lt;/summary&gt;
                    [Fact]
                    public void AddLoggingProvider_ShouldRegisterServices()
                    {
                        // Arrange
                        var services = new ServiceCollection();
                        var factory = new LoggingProviderFactory();
                        factory.RegisterProvider("test", () =&gt; new TestProvider());
                
                        // Act
                        services.AddSingleton&lt;ILoggingFactory&gt;(factory);
                        services.AddSingleton&lt;ILoggingProvider&gt;(factory.CreateProvider("test"));
                
                        // Assert
                        var provider = services.BuildServiceProvider();
                        Assert.NotNull(provider.GetService&lt;ILoggingFactory&gt;());
                        Assert.NotNull(provider.GetService&lt;ILoggingProvider&gt;());
                    }
                }
              </File>
            </Folder>
            <Folder Name="FlexCore.Logging.Log4NetTests">
              <File Name="FlexCore.Logging.Log4NetTests.csproj" MIME="application/xml" Encoding="utf_8">
                &lt;?xml version="1.0" encoding="utf-8"?&gt;
                &lt;Project Sdk="Microsoft.NET.Sdk"&gt;
                	&lt;PropertyGroup&gt;
                		&lt;TargetFramework&gt;net9.0&lt;/TargetFramework&gt;
                		&lt;RootNamespace&gt;FlexCore.Logging.Log4NetTests&lt;/RootNamespace&gt;
                	&lt;/PropertyGroup&gt;
                
                	&lt;ItemGroup&gt;
                		&lt;PackageReference Include="log4net" Version="3.0.4" /&gt;
                		&lt;PackageReference Include="Microsoft.NET.Test.Sdk" Version="17.13.0" /&gt;
                		&lt;PackageReference Include="xunit" Version="2.9.3" /&gt;
                		&lt;PackageReference Include="xunit.runner.visualstudio" Version="3.0.2"&gt;
                		  &lt;PrivateAssets&gt;all&lt;/PrivateAssets&gt;
                		  &lt;IncludeAssets&gt;runtime; build; native; contentfiles; analyzers; buildtransitive&lt;/IncludeAssets&gt;
                		&lt;/PackageReference&gt;
                	&lt;/ItemGroup&gt;
                
                	&lt;ItemGroup&gt;
                		&lt;ProjectReference Include="../../../../Projects/Libraries/Logging/FlexCore.Logging.Log4Net/FlexCore.Logging.Log4Net.csproj" /&gt;
                	&lt;/ItemGroup&gt;
                &lt;/Project&gt;
              </File>
              <File Name="Log4NetLoggerTests.cs" MIME="text/plain" Encoding="utf_8" BOM="True">
                ﻿// File: Tests/FlexCore.Logging.Log4NetTests/Log4NetLoggerTests.cs
                using Xunit;
                using FlexCore.Logging.Log4Net;
                using FlexCore.Logging.Interfaces;
                using System;
                using log4net;
                using log4net.Repository.Hierarchy;
                using log4net.Core;
                using log4net.Appender;
                
                namespace FlexCore.Logging.Log4NetTests;
                
                /// &lt;summary&gt;
                /// Test per la classe &lt;see cref="Log4NetLogger"/&gt;
                /// &lt;/summary&gt;
                public class Log4NetLoggerTests : IDisposable
                {
                    private readonly MemoryAppender _memoryAppender;
                    private readonly ILoggingProvider _logger;
                
                    public Log4NetLoggerTests()
                    {
                        var hierarchy = (Hierarchy)LogManager.GetRepository();
                        _memoryAppender = new MemoryAppender();
                        hierarchy.Root.AddAppender(_memoryAppender);
                        hierarchy.Root.Level = Level.All;
                        hierarchy.Configured = true;
                
                        _logger = new Log4NetLogger();
                    }
                
                    public void Dispose()
                    {
                        _memoryAppender.Clear();
                        LogManager.Shutdown();
                        GC.SuppressFinalize(this);
                    }
                
                    [Fact]
                    public void Debug_ShouldLogMessage()
                    {
                        _logger.Debug("Test message");
                        Assert.Single(_memoryAppender.GetEvents());
                        Assert.Equal("Test message", _memoryAppender.GetEvents()[0].RenderedMessage);
                        Assert.Equal(Level.Debug, _memoryAppender.GetEvents()[0].Level);
                    }
                }
              </File>
            </Folder>
            <Folder Name="FlexCore.Logging.Serilog.Tests">
              <File Name="FlexCore.Logging.Serilog.Tests.csproj" MIME="application/xml" Encoding="utf_8">
                &lt;?xml version="1.0" encoding="utf-8"?&gt;
                &lt;Project Sdk="Microsoft.NET.Sdk"&gt;
                	&lt;PropertyGroup&gt;
                		&lt;TargetFramework&gt;net9.0&lt;/TargetFramework&gt;
                		&lt;RootNamespace&gt;FlexCore.Logging.SerilogTests&lt;/RootNamespace&gt;
                	&lt;/PropertyGroup&gt;
                
                	&lt;ItemGroup&gt;
                		&lt;PackageReference Include="Serilog" Version="4.2.0" /&gt;
                		&lt;PackageReference Include="Serilog.Sinks.TestCorrelator" Version="4.0.0" /&gt;
                		&lt;PackageReference Include="Microsoft.NET.Test.Sdk" Version="17.13.0" /&gt;
                		&lt;PackageReference Include="xunit" Version="2.9.3" /&gt;
                		&lt;PackageReference Include="xunit.runner.visualstudio" Version="3.0.2"&gt;
                		  &lt;PrivateAssets&gt;all&lt;/PrivateAssets&gt;
                		  &lt;IncludeAssets&gt;runtime; build; native; contentfiles; analyzers; buildtransitive&lt;/IncludeAssets&gt;
                		&lt;/PackageReference&gt;
                	&lt;/ItemGroup&gt;
                
                	&lt;ItemGroup&gt;
                		&lt;ProjectReference Include="../../../../Projects/Libraries/Logging/FlexCore.Logging.Serilog/FlexCore.Logging.Serilog.csproj" /&gt;
                	&lt;/ItemGroup&gt;
                &lt;/Project&gt;
              </File>
              <File Name="SerilogLoggerTests.cs" MIME="text/plain" Encoding="utf_8" BOM="True">
                ﻿using Xunit;
                using FlexCore.Logging.Serilog;
                using global::Serilog;
                using Serilog.Sinks.TestCorrelator;
                using System;
                using System.Linq;
                using Serilog.Events;
                using FlexCore.Logging.Interfaces;
                
                namespace FlexCore.Logging.SerilogTests;
                
                public class SerilogLoggerTests : IDisposable
                {
                    private readonly global::Serilog.ILogger _serilogLogger;
                    private readonly ILoggingProvider _logger;
                
                    public SerilogLoggerTests()
                    {
                        _serilogLogger = new LoggerConfiguration()
                            .MinimumLevel.Is(LevelAlias.Minimum)
                            .WriteTo.TestCorrelator()
                            .CreateLogger();
                
                        Log.Logger = _serilogLogger;
                        _logger = new SerilogLogger();
                    }
                
                    public void Dispose()
                    {
                        Log.CloseAndFlush();
                        GC.SuppressFinalize(this);
                    }
                
                    [Fact]
                    public void Debug_ShouldLogMessage()
                    {
                        using (TestCorrelator.CreateContext())
                        {
                            _logger.Debug("Test debug message");
                
                            var events = TestCorrelator.GetLogEventsFromCurrentContext().ToList();
                            Assert.NotEmpty(events);
                            Assert.Contains(events, e =&gt;
                                e.MessageTemplate.Text == "Test debug message" &amp;&amp;
                                e.Level == LogEventLevel.Debug);
                        }
                    }
                
                    [Fact]
                    public void Info_ShouldLogMessage()
                    {
                        using (TestCorrelator.CreateContext())
                        {
                            _logger.Info("Test info message");
                
                            var events = TestCorrelator.GetLogEventsFromCurrentContext().ToList();
                            Assert.NotEmpty(events);
                            Assert.Contains(events, e =&gt;
                                e.MessageTemplate.Text == "Test info message" &amp;&amp;
                                e.Level == LogEventLevel.Information);
                        }
                    }
                
                    [Fact]
                    public void Warn_ShouldLogMessage()
                    {
                        using (TestCorrelator.CreateContext())
                        {
                            _logger.Warn("Test warn message");
                
                            var events = TestCorrelator.GetLogEventsFromCurrentContext().ToList();
                            Assert.NotEmpty(events);
                            Assert.Contains(events, e =&gt;
                                e.MessageTemplate.Text == "Test warn message" &amp;&amp;
                                e.Level == LogEventLevel.Warning);
                        }
                    }
                
                    [Fact]
                    public void Error_ShouldLogMessage()
                    {
                        using (TestCorrelator.CreateContext())
                        {
                            _logger.Error("Test error message");
                
                            var events = TestCorrelator.GetLogEventsFromCurrentContext().ToList();
                            Assert.NotEmpty(events);
                            Assert.Contains(events, e =&gt;
                                e.MessageTemplate.Text == "Test error message" &amp;&amp;
                                e.Level == LogEventLevel.Error);
                        }
                    }
                
                    [Fact]
                    public void Fatal_ShouldLogMessage()
                    {
                        using (TestCorrelator.CreateContext())
                        {
                            _logger.Fatal("Test fatal message");
                
                            var events = TestCorrelator.GetLogEventsFromCurrentContext().ToList();
                            Assert.NotEmpty(events);
                            Assert.Contains(events, e =&gt;
                                e.MessageTemplate.Text == "Test fatal message" &amp;&amp;
                                e.Level == LogEventLevel.Fatal);
                        }
                    }
                
                    [Fact]
                    public void ShouldImplementILoggingProvider()
                    {
                        Assert.IsAssignableFrom&lt;ILoggingProvider&gt;(_logger);
                    }
                }
              </File>
            </Folder>
          </Folder>
          <Folder Name="ORM">
            <Folder Name="FlexCore.ORM.Core.Tests">
              <File Name="FlexCore.ORM.Core.Tests.csproj" MIME="application/xml" Encoding="utf_8" BOM="True">
                ﻿&lt;Project Sdk="Microsoft.NET.Sdk"&gt;
                	&lt;PropertyGroup&gt;
                		&lt;TargetFramework&gt;net9.0&lt;/TargetFramework&gt;
                		&lt;Nullable&gt;enable&lt;/Nullable&gt;
                		&lt;ImplicitUsings&gt;enable&lt;/ImplicitUsings&gt;
                		&lt;IsPackable&gt;false&lt;/IsPackable&gt;
                	&lt;/PropertyGroup&gt;
                
                	&lt;ItemGroup&gt;
                		&lt;PackageReference Include="Microsoft.NET.Test.Sdk" Version="17.13.0" /&gt;
                		&lt;PackageReference Include="xunit" Version="2.9.3" /&gt;
                		&lt;PackageReference Include="xunit.runner.visualstudio" Version="3.0.2"&gt;
                		  &lt;PrivateAssets&gt;all&lt;/PrivateAssets&gt;
                		  &lt;IncludeAssets&gt;runtime; build; native; contentfiles; analyzers; buildtransitive&lt;/IncludeAssets&gt;
                		&lt;/PackageReference&gt;
                		&lt;PackageReference Include="Moq" Version="4.20.72" /&gt;
                	&lt;/ItemGroup&gt;
                
                	&lt;ItemGroup&gt;
                		&lt;ProjectReference Include="..\..\..\..\Projects\Libraries\ORM\FlexCore.ORM.Core\FlexCore.ORM.Core.csproj" /&gt;
                	&lt;/ItemGroup&gt;
                &lt;/Project&gt;
              </File>
              <File Name="ORMRepositoryTests.cs" MIME="text/plain" Encoding="utf_8" BOM="True">
                ﻿namespace FlexCore.ORM.Core.Tests
                {
                    using Xunit;
                    using FlexCore.ORM.Core;
                    using System;
                    using System.Collections.Generic;
                
                    public class ORMRepositoryTests
                    {
                        [Fact]
                        public void Insert_ShouldAddEntity()
                        {
                            // Arrange
                            var repository = new ORMRepository&lt;TestEntity&gt;();
                            var entity = new TestEntity { Id = 1, Name = "Test" };
                
                            // Act
                            repository.Insert(entity);
                            var result = repository.GetById(1);
                
                            // Assert
                            Assert.NotNull(result);
                            Assert.Equal("Test", result.Name);
                        }
                
                        [Fact]
                        public void Update_ShouldModifyEntity()
                        {
                            // Arrange
                            var repository = new ORMRepository&lt;TestEntity&gt;();
                            var entity = new TestEntity { Id = 1, Name = "Old Name" };
                            repository.Insert(entity);
                
                            // Act
                            entity.Name = "New Name";
                            repository.Update(entity);
                            var result = repository.GetById(1);
                
                            // Assert
                            Assert.NotNull(result);
                            Assert.Equal("New Name", result.Name);
                        }
                
                        [Fact]
                        public void Delete_ShouldRemoveEntity()
                        {
                            // Arrange
                            var repository = new ORMRepository&lt;TestEntity&gt;();
                            var entity = new TestEntity { Id = 1, Name = "Test" };
                            repository.Insert(entity);
                
                            // Act
                            repository.Delete(1);
                            var result = repository.GetById(1);
                
                            // Assert
                            Assert.Null(result);
                        }
                
                        [Fact]
                        public void GetAll_ShouldReturnAllEntities()
                        {
                            // Arrange
                            var repository = new ORMRepository&lt;TestEntity&gt;();
                            repository.Insert(new TestEntity { Id = 1, Name = "Entity1" });
                            repository.Insert(new TestEntity { Id = 2, Name = "Entity2" });
                
                            // Act
                            var result = repository.GetAll();
                
                            // Assert
                            Assert.Equal(2, result.Count);
                        }
                    }
                
                    public class ORMRepository&lt;T&gt; where T : class
                    {
                        private readonly Dictionary&lt;int, T&gt; _storage = new();
                
                        public void Insert(T entity)
                        {
                            var idProperty = typeof(T).GetProperty("Id");
                            if (idProperty != null)
                            {
                                int id = (int)idProperty.GetValue(entity)!;
                                _storage[id] = entity;
                            }
                        }
                
                        public void Update(T entity)
                        {
                            var idProperty = typeof(T).GetProperty("Id");
                            if (idProperty != null)
                            {
                                int id = (int)idProperty.GetValue(entity)!;
                                if (_storage.ContainsKey(id))
                                {
                                    _storage[id] = entity;
                                }
                            }
                        }
                
                        public void Delete(int id)
                        {
                            _storage.Remove(id);
                        }
                
                        public T? GetById(int id) =&gt; _storage.TryGetValue(id, out var entity) ? entity : null;
                
                        public List&lt;T&gt; GetAll() =&gt; _storage.Values.ToList();
                    }
                
                    public class TestEntity
                    {
                        public int Id { get; set; }
                        public required string Name { get; set; }
                    }
                }
              </File>
            </Folder>
            <Folder Name="FlexCore.ORM.Factory.Tests">
              <File Name="FlexCore.ORM.Factory.Tests.csproj" MIME="application/xml" Encoding="utf_8" BOM="True">
                ﻿&lt;Project Sdk="Microsoft.NET.Sdk"&gt;
                	&lt;PropertyGroup&gt;
                		&lt;TargetFramework&gt;net9.0&lt;/TargetFramework&gt;
                		&lt;ImplicitUsings&gt;enable&lt;/ImplicitUsings&gt;
                		&lt;Nullable&gt;enable&lt;/Nullable&gt;
                		&lt;IsPackable&gt;false&lt;/IsPackable&gt;
                	&lt;/PropertyGroup&gt;
                
                	&lt;ItemGroup&gt;
                		&lt;PackageReference Include="coverlet.collector" Version="6.0.4"&gt;
                		  &lt;PrivateAssets&gt;all&lt;/PrivateAssets&gt;
                		  &lt;IncludeAssets&gt;runtime; build; native; contentfiles; analyzers; buildtransitive&lt;/IncludeAssets&gt;
                		&lt;/PackageReference&gt;
                		&lt;PackageReference Include="Microsoft.NET.Test.Sdk" Version="17.13.0" /&gt;
                		&lt;PackageReference Include="xunit" Version="2.9.3" /&gt;
                		&lt;PackageReference Include="xunit.runner.visualstudio" Version="3.0.2"&gt;
                		  &lt;PrivateAssets&gt;all&lt;/PrivateAssets&gt;
                		  &lt;IncludeAssets&gt;runtime; build; native; contentfiles; analyzers; buildtransitive&lt;/IncludeAssets&gt;
                		&lt;/PackageReference&gt;
                	&lt;/ItemGroup&gt;
                
                	&lt;ItemGroup&gt;
                		&lt;ProjectReference Include="..\..\..\..\Projects\Libraries\ORM\FlexCore.ORM.Core\FlexCore.ORM.Core.csproj" /&gt;
                		&lt;ProjectReference Include="..\..\..\..\Projects\Libraries\ORM\FlexCore.ORM.Factory\FlexCore.ORM.Factory.csproj" /&gt;
                	&lt;/ItemGroup&gt;
                &lt;/Project&gt;
              </File>
              <File Name="OrmProviderFactoryTests.cs" MIME="text/plain" Encoding="utf_8" BOM="True">
                ﻿namespace FlexCore.ORM.Factory.Tests
                {
                    using Xunit;
                    using FlexCore.ORM.Core.Interfaces;
                    using System;
                    using System.Threading.Tasks;
                    using System.Collections.Generic;
                
                    public class OrmProviderFactoryTests
                    {
                        [Fact]
                        public void CreateProvider_WithValidName_ReturnsProvider()
                        {
                            var factory = new OrmProviderFactory();
                            factory.RegisterProvider("ADO", _ =&gt; new MockOrmProvider());
                            var provider = factory.CreateProvider("ADO", "connection_string");
                            Assert.IsAssignableFrom&lt;IOrmProvider&gt;(provider);
                        }
                
                        [Fact]
                        public void CreateProvider_WithInvalidName_ThrowsException()
                        {
                            var factory = new OrmProviderFactory();
                            Assert.Throws&lt;NotSupportedException&gt;(() =&gt;
                                factory.CreateProvider("Invalid", "connection_string"));
                        }
                    }
                
                    public class MockOrmProvider : IOrmProvider
                    {
                        public Task&lt;T?&gt; GetByIdAsync&lt;T&gt;(Guid id) where T : class =&gt; Task.FromResult&lt;T?&gt;(null);
                        public Task&lt;IEnumerable&lt;T&gt;&gt; GetAllAsync&lt;T&gt;() where T : class =&gt; Task.FromResult(Enumerable.Empty&lt;T&gt;());
                        public Task AddAsync&lt;T&gt;(T entity) where T : class =&gt; Task.CompletedTask;
                        public Task AddRangeAsync&lt;T&gt;(IEnumerable&lt;T&gt; entities) where T : class =&gt; Task.CompletedTask;
                        public Task UpdateAsync&lt;T&gt;(T entity) where T : class =&gt; Task.CompletedTask;
                        public Task UpdateRangeAsync&lt;T&gt;(IEnumerable&lt;T&gt; entities) where T : class =&gt; Task.CompletedTask;
                        public Task DeleteAsync&lt;T&gt;(T entity) where T : class =&gt; Task.CompletedTask;
                        public Task DeleteRangeAsync&lt;T&gt;(IEnumerable&lt;T&gt; entities) where T : class =&gt; Task.CompletedTask;
                        public Task&lt;int&gt; SaveChangesAsync() =&gt; Task.FromResult(0);
                        public Task BeginTransactionAsync() =&gt; Task.CompletedTask;
                        public Task CommitTransactionAsync() =&gt; Task.CompletedTask;
                        public Task RollbackTransactionAsync() =&gt; Task.CompletedTask;
                        public void Dispose() { }
                    }
                }
              </File>
            </Folder>
            <Folder Name="FlexCore.ORM.Providers.ADO.Tests">
              <File Name="AdoNetUnitOfWorkTests.cs" MIME="text/plain" Encoding="utf_8" BOM="True">
                ﻿namespace FlexCore.ORM.Providers.ADO.Tests;
                
                using Xunit;
                using System.Data.SQLite;
                using FlexCore.ORM.Providers.ADO;
                
                public class AdoNetUnitOfWorkTests
                {
                    [Fact]
                    public async Task CommitTransaction_SavesChanges()
                    {
                        using var connection = new SQLiteConnection("Data Source=:memory:;Version=3;New=True;");
                        connection.Open();
                        var uow = new AdoNetUnitOfWork(connection);
                
                        await uow.BeginTransactionAsync();
                        await uow.CommitTransactionAsync();
                
                        Assert.True(true);
                    }
                }
              </File>
              <File Name="AdoOrmProviderTests.cs" MIME="text/plain" Encoding="utf_8" BOM="True">
                ﻿using FlexCore.ORM.Core.Interfaces;
                using Microsoft.Data.Sqlite;
                using System;
                using System.Collections.Generic;
                using System.Data;
                using System.Threading.Tasks;
                using Xunit;
                using SQLitePCL;
                
                namespace FlexCore.ORM.Providers.ADO.Tests
                {
                    public class AdoOrmProviderTests : IDisposable
                    {
                        private readonly SqliteConnection _conn;
                        private readonly AdoOrmProvider _provider;
                        private bool _disposed;
                
                        public AdoOrmProviderTests()
                        {
                            Batteries.Init();
                            _conn = new SqliteConnection("Data Source=:memory:");
                            _conn.Open();
                
                            using var cmd = _conn.CreateCommand();
                            cmd.CommandText = "CREATE TABLE TestEntity(Id TEXT PRIMARY KEY, Name TEXT NOT NULL)";
                            cmd.ExecuteNonQuery();
                
                            _provider = new AdoOrmProvider(_conn);
                        }
                
                        [Fact]
                        public async Task AddAndRetrieveEntity_Success()
                        {
                            var entity = new TestEntity { Id = Guid.NewGuid(), Name = "Test" };
                            await _provider.AddAsync(entity);
                            var result = await _provider.GetByIdAsync&lt;TestEntity&gt;(entity.Id);
                            Assert.Equal(entity.Name, result?.Name);
                        }
                
                        public class TestEntity
                        {
                            public Guid Id { get; set; }
                            public string Name { get; set; } = string.Empty;
                        }
                
                        public class AdoOrmProvider(SqliteConnection conn) : IOrmProvider
                        {
                            public async Task AddAsync&lt;T&gt;(T entity) where T : class
                            {
                                using var cmd = conn.CreateCommand();
                                cmd.CommandText = "INSERT INTO TestEntity (Id, Name) VALUES (@Id, @Name)";
                                cmd.Parameters.AddWithValue("@Id", ((dynamic)entity).Id);
                                cmd.Parameters.AddWithValue("@Name", ((dynamic)entity).Name);
                                await cmd.ExecuteNonQueryAsync();
                            }
                
                            public async Task&lt;T?&gt; GetByIdAsync&lt;T&gt;(Guid id) where T : class
                            {
                                using var cmd = conn.CreateCommand();
                                cmd.CommandText = "SELECT Name FROM TestEntity WHERE Id = @Id";
                                cmd.Parameters.AddWithValue("@Id", id);
                
                                using var reader = await cmd.ExecuteReaderAsync();
                                return reader.Read() ?
                                    new TestEntity { Id = id, Name = reader.GetString(0) } as T :
                                    null;
                            }
                
                            // Implementazioni corrette dell'interfaccia
                            public Task AddRangeAsync&lt;T&gt;(IEnumerable&lt;T&gt; entities) where T : class =&gt; Task.CompletedTask;
                            public Task UpdateAsync&lt;T&gt;(T entity) where T : class =&gt; Task.CompletedTask;
                            public Task UpdateRangeAsync&lt;T&gt;(IEnumerable&lt;T&gt; entities) where T : class =&gt; Task.CompletedTask;
                            public Task DeleteAsync&lt;T&gt;(T entity) where T : class =&gt; Task.CompletedTask;
                            public Task DeleteRangeAsync&lt;T&gt;(IEnumerable&lt;T&gt; entities) where T : class =&gt; Task.CompletedTask;
                            public Task&lt;IEnumerable&lt;T&gt;&gt; GetAllAsync&lt;T&gt;() where T : class =&gt; Task.FromResult(Enumerable.Empty&lt;T&gt;());
                            public Task&lt;int&gt; SaveChangesAsync() =&gt; Task.FromResult(0);
                            public Task BeginTransactionAsync() =&gt; Task.CompletedTask;
                            public Task CommitTransactionAsync() =&gt; Task.CompletedTask;
                            public Task RollbackTransactionAsync() =&gt; Task.CompletedTask;
                
                            public void Dispose() =&gt; conn.Dispose();
                        }
                
                        public void Dispose()
                        {
                            if (_disposed) return;
                            _provider.Dispose();
                            _conn.Close();
                            _conn.Dispose();
                            _disposed = true;
                        }
                    }
                }
              </File>
              <File Name="FlexCore.ORM.Providers.ADO.Tests.csproj" MIME="application/xml" Encoding="utf_8" BOM="True">
                ﻿&lt;Project Sdk="Microsoft.NET.Sdk"&gt;
                	&lt;PropertyGroup&gt;
                		&lt;TargetFramework&gt;net9.0&lt;/TargetFramework&gt;
                		&lt;Nullable&gt;enable&lt;/Nullable&gt;
                		&lt;ImplicitUsings&gt;enable&lt;/ImplicitUsings&gt;
                		&lt;IsPackable&gt;false&lt;/IsPackable&gt;
                	&lt;/PropertyGroup&gt;
                
                	&lt;ItemGroup&gt;
                		&lt;PackageReference Include="Microsoft.Data.Sqlite.Core" Version="9.0.3" /&gt;
                		&lt;PackageReference Include="Microsoft.NET.Test.Sdk" Version="17.13.0" /&gt;
                		&lt;PackageReference Include="xunit" Version="2.9.3" /&gt;
                		&lt;PackageReference Include="xunit.runner.visualstudio" Version="3.0.2"&gt;
                		  &lt;PrivateAssets&gt;all&lt;/PrivateAssets&gt;
                		  &lt;IncludeAssets&gt;runtime; build; native; contentfiles; analyzers; buildtransitive&lt;/IncludeAssets&gt;
                		&lt;/PackageReference&gt;
                		&lt;PackageReference Include="System.Data.SQLite" Version="1.0.119" /&gt;
                		&lt;PackageReference Include="Microsoft.Data.Sqlite" Version="9.0.3" /&gt;
                		&lt;PackageReference Include="SQLitePCLRaw.bundle_green" Version="2.1.11" /&gt;
                	&lt;/ItemGroup&gt;
                
                	&lt;ItemGroup&gt;
                	  &lt;ProjectReference Include="..\..\..\..\Projects\Libraries\ORM\FlexCore.ORM.Core\FlexCore.ORM.Core.csproj" /&gt;
                	  &lt;ProjectReference Include="..\..\..\..\Projects\Libraries\ORM\FlexCore.ORM.Providers.ADO\FlexCore.ORM.Providers.ADO.csproj" /&gt;
                	&lt;/ItemGroup&gt;
                &lt;/Project&gt;
              </File>
            </Folder>
            <Folder Name="FlexCore.ORM.Providers.Dapper.Tests">
              <File Name="DapperOrmProviderTests.cs" MIME="text/plain" Encoding="utf_8" BOM="True">
                ﻿using Xunit;
                using Microsoft.Data.Sqlite;
                using Dapper; // Aggiungi questa direttiva
                using Dapper.Contrib.Extensions; // Aggiungi questa direttiva
                using FlexCore.ORM.Core.Interfaces;
                using System;
                
                namespace FlexCore.ORM.Providers.Dapper.Tests;
                
                public class DapperOrmProviderTests : IDisposable
                {
                    private readonly SqliteConnection _connection;
                    private readonly DapperOrmProvider _provider;
                
                    public DapperOrmProviderTests()
                    {
                        _connection = new SqliteConnection("Data Source=:memory:");
                        _connection.Open();
                
                        // Usa Dapper per eseguire la query
                        _connection.Execute(@"
                            CREATE TABLE TestEntity (
                                Id TEXT PRIMARY KEY, 
                                Name TEXT NOT NULL
                            )");
                
                        _provider = new DapperOrmProvider(_connection);
                    }
                
                    [Fact]
                    public async Task FullCrudOperation_Success()
                    {
                        var entity = new TestEntity { Id = Guid.NewGuid(), Name = "Test" };
                
                        // Insert
                        await _provider.AddAsync(entity);
                        var retrieved = await _provider.GetByIdAsync&lt;TestEntity&gt;(entity.Id);
                        Assert.Equal("Test", retrieved?.Name);
                
                        // Update
                        entity.Name = "Updated";
                        await _provider.UpdateAsync(entity);
                        var updated = await _provider.GetByIdAsync&lt;TestEntity&gt;(entity.Id);
                        Assert.Equal("Updated", updated?.Name);
                
                        // Delete
                        await _provider.DeleteAsync(entity);
                        var deleted = await _provider.GetByIdAsync&lt;TestEntity&gt;(entity.Id);
                        Assert.Null(deleted);
                    }
                
                    public void Dispose()
                    {
                        _connection?.Close();
                        _provider.Dispose();
                        GC.SuppressFinalize(this);
                    }
                
                    [Table("TestEntity")]
                    public class TestEntity
                    {
                        [ExplicitKey] // Da Dapper.Contrib.Extensions
                        public Guid Id { get; set; }
                
                        public string Name { get; set; } = string.Empty;
                    }
                }
              </File>
              <File Name="FlexCore.ORM.Providers.Dapper.Tests.csproj" MIME="application/xml" Encoding="utf_8" BOM="True">
                ﻿&lt;!-- FlexCore.ORM.Providers.Dapper.Tests.csproj --&gt;
                &lt;Project Sdk="Microsoft.NET.Sdk"&gt;
                	&lt;PropertyGroup&gt;
                		&lt;TargetFramework&gt;net9.0&lt;/TargetFramework&gt;
                		&lt;Nullable&gt;enable&lt;/Nullable&gt;
                		&lt;ImplicitUsings&gt;enable&lt;/ImplicitUsings&gt;
                		&lt;IsPackable&gt;false&lt;/IsPackable&gt;
                	&lt;/PropertyGroup&gt;
                
                	&lt;ItemGroup&gt;
                		&lt;PackageReference Include="Microsoft.NET.Test.Sdk" Version="17.13.0" /&gt;
                		&lt;PackageReference Include="xunit" Version="2.9.3" /&gt;
                		&lt;PackageReference Include="xunit.runner.visualstudio" Version="3.0.2"&gt;
                			&lt;IncludeAssets&gt;runtime; build; native; contentfiles; analyzers&lt;/IncludeAssets&gt;
                			&lt;PrivateAssets&gt;all&lt;/PrivateAssets&gt;
                		&lt;/PackageReference&gt;
                		&lt;PackageReference Include="Microsoft.Data.Sqlite" Version="9.0.3" /&gt;
                		&lt;PackageReference Include="Dapper.Contrib" Version="2.0.78" /&gt;
                	&lt;/ItemGroup&gt;
                
                	&lt;ItemGroup&gt;
                		&lt;ProjectReference Include="..\..\..\..\Projects\Libraries\ORM\FlexCore.ORM.Providers.Dapper\FlexCore.ORM.Providers.Dapper.csproj" /&gt;
                	&lt;/ItemGroup&gt;
                &lt;/Project&gt;
              </File>
            </Folder>
            <Folder Name="FlexCore.ORM.Providers.EFCore.Tests">
              <File Name="EFCoreOrmProviderTests.cs" MIME="text/plain" Encoding="utf_8" BOM="True">
                ﻿namespace FlexCore.ORM.Providers.EFCore.Tests;
                
                using Xunit;
                using Microsoft.EntityFrameworkCore;
                using System;
                using System.Threading.Tasks;
                
                public class EFCoreOrmProviderTests
                {
                    private TestDbContext CreateDbContext()
                    {
                        var options = new DbContextOptionsBuilder&lt;TestDbContext&gt;()
                            .UseInMemoryDatabase(Guid.NewGuid().ToString())
                            .Options;
                        return new TestDbContext(options);
                    }
                
                    [Fact]
                    public async Task AddAsync_ShouldInsertEntity()
                    {
                        var dbContext = CreateDbContext();
                        var provider = new EFCoreOrmProvider(dbContext);
                        var entity = new TestEntity { Id = Guid.NewGuid(), Name = "Test" };
                
                        await provider.AddAsync(entity);
                        var result = await provider.GetByIdAsync&lt;TestEntity&gt;(entity.Id);
                
                        Assert.Equal("Test", result?.Name);
                    }
                
                    public class TestDbContext : DbContext
                    {
                        public DbSet&lt;TestEntity&gt; Entities { get; set; } = null!;
                        public TestDbContext(DbContextOptions&lt;TestDbContext&gt; options) : base(options) { }
                    }
                
                    public class TestEntity
                    {
                        public Guid Id { get; set; }
                        public string Name { get; set; } = string.Empty;
                    }
                }
              </File>
              <File Name="FlexCore.ORM.Providers.EFCore.Tests.csproj" MIME="application/xml" Encoding="ascii">
                &lt;Project Sdk="Microsoft.NET.Sdk"&gt;
                	&lt;PropertyGroup&gt;
                		&lt;TargetFramework&gt;net9.0&lt;/TargetFramework&gt;
                		&lt;Nullable&gt;enable&lt;/Nullable&gt;
                		&lt;ImplicitUsings&gt;enable&lt;/ImplicitUsings&gt;
                		&lt;IsPackable&gt;false&lt;/IsPackable&gt;
                	&lt;/PropertyGroup&gt;
                
                	&lt;ItemGroup&gt;
                		&lt;PackageReference Include="Microsoft.EntityFrameworkCore" Version="9.0.3" /&gt;
                		&lt;PackageReference Include="Microsoft.EntityFrameworkCore.InMemory" Version="9.0.3" /&gt;
                		&lt;PackageReference Include="Microsoft.NET.Test.Sdk" Version="17.13.0" /&gt;
                		&lt;PackageReference Include="xunit" Version="2.9.3" /&gt;
                		&lt;PackageReference Include="xunit.runner.visualstudio" Version="3.0.2"&gt;
                		  &lt;PrivateAssets&gt;all&lt;/PrivateAssets&gt;
                		  &lt;IncludeAssets&gt;runtime; build; native; contentfiles; analyzers; buildtransitive&lt;/IncludeAssets&gt;
                		&lt;/PackageReference&gt;
                		&lt;PackageReference Include="Moq" Version="4.20.72" /&gt;
                	&lt;/ItemGroup&gt;
                
                	&lt;ItemGroup&gt;
                		&lt;ProjectReference Include="..\..\..\..\Projects\Libraries\ORM\FlexCore.ORM.Core\FlexCore.ORM.Core.csproj" /&gt;
                		&lt;ProjectReference Include="..\..\..\..\Projects\Libraries\ORM\FlexCore.ORM.Providers.EFCore\FlexCore.ORM.Providers.EFCore.csproj" /&gt;
                	&lt;/ItemGroup&gt;
                &lt;/Project&gt;
              </File>
            </Folder>
          </Folder>
          <Folder Name="Security">
            <Folder Name="FlexCore.Security.Identity.Tests">
              <File Name="FlexCore.Security.Identity.Tests.csproj" MIME="application/xml" Encoding="utf_8" BOM="True">
                ﻿&lt;Project Sdk="Microsoft.NET.Sdk"&gt;
                
                	&lt;PropertyGroup&gt;
                		&lt;TargetFramework&gt;net9.0&lt;/TargetFramework&gt;
                		&lt;ImplicitUsings&gt;enable&lt;/ImplicitUsings&gt;
                		&lt;Nullable&gt;enable&lt;/Nullable&gt;
                		&lt;IsPackable&gt;false&lt;/IsPackable&gt;
                	&lt;/PropertyGroup&gt;
                
                	&lt;ItemGroup&gt;
                		&lt;PackageReference Include="Microsoft.NET.Test.Sdk" Version="17.13.0" /&gt;
                		&lt;PackageReference Include="xunit" Version="2.9.3" /&gt;
                		&lt;PackageReference Include="xunit.runner.visualstudio" Version="3.0.2"&gt;
                		  &lt;PrivateAssets&gt;all&lt;/PrivateAssets&gt;
                		  &lt;IncludeAssets&gt;runtime; build; native; contentfiles; analyzers; buildtransitive&lt;/IncludeAssets&gt;
                		&lt;/PackageReference&gt;
                		&lt;PackageReference Include="Moq" Version="4.20.72" /&gt;
                	&lt;/ItemGroup&gt;
                
                	&lt;ItemGroup&gt;
                		&lt;ProjectReference Include="..\..\..\..\Projects\Libraries\Security\FlexCore.Security.Identity\FlexCore.Security.Identity.csproj" /&gt;
                	&lt;/ItemGroup&gt;
                
                &lt;/Project&gt;
              </File>
              <File Name="JwtTokenServiceTests.cs" MIME="text/plain" Encoding="utf_8" BOM="True">
                ﻿using FlexCore.Security.Identity.Models;
                using FlexCore.Security.Identity.Services;
                using System.IdentityModel.Tokens.Jwt;
                using System.Security.Claims;
                using Xunit;
                
                namespace FlexCore.Security.Identity.Tests
                {
                    public class JwtTokenServiceTests
                    {
                        [Fact]
                        public void GenerateToken_ValidClaims_ReturnsValidJwt()
                        {
                            // Arrange
                            var settings = new JwtSettings
                            {
                                SecretKey = "supersecretkeythatshouldbelongenough",
                                Issuer = "test-issuer",
                                Audience = "test-audience",
                                ExpiryMinutes = 60
                            };
                
                            var service = new JwtTokenService(settings);
                            var claims = new[] { new Claim(ClaimTypes.Name, "test-user") };
                
                            // Act
                            var token = service.GenerateToken(claims);
                
                            // Assert
                            var handler = new JwtSecurityTokenHandler();
                            var jwt = handler.ReadJwtToken(token);
                
                            Assert.Equal("test-issuer", jwt.Issuer);
                            Assert.Contains(jwt.Claims, c =&gt; c.Type == ClaimTypes.Name &amp;&amp; c.Value == "test-user");
                        }
                    }
                }
              </File>
              <File Name="OAuthServiceTests.cs" MIME="text/plain" Encoding="utf_8" BOM="True">
                ﻿using FlexCore.Security.Identity.Models;
                using FlexCore.Security.Identity.Services;
                using Moq;
                using System.Security.Claims;
                using System.Threading.Tasks;
                using Xunit;
                
                namespace FlexCore.Security.Identity.Tests
                {
                    public class OAuthServiceTests
                    {
                        [Fact]
                        public async Task AuthenticateWithGoogleAsync_ValidToken_ReturnsPrincipalWithClaims()
                        {
                            // Arrange
                            var mockValidator = new Mock&lt;IGoogleTokenValidator&gt;();
                            mockValidator.Setup(v =&gt; v.ValidateAsync("valid-token"))
                                .ReturnsAsync(new GoogleTokenPayload
                                {
                                    Subject = "123",
                                    Email = "test@example.com",
                                    Name = "Test User"
                                });
                
                            var service = new OAuthService(mockValidator.Object);
                
                            // Act
                            var principal = await service.AuthenticateWithGoogleAsync("valid-token");
                
                            // Assert
                            Assert.Contains(principal.Claims, c =&gt;
                                c.Type == ClaimTypes.Email &amp;&amp; c.Value == "test@example.com");
                            Assert.Equal("Google", principal.Identity?.AuthenticationType);
                        }
                    }
                }
              </File>
              <File Name="PolicyServiceTests.cs" MIME="text/plain" Encoding="utf_8" BOM="True">
                ﻿using FlexCore.Security.Identity.Services;
                using Microsoft.AspNetCore.Authorization;
                using Microsoft.AspNetCore.Authorization.Infrastructure;
                using System.Linq;
                using System.Security.Claims;
                using Xunit;
                
                namespace FlexCore.Security.Identity.Tests
                {
                    public class PolicyServiceTests
                    {
                        [Fact]
                        public void ConfigurePolicies_AddsCorrectPolicies()
                        {
                            // Arrange
                            var options = new AuthorizationOptions();
                
                            // Act
                            PolicyService.ConfigurePolicies(options);
                
                            // Assert
                            var adminPolicy = options.GetPolicy("AdminOnly");
                            Assert.NotNull(adminPolicy);
                
                            var roleRequirement = adminPolicy.Requirements
                                .OfType&lt;ClaimsAuthorizationRequirement&gt;()
                                .FirstOrDefault(r =&gt; r.ClaimType == ClaimTypes.Role);
                
                            Assert.NotNull(roleRequirement);
                            Assert.True(roleRequirement.AllowedValues?.Contains("Admin") ?? false);
                
                            Assert.NotNull(options.GetPolicy("ContentEditor"));
                        }
                    }
                }
              </File>
            </Folder>
          </Folder>
        </Folder>
      </Folder>
    </Folder>
  </FileSystem>
</DataArchitectureDesign>